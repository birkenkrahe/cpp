#+title: C OPERATORS - PRACTICE
#+AUTHOR: [yourName] (pledged)
#+startup: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :comments both
* README

- This file is a practice file for logical and compound operators

- Time: approx. 30 min.

- When you're done with a section move the cursor on the section
  heading and type ~S-<right>~ (or SHIFT+<right-arrow>).

- This section follows chapter 3 in Davenport/Vine (2015) and chapters
  4 and 5 in King (2008).
  
* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file with
  your name and save the file (~C-x C-s~).

* TODO Logical operators &&, ||, !

1) Complete the ~printf~ statement in each of the following code blocks.

2) Before you run the code block, guess what the output will be.

   - Check if (NOT ~i)~ is smaller than ~j~, for ~i=10~ and ~j=5~.

     #+name: logical1
     #+begin_src C :exports both
       int i = 10, j = 5;
       printf("%d\n", ??? );
     #+end_src

     #+RESULTS: logical1

   - Check the value of NOT(NOT (i)) + NOT(j), for ~i=2~ and ~j=1~.

     #+name: logical2
     #+begin_src C :exports both
       int i = 2, j = 1;
       printf("%d\n", ??? );
     #+end_src

   - Using the previous code block [[logical2]], check if the following
     assertion holds: NOT(x + y) = NOT(x) + NOT(y).

     #+name: logical21
     #+begin_src C :exports both
       int i = 2, j = 1;
       printf("%d\n", ??? );
     #+end_src

   - Compute ~i~ AND ~j~ OR ~k~, for ~i=5~, ~j=0~, ~k=-5~.

     #+name: logical3
     #+begin_src C :exports both
       int i = 5, j = 0, k = -5;
       printf("%d\n",  ??? ); 
     #+end_src

   - Compute ~i < j~ OR  ~k~, for ~i=1~, ~j=2~, ~k=3~.

     #+name: logical4
     #+begin_src C :exports both
       int i = 1, j = 2, k = 3;
       printf("%d\n",  ??? ); 
     #+end_src

* TODO Checking input for upper and lower case

1) In the shell, create an input file named ~ascii~ with the letter ~b~ in
   it, and check that the file contains the letter.

   #+name: ascii_input
   #+begin_example bash
     echo 'b' > ascii
     cat ascii
   #+end_example

2) Run the code block [[ascii]] below. Complete the condition for the ~IF~
   statement to check if the input character ~letter~ is an ~B~. When you
   run the program, you should see that the input is not recognized.

   #+name: ascii
   #+begin_src C :cmdline < ascii :results output :exports both
     char letter;
     scanf("%c", &letter);

     if ( ??? )
       printf("Okay! Input %c recognized as 'b' or 'B'.\n", letter);
      else
        printf("Not okay! Input %c not recognized as 'b' or 'B'.\n", letter);
   #+end_src

3) Change the code from [[ascii]] in [[ascii1]] so that the input ~b~ *or* ~B~ are
   *both* recognized. 

   #+name: ascii1
   #+begin_src C :cmdline < ascii :results output :exports both
     char letter;
     scanf("%c", &letter);

     if ( ??? )
       printf("Okay! Input %c recognized as 'b' or 'B'.\n", letter);
      else
        printf("Not okay! Input %c not recognized as 'b' or 'B'.\n", letter);
   #+end_src

4) What is the ASCII code of the letters ~b~ and ~B~? Write a short
   program to print out both the character and the ASCII integer
   value. Put both the lower and the upper case letter into the input
   file ~ascii2~.

   *Important:* when using ~%c~ with ~scanf~, the empty space is accepted as
   a character with the ASCII value 32.

   Inputfile:
   #+begin_example bash
     echo 'b B' > ascii2
     cat ascii2
   #+end_example

   #+name: ascii_check
   #+begin_src C :cmdline < ascii2
     char b, B;
     scanf( ??? );   // accept b and B as input
    printf( ??? );   // print ASCII value of b
    printf( ??? );   // print ASCII value of B
   #+end_src

* TODO Checking for a range of values

1) On the shell, create a file ~num~ that contains the number 5.

   #+begin_example bash
     echo "5 0 10" > num
     cat num
   #+end_example

2) Define the condition in the code block [[range]] below to check if the
   input value 5 for ~i~ is in the interval ~[m,n) = [0,10)~.

   #+name: range
   #+begin_src C :cmdline < num :results output :exports both
     int i, m, n;
     scanf("%d %d %d", &i, &m, &n);

     if ( ??? ) {
       printf("%d is in the interval [%d,%d)\n", i, m, n);
      } else {
       printf("%d is NOT in the interval [%d,%d)\n", i, m, n);
      }
   #+end_src

3) Run [[range]] for different input values:

   | i = -5 | m = 0 | n = 10 |
   | i = 11 | m = 0 | n = 10 |
   | i = 0  | m = 0 | n = 10 |
   | i = 10 | m = 0 | n = 10 |

   Remember that you have to change the input file to get new input.

   Remember that you need to change the ~#+name~ of the code block if
   you want to compare output in the same Org-mode notebook.

4) How would you have to change the condition to check if the input
   variable ~i~ is *OUTSIDE* of ~[m,n)~ ? 

   - Change the input values in the input file ~num~ back to 5 0 10

   - Modify the code in [[range1]] below to test if 5 is outside of the
     interval [0,10) and run it.

   #+name: range1
   #+begin_src C :cmdline < num :results output :exports both
     int i, m, n;
     scanf("%d %d %d", &i, &m, &n);

     if ( ??? ) {
       printf("%d is NOT in the interval [%d,%d)\n", i, m, n);
      } else {
       printf("%d is in the interval [%d,%d)\n", i, m, n);
      }
   #+end_src

* TODO Caveat: i < j < k

1) In C, the expression ~i < j < k~ is perfectly legal but it does
   NOT check if ~j~ is between ~i~ and ~k~:
   - The relational operator ~<~ is evaluated from the left. First the
     Boolean value of ~i < j~ is computed. It is either 0 or 1.
   - Next, the check ~0 < k~ or ~1 < k~ is performed. The following
     example shows how this can go wrong. Run it for illustration.

   #+name: caveat
   #+begin_src C :results output :exports both
     int i = 5, j = 1, k = 100;
     if (i < j < k) {
       printf("TRUE: %d < %d < %d\n", i, j, k);
      } else {
       printf("NOT TRUE: %d < %d < %d\n", i, j, k);
      }
   #+end_src

   #+RESULTS: caveat
   : TRUE: 5 < 1 < 100

3) Fix the the code [[caveat1]] so that the output is correct. Test it for
   different values of i, j, k.

   #+name: caveat1
   #+begin_src C :results output :exports both
     int i = 5, j = 1, k = 100;
     if ( ??? ) {
       printf("TRUE: %d < %d < %d\n", i, j, k);
      } else {
       printf("NOT TRUE: %d < %d < %d\n", i, j, k);
      }
   #+end_src

