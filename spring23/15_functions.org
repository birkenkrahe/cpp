#+TITLE:Functions
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 / Introduction to programming in C/C++
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:1 ^:nil num:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output 
* README

- This script introduces C functions.

- The PDF version of this file and of the completed practice
  workbook is available in GitHub.

- This section, including some sample code, is based on chapter 9 in
  King (2008).

* Overview

- C functions do not always resemble math functions ~f(x)~

- C functions don't need to have arguments (e.g. ~main(void)~)

- C functions need not compute a value (e.g. ~void hello(void)~)

- Each function is a small program with its own declarations and
  statements

- Functions allow us to
  1. *reuse* functions in other programs
  2. *recall* functions instead of duplicating code
  3. *modularize*, and easier understand and modify programs

- Once upon a time, programs didn't use to have functions!
  #+attr_latex: :width 400px
  #+caption: BASIC program snippet (Source: Collingbourne, 2022).
  _[[../img/15_basic.png]]

* Example: ~hello_world~ function: mostly ~void~

- Can you guess what the output of this code block will be?
  #+name: pgm:hello_world
  #+begin_src C :tangle ../src/hello_world.c
    // reusable function definition
    void hello_world(void)
    {
      printf("Hello world\n"); // what the function does
    }
    // reusable function call
    hello_world();
    hello_world();
    hello_world();
  #+end_src

  #+RESULTS: pgm:hello_world
  : Hello world
  : Hello world
  : Hello world
  
- function is doubly ~void~: no return value, no argument

- function code can be reused elsewhere

- function can be recalled at will

- Remember that the C compiler really sees this source file:
  1) ~#include~ header file for Input/output
  2) ~main~ function definition {...}
  3) ~hello_world~ function definition {...}
  4) three ~hello_world~ function calls
  #+attr_latex: :width 400px
  [[../img/15_helloc.png]]

* Functions are everywhere in C!

- How many functions do you see in this code block?

  #+begin_src C
    #include <stdio.h>
    #include <math.h>

    int main(void)
    {
      const double E = 2.7182818;

      printf("%g\n", log(E));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : 1

  Answer:
  #+begin_quote
  | FUNCTION | DEFINITION           | INPUT       | OUTPUT    |
  |----------+----------------------+-------------+-----------|
  | ~main()~   | main function        | None (~void~) | ~return 0~  |
  | ~printf()~ | printing function    | Arithmetic  | Formatted |
  | ~log()~    | logarithmic function | Constant    | Log of e  |
  #+end_quote

* Example: computing averages
** Function definition

- We want to compute the average of two ~double~ values, we can define a
  function to do it:

  #+name: average
  #+begin_src C :results silent
    double average ( double a, double b)
    {
      return (a + b) / 2.;
    }
  #+end_src

- Here, ~double~ is /return type/ and /argument data type/.

- ~a~ and ~b~ are /function parameters/ or /arguments/ - their values are
  supplied when the function is called

- The /function body/ is the executable part, enclosed in ~{...}~

- What's being executed by the body of the function ~average~?
  #+begin_quote Answer
  1) computing the average of two ~double~ numbers
  2) returning the result as a ~double~ number
  #+end_quote

** Function calls
*** Overview

- To call a function, write the /function name/ followed by a list of
  /function arguments/.

- The arguments are assigned to the function parameters.

- The argument can be any /expression/.
  
*** Simple call with numbers
#+name: simpleCall
#+begin_src C :noweb yes
  // function definition
  <<average>>

  // function call - result assigned to avg
  double avg = average(5.1, 8.9); // compute average of two numbers

  // function call inside function
  printf("Average of %g and %g: %g\n", 5.1, 8.9, avg);
#+end_src

#+RESULTS: simpleCall
: Average of 5.1 and 8.9: 7

*** Call with expressions

- Functions can have expressions as arguments.

  #+name: exprCall
  #+begin_src C :noweb yes
    // function definition
    <<average>>

    // declarations
    double x=5.1, y=8.9, avg2;

    // function call with expression
    avg2 = average(x/2., y/2.);

    // function call inside function
    printf("Average of %g/2 and %g/2: %g\n", x, y, avg2);
  #+end_src

  #+RESULTS: exprCall
  : Average of 5.1/2 and 8.9/2: 3.5

*** Call by other functions
- Functions can be called by other functions.

  #+name: nestedCall
  #+begin_src C :noweb yes
    // function definition
    <<average>>

      // declarations
    double x=5.1, y=8.9;

    // function call inside function
    printf("Average of %g and %g: %g\n", x, y, average(x,y));
  #+end_src

- What's happening in the last line exactly? Describe it!
  #+begin_quote
  1. The ~average~ function is called with ~x~ and ~y~ as arguments.
  2. ~average~ executes its ~return~ statement, returning ~(a+b)/2~.
  3. ~printf~ prints the value that ~average~ returns.
  4. The ~return~ value of ~average~ becomes an argument of ~printf~.
  #+end_quote
  
*** What happens to function results?

- The value of ~average~ is not saved anywhere. It is printed and
  then discarded.

- If we had needed to keep the value, we'd have to capture it in a
  variable (like ~avg~ in [[simpleCall]], and ~avg2~ in [[exprCall]]).

* Using a function in a program

- The following program reads three numbers and computes their
  averages, one pair at a time.

  Sample input:
  #+begin_src bash
    echo "3.5 9.6 10.2" > ./src/input
    cat ./src/input
  #+end_src

  Sample output:
  #+begin_example org
  : Enter three numbers: 3.5 9.6 10.2
  : Average of 3.5 and 9.6: 6.55
  : Average of 9.6 and 10.2: 9.9
  : Average of 3.5 and 10.2: 6.85
  #+end_example

  Code:
  #+begin_src C :cmdline < ./src/input
    // function definition
    double average(double a,double b) {
      return (a+b)/2.;
    }

    int main (void)
    {
      float x, y, z;
      printf("Enter three numbers: ");
      scanf("%f%f%f", &x, &y, &z);  // input
      printf("%g %g %g\n", x, y, z); // input check

      // print averages
      printf("Average of %g and %g: %g\n", x, y, average(x,y));
      printf("Average of %g and %g: %g\n", y, z, average(y,z));
      printf("Average of %g and %g: %g\n", x, z, average(x,z));

      return 0;
    }
  #+end_src

  #+RESULTS:
  
- Important: the definition of ~average~ needs to be put *before* ~main~ -
  otherwise the function needs to be declared.

* Let's practice!

- [[https://raw.githubusercontent.com/birkenkrahe/cc/piHome/org/15_functions_practice.org][The practice file is in GitHub:]] ~15_functions_practice.org~

- Remember to download the *raw* Org-mode file and open it in Emacs.

* References

- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]
