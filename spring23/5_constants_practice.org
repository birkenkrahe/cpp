#+TITLE: C FUNDAMENTALS PRACTICE - CONSTANTS
#+AUTHOR: [yourName] (pledged)
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :comments both
* READ README

  - This file is a practice file for C fundamentals.

  - When you're done with a section move the cursor on the section
    heading and type ~S-<right>~ (or SHIFT+<right-arrow>).

  - When you leave class without having completed the file, save a
    copy to GDrive as a backup and/or to work on it from home

  - When you've completed the file, upload it to Canvas
    
* TODO Identify yourself

  - replace ~[yourName]~ in the header of this file by your name
  - add ~(pledged)~ next to your name (as in "I obey the honor code")
  - Change the "TODO" in the headline to "DONE" (~S-<right>~)
  - save the file (~C-x C-s~). 

* TODO Constants

  1) Create a C code block named [[pgm:constants]] with three different
     constant definitions.

  2) Define the Arkansas sales tax rate (6.5%) as ~SALES_TAX_AR~ using
     the ~#define~ pre-processor macro.

  3) Define the Euler number using ~M_E~ in ~math.h~, and call it ~EULER~.

  4) Define the speed of light as ~SPEED_OF_LIGHT~ using ~const~.

  5) Print all three definitions to get the output:

     #+begin_example
      The Euler number is: e = 2.7182818285
      The AR sales tax is: 6.5%
      The speed of light is: 299792458 m/s
     #+end_example

  ----- PUT CODE BLOCK HERE -----

* TODO Standard math library

  - Open the file [[https://github.com/birkenkrahe/cc/blob/piHome/data/math.h][math.h]] (from GitHub) and search for the definition
    of ~M_PI~. What is the last non-zero digit? What's the precision?

  - Answer:

  - Can you also print it using ~math.h~? Write a quick 2-line program
    to print this value!
  
  
* TODO Reading input

  1) Copy the code block [[pgm:iscan]] below into a code block [[pgm:fscan]]

  2) Modify [[pgm:fscan]] so that it reads a floating-point variable ~x~
     instead of an integer variable ~i~.

  2) The /format specifier/ for ~float~ numbers is ~%f~.

  3) Create an input file named ~finput~ in ~$PWD~ and put the number
     ~3.141593~ into it.

  4) Run [[pgm:fscan]]. You should get the result:
     #+begin_example org
     : Enter a floating-point number!
     : You entered 3.141593
     #+end_example

  #+name: pgm:iscan
  #+begin_src C :cmdline < input
    int i;
    puts("Enter an integer!");
    scanf("%d", &i);
    printf("You entered %d\n", i);
  #+end_src

* TODO Naming identifiers

  Naming conventions dictate that you should use 
  - upper case letters for constants
  - lower case letters for variables and function names
  - separate names with underscore or insert capital letters
  - name according to function

  1) In the code block [[pgm:nomenEstOmen]], complete the code according to
     these rules.

  2) Run the code block with the additional header-argument ~:flags
     -Wall~ to see if you get any warnings.

  #+name: pgm:nomenEstOmen
  #+begin_src C :results silent
    // integer constant for the speed of light
    const int ... = 299792458;

    // floating-point constant for pi
    #define ... 3.141593f

    // integer variable for volume computations
    int ...

    // character variable for last names
    char ...

    // function that adds two integers i and j
    int ... (i,j) {
      return i + j;
    }

    // variable whose name contains "my", "next", and "birthday"
    int ...
  #+end_src

* TODO Fix the program

  The program statements in [[pgm:wrongNames]] contain multiple errors. Find
  them all and fix them if you can so that the program compiles and
  runs without errors - without simply commenting out erroneous code.

  #+name: pgm:wrongNames
  #+begin_src C :flags -Wall :results silent
    int void = 1;

    double 10_times;

    float _long = 10.45;

    char else;

    const int ui-1 = 1;

    int bottles100 = 100;
  #+end_src

* TODO Program layout
 
  The program [[pgm:layout1]] does not accommodate program layout
  conventions (though it will compile and run). Fix that.

  /Tip:/ sort the different parts of the program first. The comments
  might be helpful for that.

  The output looks liks this:
  #+begin_example
    I'm gonna print a number now.
    The number is 100
    100*(-1)=-100
  #+end_example

  #+name: pgm:layout1
  #+begin_src C
    const X=100.;puts("I'm gonna print a number now.");printf("The number is %d\n", X);

    // declarations

    // computation
    int i=-1;int y; y = X * i;printf( // print result of computation
			      "%d*(%d)=%d\n",X,i,y
			      ); // print constant
  #+end_src
  
* TODO Fix the program

  The program [[pgm:layout2]] violates layout standards and will not
  compile. Fix it and run it - the correct output is: ~1 is not 2~. 

  #+name: pgm:layout2
  #+begin_src C
    #define 
    ONE 1
    #define 
    TWO 2
    printf("%d is not %d\n", ONE, TWO);
  #+end_src

* Footnotes

[fn:1]With ~:results silent~ in the header, the Org-mode code block will
be executed, but the results will not be printed in the buffer, only
in the minibuffer. If there is no printout, the minibuffer shows ~""~
(empty).

[fn:2]The header argument ~:noweb~ enables referencing to other
code. Setting it to ~yes~ means that references are expanded when
evaluating, tangling, or exporting. You can check that by tangling the
source code and looking at the result ([[https://orgmode.org/manual/Noweb-Reference-Syntax.html][more info]]).
