#+title: C PSEUDOCODE - PRACTICE
#+AUTHOR: [yourName] (pledged)
#+startup: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :comments both
* READ README

- This file is a practice file for BPMN process models

- You'll learn:
  1) to create a BPMN process model from pseudocode
  2) to save a process model as image or XML file
  3) to display an image file inline in Emacs Org-mode
  4) to compress file into an archive file

- Time: approx. 30-60 min.

- When you're done with a section move the cursor on the section
  heading and type ~S-<right>~ (or SHIFT+<right-arrow>).

* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file by
  your name and save the file (~C-x C-s~).

* TODO Battle problem - learn to use bpmn.io

Objective: learn to create, debug and save a process model.

1) Open =bpmn.io= and "TRY" the free model editor.

2) Create a simple BPMN diagram based on the pseudocode below for the
   'battle' problem. The BPMN model should look like [[https://raw.githubusercontent.com/birkenkrahe/cpp/main/img/battle.svg][this figure]].

   Pseudocode:
   #+name: pgm:pseudobattle
   #+begin_example C
     if health is less than 100
       Drink health potion
     else
       Resume battle
     end if
   #+end_example

3) Save the model as a vector graphics file (~.svg~) and as a XML file
   (~.bpmn~). The SVG file can be viewed, the XML file can be loaded by
   a process model editor like =bpmn.io=.

4) Check that the files are where you think they are using one of
   these ways:
   - Open a Dired buffer in Emacs (~C-x d~ - refresh with ~g~) 
   - Open a Shell inside Emacs (~M-x shell~) and check with ~ls -l~
   - Open a Windoze CMD line terminal and check with ~DIR~

5) Add the SVG file as an *inline image* below: add metadata followed
   by a link to the file address.
   
   - Metadata: attribute + image width in pixels and image caption
     #+begin_example org
     #+ATTR_HTML: :width 500px
     #+CAPTION: [describe process model]
     #+end_example
   - File address: enclose the path to the file in double square
     brackets: ~[[path/to/file.svg]]~

* TODO Gold withdrawal problem 1

1) Create a /model/ based on the following pseudocode:
   #+name: ex:pseudogold1
   #+begin_example C
   if action == deposit
      Deposit gold into account
   else
      Withdraw gold from account
   end if
   #+end_example

2) Save the BPMN model as ~gold.bpmn~ on your PC.

3) Save the SVG file as ~gold.svg~ on your PC.

4) Add the SVG file as an *inline image* below: add metadata followed by
   a link to the file address.
   - Metadata: attribute + image width in pixels and image caption
     #+begin_example org
     #+ATTR_HTML: :width 500px
     #+CAPTION: BPMN model of pseudocode
     #+end_example
   - File address: enclose the path to the file in double square
     brackets: ~[[path/to/file.svg]]~

* TODO Gold withdrawal problem 2

Create a model based on the following pseudocode:

#+name: pseudogold2_solution1
#+begin_example C
if action == deposit
   Deposit gold into account
else
     if balance < amount requested
        Insufficient funds
     else
        Withdraw gold from account
     end if
end if
#+end_example

2) Save the BPMN model as ~gold2.bpmn~ on your PC.

3) Save the SVG file as ~gold2.svg~ on your PC.

4) Add the SVG file as an *inline image* below.

* TODO Gold withdrawal problem 3

What changes if you use the pseudocode below instead? Make the
changes.

#+name: ex:pseudogold3
#+begin_example C
  if action == deposit
     Deposit gold into account
  else
       if balance >= amount requested
          Withdraw gold from account
       else
          Insufficient funds
       end if
  end if
  #+end_example

2) Save the BPMN model as ~gold3.bpmn~ on your PC.

3) Save the SVG file as ~gold3.svg~ on your PC.

4) Add the SVG file as an *inline image* below.

* Submit your results to Canvas

- Submit a ZIP file including the Org-mode file and all SVG and XML
  files to Canvas.

- To create a ZIP archive in Windows, you can use the =tar= command or
  the =zip= command. We'll check in class which ones exist and run a
  drill.

- Whatever the command to compress or zip is, the syntax is:
  #+begin_example
    [compress-command] [zip-file] [list of files]
  #+end_example

  For example, the following command will compress the file ~bpmn.org~
  and the files ~bpmn.svg~ and ~bpmn.bpmn~ and create an archive file
  ~bpmn.zip:~
  #+begin_example
    tar -cf bpmn.zip bpmn.org bpmn.svg bpmn.bpmn
  #+end_example

- In Linux (or on the Emacs eshell), the =file= command will tell you
  the type of the file. So ~file bpmn.zip~ should return:
  #+begin_example
  bpmn.zip: POSIX tar archive (GNU)
  #+end_example

  
