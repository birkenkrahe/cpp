#+title: CONDITIONAL IF ELSE STATEMENTS - PRACTICE
#+AUTHOR: [yourName] (pledged)
#+startup: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :comments both
* READ README

- This file is a practice file for ~if...else~ statements

- Time: approx. 30 min.

- When you're done with a section move the cursor on the section
  heading and type ~S-<right>~ (or SHIFT+<right-arrow>).

* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file by
  your name and save the file (~C-x C-s~).

* TODO Nested if statement with numeric input

*Objective: modify the program [[pgm:battle]] to take numeric input.*

1) Modify [[pgm:battle]] below to accept input in the form of an integer
   variable ~response~:
   - When ~response~ has the value ~1~, print its value and ~"Drink health
     potion"~.
   - When ~response~ has the value ~2~, print its value and ~Resume battle~.
   - Parallelize: use only *one* ~if...else if~ statement.
   - The output should look like this (only one of them):
     #+begin_example
     : 1 => Drinking health potion!
     : 2 => Resuming battle!
     #+end_example

   Battle code:
   #+name: pgm:battle
   #+begin_src C
     int health = 99;

     if (health <= 100) {
       // drink health potion
       printf("Drinking health potion!\n");
      }
      else {
        // resume battle
        printf("Resuming battle!\n");
      }
   #+end_src
     
2) To create an input file, complete the missing parts in the code
   block [[inputfile]]:

   #+name: inputfile
   #+begin_src bash
     echo "..." ... battle_input
     cat battle_input
   #+end_src

* TODO Nested if statement with character input

*Objective: modify the program to take character input*.

1) Modify your last program to accept input in the form of a character
   variable ~c_response~
   - When ~c_response~ has the value ~y~, print its value and ~"Drink health
     potion"~.
   - When ~c_response~ has the value ~n~, print its value and ~Resume battle~.
   - Use the conversion specifier ~%c~ to convert character input
   - The output should look like this (only one of them):
     #+begin_example
     : 'y' => Drinking health potion!
     : 'n' => Resuming battle!
     #+end_example

2) To create an input file, complete the missing parts in the code
   block [[inputfile]]:

   #+name: inputfile_char
   #+begin_src bash
     echo "..." ... battle_input_char
     cat battle_input_char
   #+end_src
