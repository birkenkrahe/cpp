#+TITLE: Agenda - Introduction to programming in C++
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2023
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:C :main yes :includes <stdio.h> :results output :noweb yes
#+property: header-args:R :results output :noweb yes :session *R* :exports both
* Week 1 - Course overview & introduction
#+attr_html: :width 400px
[[../img/cover.jpg]]

1) [X] Entry *survey* - [[https://docs.google.com/forms/d/1yz2EtuSin3r54zMG1d_JCnnVAGb0XI8cP-Yvr7FmZbo/edit#responses][review of your responses]]
2) [X] Course *overview* - assignments, grading, topics, platforms
3) [X] The C programming *toolchain*: course infrastructure
4) [X] *Practice:* the C programming toolchain

** Review topics/questions (Friday 13-Jan)
#+attr_latex: :width 400px
#+caption: Illustration of ignorance and ignorance of your own ignorance
[[../img/dunningkruger.png]]

Test yourself![fn:1]

Graph: hype cycle (like [[https://www.gartner.com/en/research/methodologies/gartner-hype-cycle][Gartner graph of emerging technologies]]).

- Why is computing infrastructure important?
- What is meta data?
- What is a compiler?

** Why is computing infrastructure important?
#+attr_latex: :width 400px
#+caption: Layers between you and a document on your computer
[[../img/0_infrastructure.jpg]]

- *Scalability:* when you want to go from 10 customers to 1,000,000

- *Reliability:* systems must be available and performant when needed

- *Security:* protect against unauthorized access and cyberthreats

- *Adaptability:* businesses must adapt quickly to stay competitive

- *Changeability:* IT changes faster than most other technologies

** What is meta data?
#+attr_latex: :width 400px
#+caption: Org-mode file with visible meta data
[[../img/0_meta.png]]
#+attr_latex: :width 400px
#+caption: Org-mode file with hidden meta data
[[../img/0_meta1.png]]

*Meta data is data that describes other data.* It provides information
about the characteristics of other data, such as its content, format,
and structure. Meta data can be used to describe many different types
of data, including files, images, videos, documents, and databases.

** What is a compiler (e.g. GCC)?
#+attr_latex: :width 400px
#+caption: Compiler (source: High performance R computing, Packt)
[[../img/compiler.png]]

- A compiler is a type of program that takes *source code* written in a
  high-level programming language and converts it into *machine code*.

- Machine code can be executed directly by a computer's central
  processing unit (CPU).

- The machine code produced by a compiler is specific to the
  architecture of the computer it is being run on.

* Week 2 - Programming environment
#+attr_html: :width 400px
[[../img/0_gnuemacs.png]]

Review:
- [ ] Week 1
- [ ] Glossary terms

Lecture
- [ ] Demo: REPL (replit.com)
- [ ] Lecture: Introduction to C

Practice:
- [ ] Practice: first literate C program (submit Jan 20)
- [ ] Practice/assignment: Emacs tutorial (submit Jan 23)

Test:
- [ ] Test 1 on Monday, Jan-23 (on everything we've done so far)

** Review week 1
#+attr_html: :width 400px
#+caption: Literate programming with CWEB
[[../img/cweb.png]]

- [X] What is the command line interface? ("The black thing")
- [X] What is literate programming?
- [X] What is syntax highlighting?
- [X] What is Emacs?

** What is the command line interface?
#+attr_html: :width 400px
#+caption: Command line interface (WSL on Windows with Ubuntu 22.04 LTS)
[[../img/cli.png]]

#+begin_quote ChatGPT
"The command line interface (CLI) is a type of user interface that
allows users to interact with a computer or device by typing commands,
as opposed to using a graphical user interface (GUI) with a mouse or
touchpad. These commands are entered into a terminal or command
prompt, and the computer or device responds by performing the
requested action or displaying the requested information. CLI is
commonly used for tasks such as managing files, running programs, and
configuring system settings." (ChatGPT)
#+end_quote

** What is literate programming?
#+attr_html: :width 400px
#+caption: Literate programming with C and Emacs Org-mode
[[../img/0_litprog1.png]]

- Documentation + code + output in one file
- In the figure, the literate program (~foo.org~) is either tangled into
  source code (~foo.c~) that can be compiled and run, or it is woven
  into a HTML file that you can view in a browser.

#+begin_quote
"Literate programming is a programming paradigm in which a program's
source code is written as an explanatory narrative, rather than just a
sequence of commands. It combines human-readable documentation and
source code into a single document, making the code more easily
understandable and maintainable. The idea behind literate programming
is that code should be written for people to read and understand, not
just for machines to execute. Programs written in a literate
programming style are often more readable and self-documenting, which
can make them easier to understand and modify.

Donald Knuth first coined the term "literate programming" in the early
1980s, and he developed a tool called WEB to support this style of
programming. Nowadays there are other tools like noweb, CWEB, and
org-babel-tangle that can be used to create literate programming
documents." (ChatGPT)
#+end_quote

** What is syntax highlighting?
#+attr_html: :width 400px
#+caption: Raw file without syntax highlighting
[[../img/0_raw.png]]
#+attr_html: :width 400px
#+caption: Syntax highlighting on GitHub (Emacs-Lisp file)
[[../img/0_syntax.png]]

** What is Emacs?
#+attr_latex: :width 400px
#+caption: GNU Emacs screen and properties
[[../img/0_gnuemacs1.png]]

* Week 3 - Introducing C
#+attr_html: :width 400px
[[../img/1_ccpp.png]]

** [[https://lyon.instructure.com/courses/1014/assignments/6701/edit?quiz_lti][Test 1]] (Online, Monday 23 January 3-3.15 pm)
** [[https://lyon.instructure.com/courses/1014/assignments/6463][Canvas file upload]] (~first.org~)
** [[https://lyon.instructure.com/courses/1014/discussion_topics/2070][Week 2 Session summary and test preparation]]
** Introduction to C
** Condition for repeating tests
#+attr_latex: :width 400px
#+caption: Late or missed the test? Talk to me!
[[../img/late.jpg]]

- If you inform me beforehand that you cannot attend an announced
  test, we can make arrangements for you to take the test outside of
  class.

** Preparing for a test (2.5% each)
#+attr_latex: :width 400px
#+caption: Medieval food preparation
[[../img/preptest.jpg]]

*How do you prepare for a test?*[fn:2]
* Week 4 - Installation: GCC, Emacs
#+attr_latex: :width 400px
[[../img/notre_dame_de_paris.jpg]]

** DONE Emacs & GCC Home Installations

- There are [[https://github.com/birkenkrahe/org/blob/master/emacs/install.pdf][very short installation instructions on GitHub]] (PDF)

- Today, I will showcase the installations:
  1) GCC as MinGW on Windows
  2) Clang on MacOS
  3) GNU Emacs on Windows and MacOS
  4) Testing the installation

- The whole process usually won't take more than 15 minutes but I'm
  open to your questions and issues during installation (share via
  Zoom).

- There is a much longer lecture with many bells and whistles
  available as [[https://github.com/birkenkrahe/cc/blob/piHome/org/2_install.org][HTML]] or [[https://github.com/birkenkrahe/cc/blob/piHome/pdf/2_install.pdf][PDF]] (most of which you won't hear from me but
  it might still be nice to browse through it).

** DONE Test 2 preview (more next week)

*This is a test for the upcoming online test.*

1) [ ] What's the architecture of a computer?
   #+begin_quote
   1) CPU (e.g. ~x86-64~, ~ARM~)
   2) Volatile memory (RAM, e.g. ~4GB RAM~)
   3) Non-volatile memory (NVM, e.g. ~500GB SSD~)
   #+end_quote
2) [ ] How are programs written and processed?
   #+begin_quote
   1. *WRITE* source code in an editor (NVM = harddisk)
   2. *COMPILE* source code to machine code (RAM = memory)
   3. *RUN* program (CPU = Central Processing Unit)
   4. *DISPLAY* results (RAM = Memory)
   5. *SAVE* result (NVM = harddisk)
   #+end_quote
3) [ ] How do you name an executable file when compiling it with ~gcc~?
   #+begin_quote sh
   $ gcc file.c -o hello # to name the executable file "hello"
   #+end_quote

** TODO Emacs tutorial (start in class, finish @home)
#+attr_latex: :width 400px
#+caption: GNU gtypist menu (GNU typing tutor)
[[../img/gtypist.png]]

- Emacs tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.md#readme][markdown]], [[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.org][org-mode]], [[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.pdf][pdf]])
- [[https://youtu.be/RdRbm1wG1Gc][Video emacstutor Part 1]]
- [[https://youtu.be/VhsEMIjAaEk][Video emacstutor Part 2]]
- [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][Emacs + Org-mode tutorial]]
- [[https://linuxreviews.org/GNU_typing_tutor][GNU typing tutor (Linux or WSL)]]

1) Downloaded a text file from the web & find the file location (~cd~)
2) Opened a no window Emacs on that file (~emacs -nw --file~)
3) Learnt how to insert files into a buffer (~C-x i~)
4) Learnt how to write a buffer to file (~C-x C-w~)
5) Understood editing buffer, the modeline and the minibuffer
6) Learnt how to auto-fill lines (~M-q~ or ~M-x auto-fill-mode~)
7) Learnt how to add column mode (~M-x~ or ~M-x column-number-mode~)
8) Learnt how to move forward, backward in buffer (~C-f~, ~C-b~, ~M-f~, ~M-b~)
9) Learnt how to save a buffer to file (~C-x C-s~)

* Week 5 - Emacs tutor & Hello C, again
#+attr_latex: :width 400px
#+caption: Sandro Botticelli (1470)
[[../img/botticelli.jpg]]

** DONE Test 2 preview II

1) [X] Where are Emacs error messages shown?
   - Emacs minibuffer/echo area & ~*Messages* system buffer
2) [X] What does the Emacs modeline show?
   - Line number (column number optional) e.g. ~L1~
   - Type or mode of buffer (e.g. ~Text~
   - Name of buffer e.g. ~*Messages*~
   - Upon save, file name (same place)
   - If the file has been changed (~**~) or not (~--~)
   - How much of the file you can see / where you are
3) [X] How can you save an Emacs buffer? (how)
   - ~C-x C-s~
   - ~M-x save-buffer~
4) [X] What do these abbreviations mean: ~<TAB>~ ~<RET>~ ~C-x~ ~M-q~
   - ~<TAB>~ = TAB key
   - ~<RET>~ = RETURN or ENTER key
   - ~C-x~ = CTRL + x (STRG + x on a German keyboard)
   - ~M-q~ = ALT + q (Mac: Options + q)

** DONE Continue with the Emacs tutorial
#+attr_latex: :width 400px
[[../img/recover.png]]

- File recovery? Run ~recover-file~.

- Let's get on with the tutorial

- Finish it at home by Wednesday and upload it

** DONE Hello World all over again
** TODO Test 2 review III

1) [X] Emacs? Org-mode? C-x C-s? Code block? eshell? gcc? -Wall? PATH?
   #+begin_quote
   - Emacs: a text editor, and a literate pgm environment
   - Org-mode: an Emacs package to customize Emacs' behavior
   - ~C-x C-s~: a keybinding to save an Emacs buffer to file
   - A code block: source code in an Emacs Org-mode buffer, between
     the ~#+begin_src~ and ~#+end_src~ meta data
   - The ~eshell~: a (Linux-type) command line that runs in Emacs
   - ~gcc~: the GNU C compiler
   - ~-Wall~: a ~gcc~ option to generate all possible warnings
   - The ~PATH~: the locations that the computer searches for
     executable programs (like ~emacs~ or ~gcc~)
   #+end_quote
2) [X] How do you navigate in Emacs:
   - to the top/bottom of a buffer? M-<  M->
   - to the start or end of a line? C-a C-e
   - to the next or previous page? C-v M-v
   - to the next or previous line? C-n C-p
   - how do you exit Emacs? C-x C-c
3) [X] What kind of file is ~.emacs~?
   #+begin_quote
   A (hidden) configuration file to customize Emacs, (e.g. fonts,
   themes, functions and packages loaded, etc. - the function ~M-x
   custom-themes~ e.g. allows you to select a theme that is then
   stored in ~.emacs~ for the next time you open Emacs.
   #+end_quote
4) [X] What does "tangling" of an Org-mode file mean?
   #+begin_quote
   Extracting the source code, e.g. a ~.c~ file from a ~C~ code block
   #+end_quote
5) [X] How does a minimal C program look like?
   #+begin_quote
   - You only need this: ~main~ function (delimited by ~{...}~)
     Optional:
   - Header (e.g. ~#include <stdio.h>~)
   - Code inside ~main~ function (e.g. ~printf~)
   #+end_quote
6) [X] Can you explain this line of code?
   #+begin_example C
     printf("Hello again\n");
   #+end_example
   #+begin_quote
   - ~printf~ is a function to print its arguments (formatted)
   - ~()~ is the boundary for the argument
   - ~"Hello again\n"~ is a string (sequence of characters)
   - ~\n~ is an escape character to move to a new line
   #+end_quote
7) [X] What do ~#~, ~{~ and ~/*~ in C source code mean?
   #+begin_quote
   - ~#~ tells the computer to pre-process something, e.g. ~#include~
   - ~{..}~ code delimiters, e.g. ~main() {...}~
   - ~/*...*/~ comment sign, e.g. any information not for the computer
   #+end_quote
8) [X] What is computer programming used for?
   #+attr_latex: :width 400px
   [[../img/programming.png]]
   #+begin_quote
   Things that programming cannot be used for (so far):
   1) replace humans (it can only replace some of us)
   2) improve humans (it can be used to support only)
   3) talk like humans (it cannot really talk like us)
   #+end_quote
9) [X] Do you need the ~PATH~ when you install software? Why (not)?

** TODO Online test 2: intro to C, hello Emacs (Canvas)

* Week 6 - C basics: variables
#+attr_latex: :width 400px
#+caption: Elephant (Source: Wikipedia)
[[../img/elephant.png]]

** Review - variables:

1. [X] Declaring variables to the PC means "give me memory"
2. [X] To declare floating point numbers, add ~f~: ~1.5f~
3. [X] Example command: ~int x;~ declares ~x~ to be ~integer~
4. [X] Assign a value to the declared variable: ~x=8;~
5. [X] Printing with the ~printf~ function
6. [X] ~printf("hello world");~ to print a string
7. [X] To print ~x=8;~ use ~printf("%d\n",x)~
8. [X] To print floating point numbers: ~%f~

#+begin_src C :main yes :includes <stdio.h> :results output
  int x=8; float y=3.14;
  printf("This is my number %d\n",x);
  printf("This is my other number %f\n",y);
#+end_src

** Practice ~hello, world~ (file in GitHub)
** Variables (lecture + practice)
** New test coming soon (deadline 24 Feb)
** Don't forget to upload completed practice files

* Week 7 - C basics: constants and I/O
#+attr_latex: :400px
[[../img/ccSP23test1_2.png]]

** REVIEW: variables PRACTICE

- [ ] How would you initialize a floating-point variable foo = 5/9
  #+begin_src C
    float foo = 5.0f/9.0f;
    float bar = 5/9;
    printf("%f\n",foo);
    printf("%f\n",bar);
  #+end_src
- [ ] How can I include a code block named [[baz]] in another code block?
  #+name: baz
  #+begin_src C
    int baz = 5;
  #+end_src

  Include [[pgm]] in the next code block between << and >>:
  #+begin_src C
    <<baz>>
    printf("baz is %d\n",baz);
  #+end_src

  #+RESULTS:
  : baz is 5

** Assignment overview ([[https://lyon.instructure.com/courses/1014][Canvas]])
#+attr_latex: :width 400px
[[../img/assignments.png]]

1) Class practice: start/finish/upload in class
2) Multiple-choice tests: full points on time / partial credit if late (60%)
3) Practice/programming assignments: start in class/finish at home
4) Bonus assignments: complete programs at home

** WATCH [[https://youtu.be/U3aXWizDbQ4][C in 100 seconds]] - review and preview
#+attr_latex: :width 400px
[[../img/spheres.png]]

- Write down any term you know already!
- Write down any term you haven't heard yet!

#+begin_notes

#+end_notes

** Computing in light-years & learn R!
#+attr_latex: :width 400px
[[../img/empirestatebuilding.jpg]]

- Save ~convertR.org~ from GitHub in your ~Downloads~ directory

- Open it in Emacs: ~cd Downloads~ => ~emacs --file convertR.org~

*** Constants (in scientific numeric notation):
#+name: constants
#+begin_src R
  299792458 -> SPEED_OF_LIGHT # in meter/second
  paste("Speed of light [m/s] =",format(SPEED_OF_LIGHT,sci=T), "[m/s]")
  31536000 -> YEAR_IN_SECONDS # in seconds
  paste("Year in seconds =",format(YEAR_IN_SECONDS, sci=T),"[s]")
#+end_src

- Recall: speed [m/s] * time [s] = distance*[m]

*** How far does light travel in one year?
#+name: lightyear
#+begin_src R
  SPEED_OF_LIGHT * YEAR_IN_SECONDS -> ly
  paste("1 light-year [LY] =",format(ly,sci=T), "[m]")
#+end_src

- Conversion: x [m] = y * ly [m] => y = x/ly

*** How high is the Empire State Building in light-years?

#+name: conversion
#+begin_src R
  380 -> x # height in [m] is given, y = x/ly is sought
  paste(x,"[m] =",x/ly,"light-years.")
#+end_src

- Now, the complete script can be tangled as ~convert.R~ and run on a
  shell like a C program with ~Rscript~ instead of the ~gcc~ compiler.

*** The complete R script
- Tangle the code below (~C-c C-v t~) to a file ~convert.R~
- Open a shell (~M-x eshell~) and run ~Rscript convert.R~
#+begin_src R :tangle convert.R
  <<constants>>
  <<lightyear>>
  <<conversion>>
#+end_src
#+end_src
** Constants, input, naming and program layout
#+attr_latex: :width 400px
[[../img/5_rock.jpg]]

- Lecture + codealong file
- Practice
- Test

** AWESOME! WHAT YOU ALREADY LEARNT IN ONLY 6 WEEKS!

- Copied from the glossary sections of the first 5 lectures (handout).
- Not on the list are more infrastructure and development details.
- Not printable are the skills that you did not only hear about but
  practiced at limited personal cost!

| TERM                    | MEANING                                             |
|-------------------------+-----------------------------------------------------|
| Meta data               | Data about data (e.g. layout instructions)          |
| Infrastructure          | Computing roadworks: hardware and software          |
| Editor                  | Program to write programs in                        |
| Compiler                | Program to turn source into machine code            |
| ~gcc~                     | The GNU C compiler                                  |
| Source code             | Code for humans to read and edit (~.c~)               |
| Machine code            | Code for machines to execute (~.exe~)                 |
| [[https://en.wikipedia.org/wiki/Git][Git]]                     | Software version control system (2005)              |
| [[https://www.gnu.org/software/emacs/][Emacs]]                   | Extensible editor written in Lisp (1985)            |
| FOSS                    | Free and Open Source Software                       |
| [[https://en.wikipedia.org/wiki/Linux][Linux]]                   | FOSS operating system (1991)                        |
| Windows, MacOS          | Commercial OS (Microsoft, Apple)                    |
| Android                 | Linux for smartphones (Google)                      |
| iOS                     | MacOS for Apple smartphones                         |
| Command line            | Terminal, shell program to talk to the OS           |
| Prompt                  | Location on your computer, e.g. ~C:\User\~            |
| Raw file                | No control characters for syntax highlighting       |
| Syntax highlighting     | Making programming language visible                 |
| ~DIR~                     | Windows command to list files                       |
| ~cd~                      | Command to change directory                         |
| Literate pgm            | Doc + code + output for humans and machines         |
| Org-mode                | Plugin for Emacs to edit Org files (~.org~)           |
| Dunning-Kruger effect   | Illustrating ignorance of your own ignorance        |
|-------------------------+-----------------------------------------------------|
| DEC PDP-11              | 1970s mainframe computer                            |
| UNIX                    | Operating system (ca. 1969)                         |
| ANSI                    | American National Standard Institute                |
| Assembler               | Machine code (hard to write/read)                   |
| Algorithm               | Fixed process or set of rules                       |
| Linux                   | Operating system (ca. 1991)                         |
| C                       | Imperative, procedural programming language         |
| C++                     | Object-oriented (OO) superset of C                  |
| Clang                   | C/C++ compiler                                      |
| gcc                     | GNU compiler bundle (incl. C/C++)                   |
| Java,C#                 | OO programming language                             |
| Perl                    | Scripting language                                  |
| Git                     | Software version control system                     |
| GitHub                  | Developer's platform (owned by Microsoft)           |
| Library                 | Bundle of useful functions and routines             |
| Portability             | Ability of software to run on different hardwares   |
| Efficiency              | Software speed of execution and memory requirements |
| Permissiveness          | Degree to which a language tolerates ambiguities    |
| Object-orientation      | Ability to define abstractions                      |
| System programming      | Programming close to the machine                    |
| Application programming | Programming close to the user                       |
|-------------------------+-----------------------------------------------------|

| TERM                    | MEANING                                                   |
|-------------------------+-----------------------------------------------------------|
| Linker                  | translates object code to machine code                    |
| Syntax                  | language rules                                            |
| Debugger                | checks syntax                                             |
| Directive               | starts with ~#~, one line only, no delimiter                |
| Preprocessor            | processes directives                                      |
| Statement               | command to be executed, e.g. ~return~                       |
| Delimiter               | ends a statement (in C: semicolon - ~;~)                    |
| Function                | a rule to compute something with arguments                |
| String                  | Sequence of /character/ values like ~hello~                   |
| String literal          | Unchangeable, like the numbe ~8~ or the string ~hello~        |
| Constant                | Set value that is not changed                             |
| Variable                | A named memory placeholder for a value, e.g. ~int i~        |
| Data type               | A memory storage instruction like ~int~ for integer         |
| Comment                 | Region of code that is not executed                       |
| Format specifier        | Formatting symbol like ~%d%~ or ~%f%~                         |
| Data type declaration   | Combination of type and variable name - e.g. ~int height;~  |
| ~int~                     | C type for integer numbers, e.g. 2                        |
| ~float~                   | C type for floating point numbers, e.g. 3.14              |
| ~char~                    | C type for characters, like "joey"                        |
| Formatting              | Tells the computer how to print, e.g. ~%d~ for ~int~ types    |
| ~%d~                      | Format for integers                                       |
| ~%f~ and ~%.pf~             | Format for floating point numbers                         |
|                         | (with ~p~ digits after the point)                           |
| ~#define~                 | Define a constant with the preprocessor,                  |
|                         | e.g. ~#define PI 3.14~                                      |
| ~math.h~                  | Math library, contains mathematical constants & functions |
| ~stdio.h~                 | Input/Output library, enables ~printf~ and ~scanf~            |
| ~const~                   | Constant identifier, e.g. ~const double PI = 3.14;~         |
|-------------------------+-----------------------------------------------------------|

* Week 8 - C basics: naming/program layout
#+attr_latex: :width 400px
[[../img/midterm.png]]

- The great /mid-term grade inflation extrapolation/: extra points for
  codealong and practice files! Points for breathing/staying alive!

- Alas, generosity could not save everyone - what to do?
  1) Drill the quizzes until you faint
  2) Turn assignments in when they are ready and requested
  3) Look at the GitHub stuff before/after class

- *Recap (Wed):* constants are important because? In C, there are 3 ways
  to define constants: with ~#define~ and with ~#include~ and with ~const~

- *Recap (Fri)*: the ~scanf~ function takes (formatted) input from the
  command line (or from an input file), e.g. ~scanf("%d", &i);~

- Note the ~&~ before the variable ~i~: that's a memory "pointer" - it
  tells the computer to put your input in a specific place.

- The ~puts~ function can only print one string (including a new line)
** Test 3 results - a mixed affair
#+attr_latex: :width 400px
[[../img/ccSP23test1_2_3.png]]

- Median is moving up (good), average is stable (ok)
- Maximum is moving up (good), range is wide (not good)
- If you got < 10 points (75%) you need to keep at it

** You're lucky that this is only C
#+attr_latex: :width 400px
[[../img/java.png]]

Image: Java OOP program (Sedgewick/Wayne, Algorithms)

** Bonus program 2 - Height in light-years "reloaded"
#+attr_latex: :width 400px
#+caption: guardian angel
[[../img/guardianangel.jpg]]

- [[https://lyon.instructure.com/courses/1014/assignments/8879][Download the raw Org-mode file from GitHub and open it in Emacs]]
- Alter the last bonus program ([[https://github.com/birkenkrahe/cc/blob/piHome/org/bonus_pgm_1.org#solution][solution here]]) to accept height as
  input
- Create an ~input~ file and put the input height (in meters) in there
- Run the code and produce the height in light-years as output

Tip: to do this inside Emacs Org-mode, you need to add the header
argument ~:cmdline < input~, and the input should be in the file ~input~.

** Home assignment: constants/naming/layout
#+attr_latex: :width 400px
#+caption: Library of Congress - Sports Illustrated, Zermatt story, July 1954
[[../img/home.jpg]]

- Introduction to the practice exercises (start in class)
- Use the (raw) practice file [[https://raw.githubusercontent.com/birkenkrahe/cc/piHome/org/5_constants_practice.org][5_constants_practice.org]] on GitHub
- Follow the instructions and complete the tasks on your own
- Submit Org-mode file no later than the deadline for full points
- Re-submit as many times as you like
- Solutions to in-class practice can be found as PDF files in GitHub

* Week 9 - C input/output - ~printf~
#+attr_latex: :width 400px
[[../img/scanner.jpg]]

- Complete TEST 4 in Canvas by Friday, March 10!
- Practice constants, naming, layout (~5_constants_practice.org~)
- Next topic: input and output - ~printf~ and ~scanf~
- Practice ~printf~ (~6_printf_practice.org~): on GitHub
- Practice ~scanf~ (~7_scanf_practice.org~): on GitHub
- Bonus exercise "height to light-years reloaded" open for completion

** Floating-point arithmetic enigma
#+attr_latex: :width 400px
#+caption: Photo by Joe Calata on Unsplash
[[../img/floating.jpg]]

- [[https://github.com/birkenkrahe/cc/issues/8][Floating point arithmetic (Goldberg, 1991)]] and [[https://lemire.me/blog/2020/06/26/gcc-not-nearest/][Lemire, 2020]]

- The closest possible representation to the long number is the
  printed number (due to rounding errors)- the ~double~ data type is
  used.
  #+begin_src C :tangle ../src/prec.c
    printf("%.18f\n",3.141592653589793116);
    printf("%.20f\n",3.14159265358979323846);
  #+end_src

  #+RESULTS:
  : 3.141592653589793116
  : 3.14159265358979311600

- The ~double~ data type has a fixed number of bits to represent a
  value: it uses 64 bits to represent the value, with 52 bits used for
  the mantissa, and 11 bits used for the exponent.

- Some GCC flags that ChatGPT suggested:
  #+begin_example
   -flong-double-128
   -fexcess-precision-standard
   -frounding-math
   -mpc64
  #+end_example

* Week 10 - Flying with ~scanf~ - operators
#+attr_latex: :width 400px
[[../img/ccTestDensity.png]] [[../img/ccTestBoxplot.png]]

[[https://github.com/birkenkrahe/grades/blob/main/spring23.org#introduction-to-programming-csc-100][R code: see GitHub.]]

- Test 4: the good, the bad and the ugly:

  1) The test average is still a passing grade and the upper quartile
     is > 80%! (a quarter of the class is B or better)

  2) The test average went down by 6.8% and the lower quartile is 26%
     (a quarter of the class is only half way to passing)

  3) Three students didn't even try, and the lower quartile is 40%

** Practice assignments - check your submissions!
#+attr_latex: :width 400px
#+caption: Photo by Caleb Woods on Unsplash
[[../img/guilt.jpg]]

- This course used to only have home programming assignments
- Now we do a lot of the work in the class (easier for you)
- Don't let yourself (or me) down by submitting shoddy work

** Assignment: phone number conversion
#+attr_latex: :width 400px
#+caption: Photo by Quino Al on Unsplash
[[../img/phone.jpg]]

*Submit your solution no later than Monday, 27-March, 3 pm!*

1) Write a program that prompts the user to enter a telephone number
   in the form ~(xxx) xxx-xxxx~, and then displays the number in the
   form ~xxx.xxx.xxxx~.

2) Example input/output of the first program, ~phone1.c~:
   #+begin_example
   Enter phone number [(xxx) xxx-xxxx]: (870) 456-7890
   You entered: 870.456.7890
   #+end_example

3) Write another program that asks for the input format in the form
   ~xxx\xxx\xxxx~, and then displays the number in the form
   ~(xxx)xxx-xxx~.

4) Example input/output of the second program, ~phone2.c~:
   #+begin_example
   Enter phone number [xxx\xxx\xxxx]: 870\456\7890
   You entered: (870) 456-7890
   #+end_example

5) Submit one Emacs Org-mode file ~phone.org~ with both programs in
   it as code blocks that can be *tangled* as ~phone1.c~ and
   ~phone2.c~, resp.

6) The header information of your Org-mode file should look like this:
   #+begin_example
     #+TITLE: Phone number conversion
     #+AUTHOR: [your name]
     #+HONOR: pledged
     #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :tangle yes
   #+end_example

7) Tip: some characters, like ~\~ are protected because they are part
   of the file ~PATH~. If you want to use them, you have to "escape"
   them with an extra ~\~, like the newline character ~\n~. So to
   print (or to scan) the character ~\~, you use ~\\~.

** The ~scanf~ function - lecture & practice
#+attr_latex: :width 400px
#+caption: Scanning computer
[[../img/scanning.jpg]]

- How to format ~scanf~ for keyboard input
- How the computer scans anything
- Difficulties when using ~scanf~

** Mildly therapeutic reading for spring break
#+attr_latex: :width 400px
#+caption: Photo by William Felipe on Unsplash
[[../img/compthinking.jpg]]

#+begin_quote
"One can major in computer science and do anything.  One can major
in English or mathematics and go on to a multitude of different
careers. Ditto computer science. One can major in computer science
and go on to a career in medicine, law, business, politics, any type
of science or engineering, and even the arts."
#+end_quote

*Don't be naive: of course this course is also a recruiting event for
computer/data science. It's the academic game of musical chairs.*

- Letter luxury: you'll get a printed copy of this article from me.

- Computational Thinking by Jeannette M. Wing (Columbia U.) - In: CACM
  49(3) 2006: 33-35. URL: [[https://www.cs.cmu.edu/~15110-s13/Wing06-ct.pdf][cs.cmu.edu]].

* Week 11 - Operators
#+attr_latex: :width 400px
#+caption: Stan Giddings, maintenance worker ascending Sydney Harbour Bridge, 18 September 1945, by Alec Iverson (Flickr.com)
[[../img/bridge.jpg]]

- [X] Discussion: "Computational thinking" - what are your thoughts?
- [X] Preview test 5: input/output/operators
- [X] Complete test no later than March 31 (partial credit until Apr7)
- [X] Review and practice: logical operators
- [ ] *Bonus points* for experience report from the job fair April 4
  ([[https://lyon.instructure.com/courses/1014/assignments/9614][see Canvas]])

** Computational thinking? Who cares?
#+attr_latex: :width 400px
[[../img/rose.png]]

*Find* 1-2 people to *discuss* this article and *extract*:
1) One central *hypothesis* (we'll collect a few contenders)
2) Any *questions* you have (content, terminology, background)
3) Your own *view* of the hypothesis
4) Any other *views* you hold on the subject.

#+begin_quote
How to "read closely"
1) *Print* the article and *annotate* it manually
2) *Ask* yourself WHO wrote this article and for WHOM?
3) *Verify* important information.
4) *Extract* hypotheses like: "Computational thinking is a fundamental
   skill for everyone, not just for computer scientists."
5) *Eliminate* hyperbole, like: "Quantum computing is changing the way
   physicists think."
6) *Summarize* conclusions.
#+end_quote
#+begin_quote
Author information: [[https://www.cs.columbia.edu/~wing/very-short-bio.txt][Jeannette M. Wing bio sketch]]

"Her 2006 seminal essay, titled "Computational Thinking," is credited
with helping to establish the centrality of computer science to
problem-solving in fields where previously it had not been embraced."
#+end_quote
#+begin_quote
In the article, "Computational thinking" is [applied in] 33 areas:
| Approximation  | Randomization | Prediction      |
| Reduction      | Embedding     | Transformation  |
| Simulation     | Recursion     | Parallelization |
| Type checking  | Aliasing      | Addressing      |
| Aesthetic      | Abstraction   | Decomposition   |
| Modeling       | Heuristics    | Planning        |
| Trade-offs     | Backtracking  | Prefetching     |
| Caching        | Algorithm     | Optimization    |
| Redundancy     | Turing test   | Searching       |
| Garbagecollect | File trees    | Statistics      |
| Biology        | Economics     | Ubiquitous      |

*Update:* The [recursive] [[https://www.nature.com/articles/d41586-023-00868-7][driving test for driverless cars]] - "A virtual
world filled with bad AI drivers can be used to test autonomous
vehicles." (Bundell, 2023)
#+end_quote

** Bonus points for job fair experience report!
#+attr_latex: :width 400px
[[../img/fair_flickr_color.jpg]]

- Write long paragraph about your job fair experience for 10 points.
- Great opportunity to network, mix and mingle, and show off.
- Bring 1 page resume, a few questions, a story, and dress up.
- Must go: graduating seniors. Should go: everyone else.
- Motivate each other by going as a pair, a group, a team.
- Post your experience report in Canvas.

** Test 5 preview
#+attr_latex: :width 400px
#+caption: Photo: Chris Brady serves a pizza (US Dept Agriculture), Aug-5 2016
[[../img/review.jpg]]

Don't sweat over these now - ask yourself if you know an answer or
not, then listen to the repetition of my explanation and answer.

1) [X] What are some common mistakes when using ~printf~ and ~scanf~?
   #+begin_notes
   ~printf~
   - Putting an ~&~ in front of an output variable in ~printf~
   - Mismatching format specifier and *output* variable type
   - Forgetting that it's ~printf~ and not ~print~

   ~scanf~
   - Forgetting the ~&~ in front of an input variable
   - Putting a newline character ~\n~ at the end of the format string
   - Mismatching format specifier and *input* variable type
   #+end_notes
2) [X] What does the format specifier ~%10.5f\n~ mean to you? What can you
   print with it?
   #+begin_src C :results output
     printf("....|....|....|\n");
     printf("%10.5f\n",3.141593);
   #+end_src

   #+RESULTS:
   : ....|....|....|
   :    3.14159
3) [X] What if I want to print " or \ in C?
   #+begin_src C
     printf("The \" is printed using \\\"."); // \" is ", (\\)(\") is \"
   #+end_src

   #+RESULTS:
   : The " is printed using \".
4) [X] You've met the ~main~ function. What does it do again?
   #+begin_notes
   Answer: the ~main~ function is the entry point of a C program. All
   code that you want to execute needs to be inside it.
   #+end_notes
   #+begin_src C :tangle hello1.c
     #include <stdio.h>

     int main (void) {

       int hello(void) {   // definition must be inside main()
         puts("hello there");
         return 0; // end of hello()
       }

       hello();  // function call
       return 0; // end of main()
     }
   #+end_src

   #+RESULTS:
   : hello there

   #+begin_src C :tangle hello1.c
     #include <stdio.h>

     int main (void) {
       hello();  // function call
       return 0; // end of main()
     }
     int hello(void) {   // definition must be inside main()
       puts("hello there");
       return 0; // end of hello()
     }
   #+end_src
5) [X] Can you rely on the compiler (~gcc~) to alert you if format
   specifiers ~%...~ and input variables in ~scanf~ don't match up?
   #+begin_src C :cmdline < ../data/input
     // input file contains 1.67 1.67
     float x,y;
     scanf("%f%d", &x, &y);
     printf("%.2d %.2f\n", x, y);
   #+end_src

   #+RESULTS:
   : -536870912 0.00
6) [X] Which of these are operators in C?
   1) ++
   2) %%
   3) %
   4) !!
   5) !=
   6) --
   7) //
   #+begin_src C
     int i=4;
     printf("%d ", ++i); // can only be applied to variables
     printf("%d %d %d %d\n",
            4%2,   // remainder of 4/2 is 0
            !!4,   // !(!4) == !(!1) == !0 == 1
            4!=2,  // 4!=2 is true so == 1
            --i);
   #+end_src
7) [X] If ~int i = 10~ and ~int j = 500~, what will ~!(i > j)~ print in C?

   /Tip: remember that, in C, the *logical* value of any number but 0 is
   true displayed as ~1~, or ~!0 == 1~./
   #+begin_src C
     int i = 10, j = 500;
     printf("%d\n", !(i > j));  // !(10 > 500) == !(0) == 1
   #+end_src
8) [X] What if there are arithmetic operators and characters present in
   the Boolean expression? E.g. in ~('m' > 'M') && 5 - 5)~
   #+begin_notes
   - you can logically compare characters like "a" just like numbers
     (a character is always a non-zero number).
   - Arithmetic operators have higher precedence than logical
     operators.
   #+end_notes
   #+begin_src C
     printf("%d\n", (int)('M'));
     printf("%d\n", (int)('m'));
     printf("%d\n", ('m' > 'M') && 5 - 5);
     // 'm'>'M' == 1, 5 - 5 = 0 == 0
     //  1 && 0 == 0
   #+end_src
9) [X] Test your ~scanf~ expertise: what does this command expect as input?
   #+begin_src C :cmdline < ../data/scanf_input1
     int i,j; float x;
     scanf("%d=%f%d", &i, &x, &j);
     printf("%d %.1f %d", i, x, j);
   #+end_src

10) Suppose we call ~scanf~ like this and enter the numbers ~100 10.5
    5000~ - what will the output be?
    #+begin_src C :cmdline < ../data/scanf_input2 :results output
      float x=0.; int i=0, j=-34;
      scanf("%d%f%d", &i, &x, &j);
      printf("x = %g, i = %d, j = %d\n", x, i, j);
    #+end_src

    #+RESULTS:
    : x = 10.5, i = 100, j = 5000

11)
    #+begin_src C :cmdline < ./input
      int i; float x; int j;

      scanf("%d%f%d", &i, &x, &j);
      printf("i = %d, x = %f, j = %d\n", i, x, j);
    #+end_src

    #+RESULTS:
    : i = 10, x = 0.300000, j = 5

** Review/practice: Logical values/operators

- What is "[[https://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish Notation]]"?
  #+begin_notes
  When the operators follow their operands - for example to add 3 and
  4, the expression is ~3 4 +~ rather than ~3 + 4~ (algebraic notation).
  #+end_notes

- Definitions for ~&&~, ~||~ and ~!~:
  #+begin_src C
    int A,B,C,D;
    printf(" !A   A   B   A&&B   A||B\n");
    printf("-------------------------\n");
    for (int i = 1; i >= 0 ; i--) {
      for (int j = 1; j >= 0 ; j--) {
        A = i, B = j;
        printf("%3d%4d%4d%5d%8d\n",!A,A,B,A&&B,A||B);
      }
     }
  #+end_src

  #+RESULTS:
  :  !A   A   B   A&&B   A||B
  : -------------------------
  :   0   1   1    1       1
  :   0   1   0    0       1
  :   1   0   1    0       1
  :   1   0   0    0       0

- This works (in C) for any values of A,B, e.g.
  #+begin_example
  | !100 | 100 | 0 | 100 && 0 | 100 || 0 |
  |------+-----+---+----------+----------|
  |    0 |   1 | 0 |      0   |   1      |
  #+end_example
  Computational "proof":
  #+begin_src C
    int i=100,j=0;
    printf("!100 = %d, 100 && 0 = %d, 100 || 0 = %d\n",
           !i, i && j, i || j);
  #+end_src

  #+RESULTS:
  : !100 = 0, 100 && 0 = 0, 100 || 0 = 1

- What about brackets? (Beyond /Please Excuse My Dear Aunt Sally/) Order
  of operators matters: ~&&~ has a higher precedence than ~||~: the
  expression ~A || B && C~ is evaluated as ~A || (B && C)~.

- Expressions with multiple operators of the same precedence
  (associativity) are evaluated from left to right: ~A || B || C && D~
  becomes ~(A||B)||(C&&D)~.

- Here is a table that summarizes precedence and associativity rules
  for the many operators of the C language:
  #+attr_latex: :width 400px
  #+caption: Source: ChatGPT (Mar 14 version)
  [[../img/precedence.png]]

- Exercises! Work this out for yourself first:
  1) ~0 == 0~
  2) ~!0~
  3) ~1 && 1~
  4) ~1 || 2~
  5) ~0 && !1~
  6) ~(1 && 0) || (200 <2)~
  7) ~(100 > 10) || (200 < 2)~
  8) ~(100 > 10) && (200 > 2)~
  9) ~(67 || 0) && (0 || 0)~
  10) ~67 || 0  &&  0 && 0~
  #+begin_src C
    printf("%d %d %d %d %d\n",
           0==0, // 1
           !0, // 1
           1&&1, // 1
           1||2, // 1||1 == 1
           0&&!1); // 0 && 0 == 0
    printf("%d\n", (1 && 0) || (200 < 2)); // 0 || 0 == 0
    printf("%d\n", (100 > 10) || (200 < 2)); // 1 || 0 == 1
    printf("%d\n", (100 > 10) && (200 > 2)); // 1 && 1 == 1
    printf("%d\n", (67 || 0) && (0 || 0)); // (1||0) && 0 == 0
    printf("%d\n", (67 || 0) && (0 && 0)); // (1||0) && 0 == 0
    printf("%d\n",  67 || 0  &&  0 && 0 ); // 1 || 0 == 1
  #+end_src

  #+RESULTS:
  : 1 1 1 1 0
  : 0
  : 1
  : 1
  : 0
  : 0
  : 1

** What did you learn this week?
#+attr_latex: :width 400px
#+caption: Traditional classroom (Flickr.com)
[[../img/classroom.jpg]]

Mon:
1. Integration of computer skills has not been all that fast
2. There seems to be a shift in education from theory to applications
3. In the next 20 years things could be a lot more automated[fn:3]

Wed:
1. Logical expressions (like ~!!~) and operators (like ~++~)
2. How to escape...not from Lyon but from special characters
3. Typical mistakes people make with ~printf~ and ~scanf~

Fri:
- Review logical operators and compound expressions
- Completed a bunch of exercises

** Programming assignments
#+attr_latex: :width 400px
#+caption: Source: Unsplash.com
[[../img/late1.jpg]]

- Divide two/three floating point numbers
- Print out Boolean operators as a table (bonus)
- Print out compound operators as a table (bonus)

* Week 12 - Pseudocode/BPMN/Conditional statements
#+attr_latex: :width 400px
#+caption: Source: twitter.com/@george_mack
[[../img/high_agency.jpeg]]

- [X]  [[https://twitter.com/george__mack/status/1642197538647445504?s=20][Do you have 'high agency'?]] I satisfy criteria 1-5 (I'm always nice)
- [X] Useful: feed [[https://lyon.instructure.com/calendar][Canvas calendar]] to your Google calendar ([[https://community.canvaslms.com/t5/Student-Guide/How-do-I-subscribe-to-the-Calendar-feed-using-Google-Calendar-as/ta-p/535][instructions]])
- [X] Now: open Emacs on the file ~8_operators_practice.org~

** Pseudo-everything
#+attr_latex: :width 400px
#+caption: Photo: Hoaxbuster - deze kinderen hebben wél aandacht voor Rembrandt (2014)
[[../img/exhibition.png]]

/Image: Picture of an exhibition./
#+attr_latex: :width 400px
#+caption: Photo: The same group of kids.
[[../img/exhibition.jpeg]]

/Image: Same exhibition, same group of school children./

- Hoaxbusters and fact checkers don't always need fancy tech.
- Pseudo- comes from the Greek ψευδής, pseudes, "false"
- Pseudo-code is real - unlike pseudo-art and pseudo-journalism

* Week 13 - Conditional statements
#+attr_latex: :width 400px
[[../img/cc_density.png]] [[../img/cc_box.png]]

*Agenda:*
- Topic 1: conditional statements ~if else~
- Topic 2: loops ~for~ ~while~ ~switch~
- Assignments: tests and programming (later this week)

*Outlook:*
- Arrays
- Pointers
- C++ overview (io)

*Skipped:*
- Introduction to BPMN (Business Process Modeling and Notation)
- To follow the lecture and practice, use ~bpmn.io~ instead of Signavio:
  #+attr_latex: :width 400px
  #+caption: Free online BPMN editor at bpmn.io (Camunda)
  [[../img/bpmnio.png]]

** [[https://docs.google.com/forms/d/e/1FAIpQLSdLkJ65AaAsx-g2_cGj2y3SXwmpz_HdH9mr86QDKGqZBkSNPA/viewform][2023 Arkansas Summer Research Institute]]
#+attr_latex: :width 400px
#+caption: Howard Carter examining the coffin of Tut-Ankh-Amun (1925)
[[../img/mummy.jpg]]

- Great opportunity to network and learn
- Free and virtual
- Only 2 weeks long (June 1-19)
- Share link with others: https://tinyurl.com/apply2023asri

* Week 14 - Loops: ~for~, ~while~ and ~do while~
#+attr_latex: :width 400px
[[../img/loop.jpg]]

SERIOUS PROGRAMMING MEANS KNOWING:
1) variables (~int~) and data structures (array)
2) operators (~++~) and functions (~printf~)
3) numbers (~%d~) and memory management (~&~)
4) file and process management (~Emacs~, ~Org~, ~gcc~)

We've touched upon every one of these areas: not too shabby!

** Test 6 preview

1) What will this program print?
   #+begin_src C
     int i = 1, j = 1;
     i - j;
     printf("%d %d\n",i,j);
   #+end_src

   #+RESULTS:
   : 0 0

2) What does the compound operator expression ~a-=b~ compute?
   #+begin_src C
     int a=100,b=50;
     printf("%d -= %d is ", a, b);
     printf("%d\n", a-=b);  // same as a = a - b ('assign a-b to a')
   #+end_src

   Note that ~-=~ has higher precedence than ~,~ therefore this looks
   wrong:
   #+begin_src C
     int c=100,d=50;
     printf("%d -= %d => c = %d\n", c, d, c-=d);
   #+end_src

   #+RESULTS:
   : 50 -= 50 => c = 50

   What happened: ~(c=100) -= (d=50)~ leads to ~c=100-50=50~. But it is
   first evaluated and then the *new* value of c is printed, not the old
   one.

3) How can you test if 'A' is equal to the character 'B' or not?
   #+begin_src C
     char c1='A', c2='B';
     // Tests if 'A' == 'B'
     printf("%d\n", c1 != c2);
   #+end_src

   #+RESULTS:
   : 1

4) What kind of operators are ~||~ and ~>=~ and ~=~?
   #+begin_quote
   1) ~||~ is a logical operator
   2) ~>=~ is a relational operator
   3) ~=~ is an assignment operator
   #+end_quote

5) What does ~if ( j = 1 )~ do when used in an ~if~ statement?
   #+begin_quote
   ~j=1~ assigns 1 to ~j~, so it reduces to ~if(1)~ which is always true.
   #+end_quote
   #+begin_src C
     int j=1;
     if (j = 1) {  ## This statement ALWAYS succeeds
         puts("true");
      } else {
       puts("false");
      }
   #+end_src
   Reversely, the statement ~if (j=0)~ always fails.

6) What is the purpose of ~break~ in a ~switch~ statement?
   #+begin_quote
   When ~break~ is executed, the ~switch~ statement (between the ~{...}~) is
   left and nothing afterwards is executed.
   #+end_quote

** Assignments
#+attr_latex: :width 400px
#+caption: Missing in-class and home assignments
[[../img/missing.png]]
[[../img/missing2.png]]

- Submit anything late for partial credit (50%) no later than May 3rd

- New programming *assignment*: [[https://lyon.instructure.com/courses/1014/assignments/10074][compute the Euler number]]

- Coming: *test 7* (due April 28) on loops - *preview* on Monday

- DIY: exiting from a loop with ~break~, ~continue~, ~goto~.

- Download and check the extended example "[[https://github.com/birkenkrahe/cc/blob/piHome/org/13_loops.org#extended-example-balancing-a-checkbook][Balancing checkbook]]"

- Bonus points for leaving an evaluation in Canvas!
** Loops: ~while~, ~do...while~ and ~for~
#+attr_latex: :width 400px
#+caption: Bodlam castle with loop windows (for archers), Flickr.com
[[../img/bodlam.jpg]]


- Monday: ~while~ loops
  #+begin_example C
    int i = 10;
    while ( i > 0 ) {
      printf("T minus %d and counting\n", i--);
    }
  #+end_example

- Wednesday: ~do while~ loops
  #+begin_example C
    int i = 3;
    do {
      printf("T minus %d and counting\n", i--);
    } while (i > 0);
  #+end_example

- Friday: ~for~ loops
  #+begin_example C
  int i;
  for ( i = 10; i > 0; i-- ) {
    printf("T minus %d and counting\n", i);
    }
  #+end_example
o* Week 15 - Arrays, Functions and Pointers
#+attr_latex: :width 400px
#+caption: Carter Buton early flight pioneer (flickr.com)
[[../img/overload.jpg]]

- Only five more sessions left!
- Test 7 is live now - for full points, complete it by Fri, April 28
- PDF copies of all practice files are now online in GitHub: if you
  want to complete them for partial credit, work through the PDFs.

  | DAY       | TOPIC              | CODE NAME           |
  |-----------+--------------------+---------------------|
  | Monday    | Arrays             | Freedom of flight   |
  | Wednesday | Functions          | Dancing with tigers |
  | Friday    | Pointers           | The Old Reliable    |
  | Monday    | C++                | DoublePlusGood      |
  | Wednesday | Final exam preview | Pull-ups            |

** Test 7 preview - loop at your leisure

The penultimate test deals exclusively with loops!

1) Which loops do you know that go on indefinitely?
   #+begin_example C
     while(1000);
     while(i > 1); {
       int i = 1; i++; // starts at 1, goes to 2,3,4,.... < 1
     }
     do { /* whatever */ } while(1);
     for (;;;) { /* whatever */ }
   #+end_example
   #+begin_quote
   All loops have conditions that are never wrong - they enter the
   loop body (the first one doesn't even have one) and never leave.
   #+end_quote
2) What's the output of this program?
   #+begin_src C
     int k = 100;
     while ( k > 95 ) {
       printf("%d ", k);
      }
   #+end_src
   #+begin_quote
   None! There's no decrement in the loop body so the condition ~k>95~
   is never wrong.
   #+end_quote
3) Well then, what's the output of this program?
   #+begin_src C
     int k = 100;
     while ( k > 95 ) {
       printf("%d ", k--);
      }
   #+end_src

   #+RESULTS:
   : 100 99 98 97 96
4) Which of the following statements is *not* equivalent to the other
   two? (Assuming that the loop bodies are identical.)
   #+begin_example C
     for (k = 0; k == 100; k++) ...
     for (k = 0; k == 100; ++k) ...
     for (k = 0; k == 100;    ) ...
   #+end_example
   #+begin_quote
   The last ~for~ statement is missing an incrementing operator for the
   loop variable
   #+end_quote
5) Which of the following statements is *not* equivalent to the other
   two? (Assuming that the loop bodies are identical.)
   #+begin_example C
     while ( i == 100 ) {...}
     do {...} while ( i == 100 );
     for ( ; i == 100; ) {...}
   #+end_example
   #+begin_quote
   The ~do..while~ statement is executed once before the first check,
   and that's the only difference to the other two.
   #+end_quote
6) What is wrong with this program? It does not compile.
   #+begin_src C :results silentx
     for (int i = 1; i == 5; i++);
     i++;
   #+end_src

   #+RESULTS:

   The error message:
   #+begin_example Compilation
   In function 'main':
   error: 'i' undeclared (first use in this function)
      10 | i++;
         | ^
   #+end_example
   #+begin_src C :results silent
     int i;
     for (int k = 1; k == 5; k++);
     i++;
   #+end_src
7) Which ~for~ loop counts down from ~n-1~ to ~0~?
   #+begin_src C
     int i, n = 5;
     for(i = n - 1; i >= 0; i--) {
       printf("%d\n", i);
      }
   #+end_src

   #+RESULTS:
   #+begin_example
   9
   8
   7
   6
   5
   4
   3
   2
   1
   0
   #+end_example
8) Will this program compile?
   #+begin_src C :results silent
     int i=0;
     do { /* do nothing */} while(i==1);
   #+end_src

** SURVEY - BONUS POINTS! DO IT NOW! PAYBACK TIME!
#+attr_latex: :width 400px
#+caption: Current course evaluation status Apr 26
[[../img/eval.png]]

#+attr_latex: :width 400px
#+caption: Current course evaluation status Apr 28
[[../img/eval1.png]]

** Last (bonus) assignments (practice files)
#+attr_latex: :width 400px
#+caption: Current course evaluation status
[[../img/practice1.jpg]]

- Arrays practice: [[https://raw.githubusercontent.com/birkenkrahe/cc/piHome/org/14_arrays_practice.org][problems]] / [[https://github.com/birkenkrahe/cc/blob/piHome/pdf/14_arrays_practice.pdf][solutions]]
- Functions practice: [[https://raw.githubusercontent.com/birkenkrahe/cc/piHome/org/15_functions_practice.org][problems]] / [[https://github.com/birkenkrahe/cc/blob/piHome/pdf/15_functions.pdf][solutions]]
- Pointers practice: [[https://raw.githubusercontent.com/birkenkrahe/cc/piHome/org/16_pointers_practice.org][problems]] / [[https://github.com/birkenkrahe/cc/blob/piHome/pdf/16_pointers_practice.pdf][solutions]]

** Review of arrays - freedom of flight
#+attr_latex: :width 400px
#+caption: Carter Buton early flight pioneer (flickr.com)
[[../img/arrays.jpg]]

There will be a last test from Monday to Wednesday next week (review
on Monday) with questions on arrays, functions and pointers!

1) What's an array?
   #+begin_quote
   Answer: a data structure in C that holds values of the same type.
   #+end_quote

2) Examples for arrays in C?
   #+begin_quote
   - Scalars (number, character)
   - Vectors ~a[4]~
   - Matrices ~m[2][2]~
   #+end_quote

4) What is the index of the third element of an array ~a[]~?
   #+begin_quote
   Array indices begin with 0 so the third element has the index 2.
   #+end_quote

3) How would you declare an integer array of four elements and
   initialize it with four different numbers?
   #+begin_src C
     int a[] = {100,200,300,400};
     printf("%d %d %d %d\n", a[0], a[1], a[2], a[3]);
   #+end_src

   #+RESULTS:
   : 100 200 300 400

4) If ~a[0] = 2~ what is ~--a[0]~?
   #+begin_quote
   --a[0] is a[0] = a[0] - 1 => --a[0] puts 2-1 = 1 into a[0]
   #+end_quote

5) What is the output of this code?
   #+begin_src C
     int a[]={10,20,30};
     for (int i = 2; i >= 0; --i) {
       printf("%d\n", a[i]);
       }
   #+end_src

   #+RESULTS:
   : 30
   : 20
   : 10

** Review of functions - dancing with tigers
#+attr_latex: :width 400px
#+caption: Myrtle Beach Safari program (Flickr.com)
[[../img/function.jpg]]

1) How many dimensions can an array have?
   #+begin_quote
   An array can have any number of dimensions.
   #+end_quote

2) How many dimensions does ~a[2][2][2][2]~ have?

3) ~x[]~ is an array. What is ~sizeof(x)/sizeof(x[0])~?
   #+begin_quote
   The length of ~x~ - the number of its elements starting with ~x[0]~.
   #+end_quote

4) What's the size of the array ~a[2][2][2][2]~?
   #+begin_src C
     int a[2][2][2][2];
     printf("%d\n",sizeof(a));
   #+end_src

   #+RESULTS:
   : 64

5) How does the computer store ~a[2][2][2][2]~?
   #+begin_quote
   N-dimensional arrays are not stored in N but in 1 dimension.
   #+end_quote

6) Which value of ~m~ does ~m[9999][1]~ refer to?
   #+begin_quote
   The value stored in the matrix element in row 9999 and column 1.
   #+end_quote

7) In C, can you call a function from inside another function?
   #+begin_quote
   Yes! Every user-defined function is called from within ~main~.
   #+end_quote

8) Do you need to define (= create) a mathematical function like ~log~
   #+begin_quote
   No, you only need to declare it - in the case of ~log~ with the
   declaration ~#include <math.h>~ that makes constants (like ~pi~) and
   functions (like ~log~) available to you.
   #+end_quote
* Week 16 - C++ - Final exam preview
#+attr_latex: :width 400px
[[../img/stroustrup.png]]

- *Test 8 is on! 10 questions on arrays and functions in C!*

- [[https://youtu.be/MNeX4EGtR5Y][C++ in 100 seconds]]: write down as many FACTS and/or QUESTIONS as you can!
  #+begin_quote
    1. Widespread use
    2. Hard to learn
    3. Created in 1979 by Bjarne Stroustrup @ATT Bell Labs
    4. Object-orientation from Simula, performance from C
    5. C++ = C with classes
    6. Superset of C (any C program is a valid C++ program)
    7. Zero overhead abstractions: polymorphism, encapsulation, inheritance
    8. Used in game engines (Unreal), databases (MySQL), embedded devices (IoT)
    9. Low-level infrastructure like compilers, virtual machines
    10. Low-level memory management + high level abstractions (classes, pointers)
    11. C++ compilers: GCC / LLVM CLANG
    12. C++ files end in ~.cpp~
    13. Standard I/O library ~<iostream>~
    14. Hello world with ~std::cout << "Hello, world!";~
    15. Get rid of ~std::~ by ~using namespace std;~
    16. C++ supports Object-Oriented Programming (OOP)
    17. A class is a blueprint for an object like ~class Human~
    18. You can make classes private (hidden) or public (visible)
    19. Classes also have methods like ~Human::walk~
    20. Overloading is a form of polymorphism
    21. Constructors and destructors create or destroy objects: ~Human()~, ~~Human()~
    22. Inheritance helps developers to share logic around programs
    23. Instantiating a class - for example ~Human jeff~ creates the human object "jeff"
    24. Smart pointers make sure that only one object can be allocated to memory
    25. C++ is compiled
  #+end_quote
  #+begin_src C++ :includes <iostream> :main no
  #include <iostream>
  #include <string>

  using namespace std;

  int main() {
    cout << "Hi Mom!";
    string hello = "Look at my string!";
    return 0;
  }
#+end_src
  #+begin_src C :main no
  #include <stdio.h>
  int main() {
    puts("Hi, Mom!");
    char hello[] = "Look at my string!";
    return 0;
  }
#+end_src

- Lecture time!
  
** Final exam preview
#+attr_latex: :width 400px
#+caption: Bodybuilder Gene Jantzen with wife Pat and 11-month old son Kent
[[../img/pullups.jpg]]

- What will this program print out?
  #+begin_src C
    int i[]={0,0,1,1};
    printf("%d\n",(i[0] || i[1]) && (i[2] || i[3]));
    printf("%d\n", i[0] || i[1]  &&  i[2] || i[3]);
  #+end_src

- What will this program print out?
  #+begin_src C
    printf("%d\n",
           (10 == 10) || -1 + 1 && ('Z'=='Z'));
  #+end_src

- What will this program print out?
  #+begin_src C :cmdline < ../src/final
    int i,j;float x;
    scanf("%d%d%f",&i,&j,&x);
    printf("%d %d %f",i,j,x);
  #+end_src

  #+RESULTS:
  : 100 1 0.000000
  
** What next? (Further studies/career advice)
#+attr_latex: :width 400px
#+caption: Women spectators at Sydney stadium, 1940
[[../img/next.jpg]]

- What should you read?
- What should you study?
- What should you do with the rest of your life?

*** Books
#+attr_latex: :width 300px
#+caption: C++ for dummies (2023) and The Rook's Guide to C++ (2013)
[[../img/dummies.jpg]] [[../img/rook.jpg]]

*** Courses
#+attr_latex: :width 400px
#+caption: NYC women transcribing popular fiction into Braille
[[../img/course.jpg]]

- [[https://w3schools.com][w3schools.com]]: HTML/CSS, JavaScript, Python, SQL, Java, C++
- [[https://www.freecodecamp.org/learn/][freeCodeCamp.org]]: Many [[https://www.youtube.com/c/freecodecamp/videos][YouTube courses]] with certifications
- [[https://datacamp.com][DataCamp.com]]: Python, R, SQL, bash - get access from me

*** Careers
#+attr_latex: :width 400px
#+caption: Computer or data science career?
[[../img/data-science-careers.jpg]] [[../img/career1.jpg]]

- Get as many internships as possible
- Many shorter ones are more useful than one long one
- Lyon IT services is a great place to start, too
- Join me for my [[https://github.com/birkenkrahe/org/blob/master/internship.md][internship supervision course]] (CSC/DSC 301/401)
- Keep your skills current no matter at what level

* References

Bundell (22 Mar 2023). The driving test for driverless cars. Online:
[[https://www.nature.com/articles/d41586-023-00868-7?awc=26427_1679938395_79c332d53672b99e485f3ec8133000be][nature.com]].

Powered by OpenAI's GPT-3 language model, URL: [[https://chat.openai.com][chat.openai.com]].

* Footnotes

[fn:3]I found this in a [[http://www.mit.edu/~bhdavis/TeachFuture.html][1994 article from MIT]], "The Teacher of the
Future" by [[http://www.mit.edu/~bhdavis/Index.html][Ben Howell Davis]]: »The teacher of the future is a teacher
fully engaged along lines of excellence [quoting what JFK said about
'happiness']. The only way to be happy in the information age with its
constantly changing technologies and information overload is to be
fully engaged in an active understanding of the problem. To be
interested in making sense of new and difficult time will require a
measure of involvement in new technologies and a measure of
involvement in providing a context for them.«

[fn:2] (1) Look through the material on GitHub ([[https://github.com/birkenkrahe/cc/tree/piHome/org][Markdown]] or [[https://github.com/birkenkrahe/cc/tree/piHome/pdf][PDF]]). (2)
Check the review of questions at the start of each session. (3) After
each class room session: write down what you didn't understand and ask
me after class or before the next class (or send me an email).

[fn:1]"The Dunning-Kruger effect was first discovered and written
about in 1999, by researchers David Dunning and Justin Kruger at
Cornell University. The researchers spotted how much people
overestimated their own abilities in daily life—think of the guy in
class who keeps raising his hand to relay his useless ideas—and coined
the term “dual burden”. Dual burden was used to describe that these
people suffer from two things: ignorance, and ignorance of their own
ignorance. The researchers tested random participants on tests of
humour, grammar, and logical reasoning. They found that people who
ranked in the bottom 25% of any of these test scores tended to predict
themselves to be at the top of the pack. When they scored in the 12th
percentile, they estimated themselves to be in the 62nd. On the flip
side, people in the top 25% predicted their scores to be slightly
lower than they actually were." (Source: [[https://thedecisionlab.com/biases/dunning-kruger-effect][thedecisionlab.com]])
