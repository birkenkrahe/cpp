#+TITLE: CONDITIONAL IF ELSE STATEMENTS
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ (Spring 2023)
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:1 ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :noweb yes :tangle yes
* Simple and nested 'if' structures

- In this section of the course, we go beyond simple statements and
  turn to program flow and evaluation of logical conditions

- This section follows chapter 3 in Davenport/Vine (2015) and
  chapters 4 and 5 in King (2008)

- Practice workbooks, input files and PDF solution files in GitHub

* Overview and example

- ~If~ statement structure in C is very similar to pseudocode ~If~

- [[battle1]] is the C version of the pseudocode:

  #+name: battle1
  #+begin_example C
  if (health <= 100)  // checks if health is smaller or equal 100
    // drink health potion
  else
    //resume battle
  #+end_example

- Differences: condition needs /parentheses/ ~(...)~; no "~end if~" statement

- The ~health~ check results in a /Boolean/ answer: true (~1~) or false (~0~)

- To run, the program needs a /declaration/ of the ~health~ variable

- /Multiple statements/ need to be included in braces ~{...}~

- The source code [[battle2]] will run. The variable has been declared and
  initialized:

  #+name: battle2
  #+begin_src C :main yes :includes <stdio.h> :results output
    int health = 99;

    if (health <= 100) {
      // drink health potion
      puts("This is what you do:");
      printf("Drinking health potion!\n");
     }
     else {
       // resume battle
       puts("This is what you do:");
       printf("Resuming battle!\n");
     }
  #+end_src

  #+RESULTS: battle2
  : This is what you do:
  : Drinking health potion!

* Single vs. nested IF structures

- In the example [[ex:single]], the IF statements are evaluated
  independently, case by case. It does not matter if any of them
  fails. We'll see that there is a C control structure for that.

  #+name: ex:single
  #+begin_example C
       if ( i == 1 )
       // do one thing

       if ( i == 2)
       // do another thing
  #+end_example

  The figure [[fig:singleif]] shows the BPMN model for this program:

  #+name: fig:singleif
  #+attr_latex: :width 400px
  #+caption: Single IF statements
  [[../img/single.png]]

- In the example [[ex:nestedif]], the second part of the IF statement is
  entered only if the first condition fails.

  #+name: ex:nestedif
  #+begin_example C
     if ( i == 1 ) {
        // do one thing
     }
     else if ( i == 2) {
        // do another thing
     }
  #+end_example

-  The figure [[fig:nestedif]] shows the BPMN model for this program:

  #+name: fig:nestedif
  #+attr_latex: :width 400px
  #+caption: Single IF statements
  [[../img/nested.png]]

- Which one of these you implement, depends strongly on the problem
  and on your performance requirements (they're quite different in
  speed - which you do you think performs better?)

* Let's practice!

- Download the practice Org-mode file from GitHub and check its file
  type: [[https://bit.ly/cc_battle][bit.ly/cc_battle]]

- Open the Emacs browser with ~M-x eww~ and enter the URL

- Save the file with ~C-x C-w~ as ~11_ifelse_practice.org~

- Close the buffer with ~C-x k~ and reopen the file with ~C-x C-f~

- Add your own name at the top and pledge

- You're asked to 1) modify an existing program

* References

- Davenport/Vine (2015) C Programming for the Absolute Beginner
  (3ed). Cengage Learning.
- <<logic>> GVSUmath (Aug 10, 2012). Proving Logical Equivalences
  without Truth Tables [video]. [[https://youtu.be/iPbLzl2kMHA][URL: youtu.be/iPbLzl2kMHA]].
- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]


