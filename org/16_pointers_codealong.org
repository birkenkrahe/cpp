#+TITLE:Pointers
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 / Introduction to programming in C/C++
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil ^:nil num:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output 
* README
#+attr_latex: :width 400px
#+caption: Roadside stand near Birmingham, AL (LOC@flickr.com)
[[../img/pointer.jpg]]

- This script introduces C pointers in theory and practice.

- This section, including some sample code, is based on: chapter 11
  in King (2008), and chapter 7 in Davenport/Vine.

* Overview

- Remember the fundamental architectural problem of the "von Neumann"
  architecture of digital computers.
  #+caption: Computer architecture (simplified)
  #+attr_latex: :width 400px
  [[../img/1_computer.png]]

- Imagine: CPU \equiv brain, Memory \equiv house, Harddisk \equiv moon
  #+begin_quote
  1. CPU and the Brain: The CPU (Central Processing Unit) is like the
     brain because it is responsible for processing all instructions
     and making decisions. It performs the core computations and
     controls other parts of the computer based on the input it
     receives, similar to how the brain processes sensory information
     and dictates responses.
  2. RAM and a House: RAM (Random Access Memory) is akin to a house
     because it serves as the active, working area where tasks are
     carried out and information is temporarily held. Just as a house
     contains rooms where daily activities occur (e.g., sleeping,
     eating, working), RAM holds active applications and data for
     quick access by the CPU. The size of the RAM affects how much
     activity (or how many applications) can be handled at once, much
     like the size of a house determines how many activities can
     comfortably occur simultaneously.
  3. Hard Disk and the Moon: A hard disk is comparable to the Moon in
     that it serves as a distant but integral storage location. Just
     as the Moon orbits Earth and is a more remote body holding
     impacts of meteorites and historical footprints, a hard disk
     stores data that is not immediately needed for current processing
     tasks but is crucial for long-term storage. Its contents are not
     as quickly accessible as those in RAM, reflecting the Moon’s
     greater distance compared to our immediate environment.
  #+end_quote

- Computer memory is like a list of /locations/
  #+caption: Sample data stored in an imaginary memory stack
  #+attr_latex: :width 400px
  [[../img/memory.png]]

- Each chunk of memory has an /address/ to a location

- /Pointers/ point to these addresses
  #+attr_latex: :width 300px
  #+caption: A pointer p points to address of i
  [[../img/16_pointer.png]]

- The /address/ is not the house, it's a /reference/ to the house:
  #+attr_html: :width 300px
  #+caption: envelope = pointer to an address
  [[../img/16_letter.png]]

- C#, Java, Python...do not offer pointers (easily) - most of the
  direct memory management is "abstracted" away (i.e. the memory is
  hidden and a simpler user interface is offered).
  #+begin_quote
  1. C#: C# does support pointers, but their use is limited to unsafe
     code blocks. You must explicitly mark these areas with the =unsafe=
     keyword. This feature allows you to perform operations that
     involve direct memory access, similar to C or C++. However, using
     pointers is generally discouraged in favor of safer constructs
     provided by the language, such as objects and reference types.
  2. Java: Java does not support pointers, at least not in the
     traditional sense as seen in C or C++. Instead, Java handles
     memory through references to objects, and these references are
     abstracted away from direct memory address manipulation. This
     abstraction is part of Java's design to ensure security and
     simplicity in memory management, reducing the likelihood of
     errors such as memory leaks or pointer arithmetic.
  3. Python: Python also does not use pointers. It handles everything
     by object references. The language is designed to abstract away
     most direct memory management tasks from the developer,
     automatically handling object creation and destruction through a
     built-in garbage collector. Python’s approach simplifies the
     development process but at the cost of direct control over memory
     and performance optimizations that pointers can offer.
  #+end_quote

- C and C++ offer pointer variables and operators naturally

- This gives you a lot more control over the computer (because every
  operation, every process involves memory management)

- Examples:
  - *String manipulation* (working with text - e.g. when creating
    fast-performing chat bots or AI agents.
    
  - *Dynamic memory allocation* - the process of assigning memory
    during the execution time (when a program typically competes
    with thousands of other processes).

- This is /mind control/: You can essentially decide what the computer
  should think with which part of its "brain" (great potential to
  mess up, too), e.g. when you mis-allocate resources.

* Indirection (concept)

- Open Emacs on a codealong file like [[https://tinyurl.com/cpp-practice-org][tinyurl.com/cpp-practice-org]] and
  save it (C-x C-s) as an Org-mode file ~pointers.org~ to code along.

- Imagine you have a /variable/ ~iResult~ that contains the /value/ ~75~.

- The variable is /located/ at a memory address, which you can print:
  #+begin_src C

  #+end_src

- You see that repeated executions of this code creates different
  addresses. A /pointer/ is a variable that holds an address.

- Imagine you have a /pointer variable/ ~myPointer~ that contains the
  address of the variable ~iResult~:
  #+begin_src C
    int iResult = 75.;
    printf("%d <- %p\n", iResult, &iResult);

    
  #+end_src

- This means that ~myPointer~ /indirectly/ points to the value ~75~.

- You already worked with addresses: an /array name/ ~a~ is a pointer to
  the start of the array, the address of ~a[0]~.

- In the next code block, the conversion specifier ~%p~ lets us access
  the addresses that correspond to elements of the array ~a~, and even
  the address for the whole array.

- We declare an array ~a[2]~ and then we print its addresses:  
  #+name: ptrprint
  #+begin_src C

  #+end_src

- You can see that the address for ~a~ points to ~a[0].~

- You already worked with pointers: arguments in the call of ~scanf~
  are /pointers/: without the ~&~, the function would be supplied with
  the /value/ of ~i~, not the /address/. But ~scanf~'s job is to assign a
  memory location (an address) to the input variable.
  #+begin_example C
  int i;
  scanf("%d", &i);
  #+end_example

- The relationship between variable value and memory address is called
  /indirection: A /pointer/ provides /indirect/ access to the value via the
  address where the value is stored.

* Indirection (code)

- There are two /unary/ pointer operators:
  - the /address/ (or referencing) operator ~&~
  - the /indirection/ (or dereferencing) operator ~*~

- The unary /address/ operator ~&~ returns a computer memory address,
  e.g. ~&i = 0x7ffc7600b79c~ - it /references/ the memory location.

- What if ~i~ has not been initialized yet? Will the address change?
  Print the reference to ~i~ before initializing it, and after.
  #+begin_src C

  #+end_src

- The unary /indirection/ operator ~*~ returns a value, e.g. ~*p = 75~ if ~p~
  points at a variable that contains the value ~75~.

- Let's do it all in one code block:
  1) declare an integer variable ~i~
  2) assign the value ~1~ to ~i~
  3) declare an integer pointer ~*p~
  4) assign the address of ~i~ to ~p~ 
  5) print ~i~ and ~&i~ (~"is located at address"~)
  6) print ~p~ and ~*p~ (~"points to value"~)

  #+begin_src C
    // variables
      // declare integer variable
      // assign value to variable

    // pointers
      // declare integer pointer
      // assign the address of variable to pointer

    // print variables
    
    // print pointers

  #+end_src

- What if you assign a number ~1~ to ~p~ instead of an address?
  #+begin_src C 
     // declare integer pointer
        // assign integer value to pointer (instead of address)

    // print pointer value

  #+end_src

- Compiler message (~-Wint-conversion~ is a compiler flag):
  #+begin_example
   warning: assignment to ‘int *’ from ‘int’ makes pointer from integer
            without a cast [-Wint-conversion]
   15 | p = 1; // warning: missing 'cast'
      |   ^
  #+end_example

- Here is more documentation on compiler warnings. You can add them to
  your code block with the header argument ~:flags~, e.g. ~:flags -Wall~

- The figure illustrates these concepts. Can you describe what
  goes on from line to line?
  #+attr_html: :width 500px
  #+caption: Graphical illustration of the indirection operator (Source: King)
  [[../img/16_indirection.png]]

  #+begin_quote Answer
  1) The pointer ~p~ points to the address ~&i~ of the variable ~i~.
  2) ~i~ is initialized with the value ~1~. ~p~ still points at it.
  3) To change the value of ~i~ indirectly using the pointer ~p~, we
     assign ~*p = 2~. The indirection operator ~*~ designates a pointer.
  4) To check that ~i~ indeed has been changed, we print it.
  5) ~*p~ also prints the value of ~i~.
  #+end_quote

* ~*~ and ~&~ are inverse to one another

  - Address and indirection operator are /inverse/ to one another
    (i.e. they reverse each other's operation - applying both amounts
    to doing nothing).

  - Applying indirection ~*~ to an address /dereferences/ it.

  - Applying referencing ~&~ to a pointer extracts its address.

  - Let's demonstrate this with some code:
    #+name: inverseOps
    #+begin_src C
      // declaring and initializing

      // print variable and dereferenced pointer

      // print pointer and address of pointer

    #+end_src

  - Applying ~*~ to the pointer takes us back to the original variable
    (dereferences the pointer)
    #+begin_example C
      j = *&i  // same as j = i
    #+end_example
  
* Pointers must be initialized

- Non-initialized pointers lead to invalid data or expressions.

- Pointer variables should always be initialized with:
  + another variable's memory address (e.g. ~&i~), OR
  + with 0, OR
  + with the keyword ~NULL~.

- Here are some /valid/ pointer initializations - ~printf~ uses the
  conversion specifier ~%p~ for pointers.
  #+name: ptrInit
  #+begin_src C :tangle ./src/ptrinit.c

  #+end_src

- Let's print the last values (not the pointers): how do you have to
  change the ~printf~ statement? (Add the flag ~-w~ to disable all
  warnings)
  #+begin_src C :flags -w

  #+end_src

- Here are a few non-valid initializations: we want to change the
  value of a variable using the pointer to its memory address.
  + can you tell why?
  + can you right the wrong?
  + print ~iPtr~, ~&i~ and ~i~ 
  #+begin_src C :results silent
    int i=5; // declare integer i
    int *iPtr; // declare pointer iPtr

    iPtr = &i; // initialize pointer
    iPtr = 7;  // change value of variable
  #+end_src

- Solution:
  #+begin_src C :results output
    
  #+end_src

* Let's practice!

- Download and complete the practice file:
  [[  https://tinyurl.com/cpp-pointers-practice][tinyurl.com/cpp-pointers-practice]]

* References

- Davenport/Vine (2015) C Programming for the Absolute Beginner
  (3ed). Cengage Learning.
- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
  [[http://knking.com/books/c2/][URL: knking.com]].
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]
