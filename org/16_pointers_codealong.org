#+TITLE:Pointers
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 / Introduction to programming in C/C++
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil ^:nil num:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output 
* README

- The script introduces C pointers in theory and practice.

- This is the codealong file for you to code along during the
  lecture. Open it in Emacs as [[https://tinyurl.com/cpp-pointers-codealong][tinyurl.com/cpp-pointers-codealong]] and
  save it as ~~/pointers.org~ to your Emacs home directory.

- This section, including some sample code, is based on: chapter 11
  in King (2008), and chapter 7 in Davenport/Vine.

* Indirection (concept)

- Imagine you have a /variable/ ~iResult~ that contains the /value/ ~75~.

- The variable is /located/ at a memory address, which you can print:
  #+begin_src C

  #+end_src

- You see that repeated executions of this code creates different
  addresses. A /pointer/ is a variable that holds an address.

- Imagine you have a /pointer variable/ ~myPointer~ that contains the
  address of the variable ~iResult~:
  #+begin_src C
    int iResult = 75.;
    printf("%d <- %p\n", iResult, &iResult);

    
  #+end_src

- This means that ~myPointer~ /indirectly/ points to the value ~75~.

- You already worked with addresses: an /array name/ ~a~ is a pointer to
  the start of the array, the address of ~a[0]~.

- In the next code block, the conversion specifier ~%p~ lets us access
  the addresses that correspond to elements of the array ~a~, and even
  the address for the whole array.

- We declare an array ~a[2]~ and then we print its addresses:  
  #+name: ptrprint
  #+begin_src C

  #+end_src

- You can see that the address for ~a~ points to ~a[0].~

- You already worked with pointers: arguments in the call of ~scanf~
  are /pointers/: without the ~&~, the function would be supplied with
  the /value/ of ~i~, not the /address/. But ~scanf~'s job is to assign a
  memory location (an address) to the input variable.
  #+begin_example C
  int i;
  scanf("%d", &i);
  #+end_example

- The relationship between variable value and memory address is called
  /indirection: A /pointer/ provides /indirect/ access to the value via the
  address where the value is stored.

* Indirection (code)

- There are two /unary/ pointer operators:
  - the /address/ (or referencing) operator ~&~
  - the /indirection/ (or dereferencing) operator ~*~

- The unary /address/ operator ~&~ returns a computer memory address,
  e.g. ~&i = 0x7ffc7600b79c~ - it /references/ the memory location.

- What if ~i~ has not been initialized yet? Will the address change?
  Print the reference to ~i~ before initializing it, and after.
  #+begin_src C

  #+end_src

- The unary /indirection/ operator ~*~ returns a value, e.g. ~*p = 75~ if ~p~
  points at a variable that contains the value ~75~.

- Let's do it all in one code block:
  1) declare an integer variable ~i~
  2) assign the value ~1~ to ~i~
  3) declare an integer pointer ~*p~
  4) assign the address of ~i~ to ~p~ 
  5) print ~i~ and ~&i~ (~"is located at address"~)
  6) print ~p~ and ~*p~ (~"points to value"~)

  #+begin_src C
    // variables
      // declare integer variable
      // assign value to variable

    // pointers
      // declare integer pointer
      // assign the address of variable to pointer

    // print variables
    
    // print pointers

  #+end_src

- What if you assign a number ~1~ to ~p~ instead of an address?
  #+begin_src C 
     // declare integer pointer
        // assign integer value to pointer (instead of address)

    // print pointer value

  #+end_src

- Compiler message (~-Wint-conversion~ is a compiler flag):
  #+begin_example
   warning: assignment to ‘int *’ from ‘int’ makes pointer from integer
            without a cast [-Wint-conversion]
   15 | p = 1; // warning: missing 'cast'
      |   ^
  #+end_example

- Here is more documentation on compiler warnings. You can add them to
  your code block with the header argument ~:flags~, e.g. ~:flags -Wall~

- The figure illustrates these concepts. Can you describe what
  goes on from line to line?
  #+attr_html: :width 500px
  #+caption: Graphical illustration of the indirection operator (Source: King)
  [[../img/16_indirection.png]]

  #+begin_quote Answer
  1) The pointer ~p~ points to the address ~&i~ of the variable ~i~.
  2) ~i~ is initialized with the value ~1~. ~p~ still points at it.
  3) To change the value of ~i~ indirectly using the pointer ~p~, we
     assign ~*p = 2~. The indirection operator ~*~ designates a pointer.
  4) To check that ~i~ indeed has been changed, we print it.
  5) ~*p~ also prints the value of ~i~.
  #+end_quote

* ~*~ and ~&~ are inverse to one another

  - Address and indirection operator are /inverse/ to one another
    (i.e. they reverse each other's operation - applying both amounts
    to doing nothing).

  - Applying indirection ~*~ to an address /dereferences/ it.

  - Applying referencing ~&~ to a pointer extracts its address.

  - Let's demonstrate this with some code:
    #+name: inverseOps
    #+begin_src C
      // declaring and initializing

      // print variable and dereferenced pointer

      // print pointer and address of pointer

    #+end_src

  - Applying ~*~ to the pointer takes us back to the original variable
    (dereferences the pointer)
    #+begin_example C
      j = *&i  // same as j = i
    #+end_example
  
* Pointers must be initialized

- Non-initialized pointers lead to invalid data or expressions.

- Pointer variables should always be initialized with:
  + another variable's memory address (e.g. ~&i~), OR
  + with 0, OR
  + with the keyword ~NULL~.

- Here are some /valid/ pointer initializations - ~printf~ uses the
  conversion specifier ~%p~ for pointers.
  #+name: ptrInit
  #+begin_src C :tangle ./src/ptrinit.c

  #+end_src

- Let's print the last values (not the pointers): how do you have to
  change the ~printf~ statement? (Add the flag ~-w~ to disable all
  warnings)
  #+begin_src C :flags -w

  #+end_src

- Here are a few non-valid initializations: we want to change the
  value of a variable using the pointer to its memory address.
  + can you tell why?
  + can you right the wrong?
  + print ~iPtr~, ~&i~ and ~i~ 
  #+begin_src C :results silent
    int i=5; // declare integer i
    int *iPtr; // declare pointer iPtr

    iPtr = &i; // initialize pointer
    iPtr = 7;  // change value of variable
  #+end_src

- Solution:
  #+begin_src C :results output
    
  #+end_src

* Arrays and pointers as function arguments

- To code along in this section, create your own code blocks!

- The code contains two functions:
  1) function ~sumArray~ that directly takes an array and its size as parameters.
  2) function ~sumPointer~ that takes a pointer to the first array
     element and the size as parameters.
  #+begin_src C
  
  #+end_src

- How does this work exactly?
  #+begin_src C

  #+end_src

* Let's practice!

- Download and complete the practice file:
  [[  https://tinyurl.com/cpp-pointers-practice][tinyurl.com/cpp-pointers-practice]]

* References

- Davenport/Vine (2015) C Programming for the Absolute Beginner
  (3ed). Cengage Learning.
- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
  [[http://knking.com/books/c2/][URL: knking.com]].
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]
