#+TITLE: SWITCH STATEMENTS
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ (Spring 2023)
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:1 ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :noweb yes :tangle yes
* README

- In this section of the course, we go beyond simple statements and
  turn to program flow and evaluation of logical conditions

- This section follows chapter 3 in Davenport/Vine (2015) and
  chapters 4 and 5 in King (2008)

- Practice workbooks, input files and PDF solution files in GitHub

* Download the practice file

- Open the Emacs browser with ~M-x eww~ on ~bit.ly/cc_switch~
- Write file with ~C-x C-w~ to ~switch.org~
- Kill buffer with ~C-x k~
- Re-open file with ~C-x C-f~
  
* Overview

- The ~switch~ statement is fairly complex: it combines conditional
  expressions, constant expressions, default and break statements.

  #+begin_example C
  switch ( expression ) {
    case constant expression : statements
    ...
    case constant expression : statements
    default : statements
  }
  #+end_example

- *Controlling expression:* an integer expression in parentheses,
  like ~(5)~. Characters are treated as integers in C and cannot be
  tested, so ~('a')~ is not allowed.

- *Case labels:* each case begins with a constant expression, like
  ~Case 5:~ - this is like any other expression except that it
  cannot contain variables or function calls.

- *Statements:* any number of statements. No braces required around
  the statements. The last statement is usually ~break~ to close
  the case.

* Simple example

- In the example code [[switch]], the ~grade~ is set in the variable
  declaration. Depending on the value, a ~case~ is triggered and
  the corresponding statements are executed.

- [X] What is the output of [[switch]] for 5,3,0,-1,0.5?
  #+begin_quote
  | VALUE | OUTPUT        |
  |-------+---------------|
  |     5 | Failing       |
  |     3 | Passing       |
  |     0 | Illegal grade |
  |    -1 | Illegal grade |
  |   0.5 | Illegal grade |
  #+end_quote

- The code:
  #+name: switch
  #+begin_src C :results output :exports both
    int grade = 0.5;
    switch (grade) {
     case 4:
     case 3:
     case 2:
     case 1:
       printf("Passing");
       break;
     case 5:
     case 6:
       printf("Failing");
       break;
     default:
       printf("Illegal grade");
       break;
     }
  #+end_src

  #+RESULTS: switch
  : Illegal grade

- [X] Which problem/solution set does the program implement?
  #+begin_quote
  Answer: The program reflects "passing" grades 4,3,2,1, and "failing"
  grade 0. Any other grade value is not allowed. (This happens to be
  the European grade scale, which is A = 1 to D = 4, and F = 5 or 6.)
  #+end_quote

- You can also put several case labels on the same line as in
  [[switch1]], which is otherwise identical to [[switch]].

  #+name: switch1
  #+begin_src C :results output :exports both
    int grade = 3;

    switch (grade) {
     case 4: case 3: case 2: case 1:
       printf("Passing");
       break;
     case 5: case 6:
       printf("Failing");
       break;
     default: 
       printf("Illegal grade"); 
       break; 
     } 
  #+end_src

- Note: You cannot write a case label for a range of values.

- The default case (when none of the case expressions apply) is
  optional, and it does not have to come last.

* The role of the ~break~ statement

- The ~switch~ statement is a /controlled jump/. The ~case~ label is a
  marker indicating a position within the switch.

- [ ] Let's run the previous program again, without the ~break~
  statements. What do you think the output will be?
  #+name: switch2
  #+begin_src C :results output :exports both
      int grade = 5;

      switch (grade) {
        // cases 4,3,2,1 all lead to a passing grade
       case 4:
       case 3:
       case 2:
       case 1:
         printf("Passing");
       case 5:
       case 6:
         printf("Failing");
       default:
         printf("Illegal grade");
       }
  #+end_src

  #+RESULTS: switch2
  : FailingIllegal grade

- [ ] What happens without the ~break~ statements?
  #+begin_quote
  Answer: When the last statement in a case has been executed,
  control falls through to the first statement in the following
  case; its case label is ignored. Without ~break~ (or some other
  jump statement, like ~return~ or ~goto~, control flows from one
  case to the next.
  #+end_quote

- Deliberate falling through (omission of ~break~) should be
  indicated with an explicit comment.

* Let's practice!

- Open and complete the ~switch.org~ practice file that you downloaded
- Upload the completed file as an assignment to Canvas

* References

- Davenport/Vine (2015) C Programming for the Absolute Beginner
  (3ed). Cengage Learning.
- <<logic>> GVSUmath (Aug 10, 2012). Proving Logical Equivalences
  without Truth Tables [video]. [[https://youtu.be/iPbLzl2kMHA][URL: youtu.be/iPbLzl2kMHA]].
- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]

