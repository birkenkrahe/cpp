#+TITLE: Practicing functions
#+AUTHOR: yourName [pledged]
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output
* README

- Practice workbook for functions in C

* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file by
  your name and save the file (~C-x C-s~).

* TODO ~hello_world~ function

1) The ~hello_world~ function does not have a ~return~ value, and it takes
   no arguments. Complete the code in [[f:hello_world]] so that it compiles
   and runs.

2) Remember that all statements that you want to execute need to be
   contained in the body of the ~main~ function.

   #+name: f:hello_world
   #+begin_src C
     // function definition
     ___ hello_world(___)
     {
       printf("Hello world\n");
     }
     // function call
     hello_world();
   #+end_src

* TODO ~main~ and ~hello_world~

1) Create a complete C program ~hello.c~ *without* tangling an Org-mode
   file[fn:1]. Use GNU Emacs as C source code editor: create the file with
   ~C-x C-f hello.c RET~

2) The file should contain a ~main~ function, the ~hello_world~ function
   definition, and a function call.

3) Compile and run the file on the command line.

* TODO Save a function return value

1) Run the ~average~ function in [[f:avg]] below, save and print its value.

   Sample output:
   #+begin_example
   : The average of 5.1 and 8.9 is: 7
   #+end_example

2) The function is already defined at the top of the code block, and
   two ~double~ values are declared and defined, too.

3) /Tip: remember to declare your variable. Use ~~%g~~ for the output./

   #+name: f:avg
   #+begin_src C
     // function definition
     double average (double a,double b){return (a+b)/2;}

     // Input variable declaration and definition
     double x = 5.1, y = 8.9;

     // Save the average of x and y in a variable avg
     ____
     // Print the variable avg
     ____
   #+end_src

* TODO Write your own function

1) Write a function ~add~ that adds two integer numbers ~num1~ and ~num2~.

2) Call the function ~add~ inside the ~printf~ function for the sample
   arguments ~i=100~ and ~j=200~.

   Sample output:
   #+begin_example
   : 100 + 200 = 300
   #+end_example

   #+name: func:add
   #+begin_src C
     // function definition

     // function call and print

   #+end_src

* TODO Use a simple function

1) Put the definition of ~~add~~ in the code block below.

2) Scan two integers ~100~ and ~200~ as input from an input file.

3) Use the function anywhere inside the body of a ~main~ function, with
   the two input arguments, and print the result.

#+name: useAdd
#+begin_src C :main no :includes :tangle add.c :cmdline < input
  // function definition

  // main function

  // declarations

  // get input

  // print (and compute) result

#+end_src

** Footnotes

[fn:1]If you want to create a code block and tangle it, you need to
add the header arguments ~:main no :includes none~ so that the ~main~ and
~stdio.h~ parts are not automatically included.

