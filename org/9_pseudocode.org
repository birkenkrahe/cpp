#+TITLE: PSEUDOCODE
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ (Spring 2024)
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:nil ^:nil num:nil date:nil author:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :noweb yes :tangle yes
* README

- In this section of the course, we go beyond simple statements and
  turn to program flow and evaluation of logical conditions

- This section follows chapter 3 in Davenport/Vine (2015) and
  chapters 4 and 5 in King (2008)

- Practice workbooks, input files and PDF solution files in GitHub

* Overview

- *Pseudocode* is a method to write down/analyze an /algorithm/ or a
  /heuristic/ without having to bother with /syntax/ (like ~&i~ vs. ~i~)

- The prefix pseudo- comes from Ancient Greek [[https://en.wiktionary.org/wiki/%CF%88%CE%B5%CF%85%CE%B4%CE%AE%CF%82][ψευδής]], meaning
  "lying", "false" or "untrue", as in "pseudoscience" or "pseudonym"

- Pseudocode does not need to compile or run so it is closer to a
  heuristic than to an exact algorithm.

- Code however needs to be exact and is always algorithmic.

- *Always start with pseudocode* before coding, and when you're stuck
  (not because of syntax ignorance) go back to pseudocode.

* Algorithms vs. heuristic - Pólya's problem solving method

The heuristic method à la George Pólya in four steps:
#+attr_latex: :width 400px
[[../img/polya.png]]

See also "How To Solve It" [[https://chat.google.com/room/AAAAIk8SqZE/FgWGE4AC1MQ/FgWGE4AC1MQ?cls=10][in Chat]] for more details:
#+begin_quote
1. *Understanding the problem:*
   - What is the unknown? What are the data?  What is the condition?
     Is it possible to satisfy the condition? Is the condition
     sufficient to determine the unknown? Or is it insufficient? Or
     redundant? Or contradictory?
   - Draw a figure. Introduce suitable notation
   - Separate the various parts of the condition. Can you write them
     down?
2. *Devising a plan:*
   - Have you seen it before? Have you seen the same problem in a
     slightly different form? Do you know a related problem? Do you
     know a theorem or a law or a formula that could be useful?
   - Look at the unknown: Try to think of a familiar problem having
     the same or a similar unknown.
   - If you have a problem related to yours and solved before: could
     you use it? Could you use its result? Could you use its method?
     Should you introduce some auxiliary element in order to make its
     use possible?
   - Could you restate the problem? Could you restate it still
     differently? Go back to the definitions.
   - If you cannot solve the proposed problem try to solve first some
     related problem. Could you imagine a more accessible related
     problem? A more general problem? A more special problem? An
     analogous problem? Could you solve a part of the problem? Keep
     only part of the condition, drop the other part: how far is the
     unknown then determined, how can it vary? Could you derive
     something useful from the data? Could you think of other data
     appropriate to determine the unknown? Could you change the
     unknown or the data, or both if necessary, so that the new
     unknown and the new data are nearer to each other?
   - Did you use all the data? Did you use the whole condition? Have
     you taken into account all essential notions involved in the
     problem?
3. *Carrying out the plan:* Carrying out your plan of the solution,
   check each step. Make sure that you understand each step and its
   consequences. Can you see clearly that the step is correct? Can you
   prove that it is correct?
4. *Looking back:* Can you check the result? Can you check the argument?
   Can you derive the result differently? Can you see it at a glance?
   Can you use the result, or the method, for some other problem?
#+end_quote

* Pseudocode example

- Example: player problem statement in [[problem1]] below:
  #+name: problem1
  #+begin_quote
  "Drink a health potion when a character's health is 100 or
  less. If health reaches 100 or more, resume battle."
  #+end_quote

- Given the problem [[problem1]], this is the pseudocode [[pseudocode1 ]][fn:1]:
  #+name: pseudocode1
  #+begin_example C
  if health is less than 100
    Drink health potion
  else
    Resume battle
  end if
  #+end_example

#+begin_quote
- The code in [[pseudocode1]] would not compile as a C program (you can
  test yourself: which mistakes would the compiler find?[fn:2])

- The conceptual "trick" with generating pseudocode from a prose
  description is to identify the *logical condition* so that you can
  perform a comparison (= apply a *conditional operator*)
#+end_quote

- The pseudocode [[pseudocode1]] leads to the condition ~health < 100~:
  #+name: pseudocode11
  #+begin_example C
  if health < 100
    Drink health potion
  else
    Resume battle
  end if
  #+end_example

#+begin_quote
- Notice that you could also use another operator: ~>=~ This operator
  would have had the same effect but it is not what you were supposed
  to code. How would the pseudocode change with ~health >= 100~?
  #+name: pseudocode12
  #+begin_example C
  if health >= 100
     Resume battle
  else
     Drink health potion
  end if
  #+end_example

- *Rule:* when making models (via *abstraction*), always stay as close to
  the *problem* description as possible - in terms of *language*, *logic*,
  *tone*, etc If you're unsure, *ask* (your client/professor/colleague).
#+end_quote

- In the pseudocode example above, what relates to 1) language, 2)
  logic, and 3) tone? And 4) are there other specifications?[fn:3]

* Let's practice!

Get the practice file [[http://tinyurl.com/pseudo-cpp][tinyurl.com/pseudo-cpp]].

* Footnotes

[fn:1]In Org mode, you can use the language as an example header
argument to enable syntax highlighting. For pseudocode, this will of
course not work perfectly, since most syntax elements are not in C.

[fn:2]Undeclared variable ~health~, missing closure semi-colons after
the statements, functions ~Drink~ and ~Resume~ not known, and more.

[fn:3] 1) Language: words used like ~health~, ~drink~ or ~resume~. 2) Logic:
[[https://ifttt.com/][IFTTT]] (If This Then That) Else That. 3) Tone: game language 'drink
health potion' as function ~drink_health_potion~. 4) The indentation and
the use of ~if else end if~ instead of, e.g. "WHEN health < 100 THEN
drink health potion OTHERWISE resume battle".
