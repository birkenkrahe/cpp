#+TITLE:C++ vs. C
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 / Introduction to programming in C/C++
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:nil ^:nil num:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
#+PROPERTY: header-args:C++ :main yes :exports both :results output :comments both :includes <iostream.h> :includes "c:/Users/birkenkrahe/Documents/GitHub/cc100/10_cpp/header/std_lib_facilities.h" 
* README

- This script introduces the basics of C++ and compares C and C++.

- PDF version of this file available in GitHub.

- This section, including some sample code, is based on Stroustrup
  (2014) and Hansen (2013).

* History

- C++ is a superset of C: constructs that are both C and C++ have
  the same meaning (= semantics) in both languages.

- Notable exception: /character literal/ (the byte size of a
  character constant) in C and C++
  #+name: sizeofAinC
  #+begin_src C

  #+end_src

  #+name: sizeofAinC++
  #+begin_src C++ :includes <iostream> :exports both

  #+end_src

- C++ employs stricter /data type/ checking: the language doesn't quite
  let you get away with as much.

* Sample program: hello world

- It all begins with ~Hello World~, of course. When you tangle this file
  as ~hello.cpp~ you need to use ~g++~ to compile it (part of GCC).
  #+begin_src C++ :tangle hello.cpp :exports both
    #include <iostream>

    int main()
    {
      std::cout << "Hello World!\n";
      return 0;
    }
  #+end_src

- Org-mode requires the ~C++~ header option and ~.cpp~ file extension,
  otherwise everything is as usual:
  #+name: cpp
  #+begin_src C++ :includes <iostream>
    std::cout << "Hello World!\n";
  #+end_src

- Similarities and the differences between C and C++[fn:1]:

  | C               | C++                  | Difference                 |
  |-----------------+----------------------+----------------------------|
  | ~stdio.h~         | ~iostream~             | Header file                |
  |                 | ~std_lib_facilities.h~ |                            |
  | ~printf("...\n);~ | ~cout << "...\n";~     |                            |

- Compilation: the tangled code can be compiled and run using ~g++~
  #+begin_example sh
  $ g++ -o hello.exe hello.cpp
  $ hello
  #+end_example

- ~g++~ is part of ~gcc~ which we've been using all along:
  #+begin_example sh
  ~/Documents/GitHub $ which g++
  c:/Program Files (x86)/mingw-w64/.../bin/g++.exe

  ~/Documents/GitHub $ which gcc
  c:/Program Files (x86)/mingw-w64/.../bin/gcc.exe
  #+end_example

- You can also see that our work with Emacs and Org-mode carries over
  100% to C++. No need to bother with complex development environments
  like VS Code (Microsoft) or IDEs like CodeBlocks - IMHO you'll NEVER
  get the time you invest in these back, and the technology changes
  all the time without you being able to do anything about or with it.

* Sample program: rectangle

- Here is the rectangle program in C++ - we'll look at the details
  below. The pseudocode is identical to the C program.
  #+begin_src C++ :results output
    // *****************************************************
    // Compute and print perimeter and area of a rectangle
    // Input: length and width of a rectangle
    // Output: perimeter and area of the rectangle
    // *****************************************************

    // Include input/output library

    // Use standard namespace

    // Begin main program
    
      // Declare variables
    
      // Print program information
    
      // Set variable values for length and width
    
      // Compute perimeter = 2 * (length + width)
    
      // Compute area = length * width
    
      // Print input and output values
    
      // End main program
  #+end_src

* C++ features that are missing from C

| C++ features         | What to do in C                              |
|----------------------+----------------------------------------------|
| Classes              | use ~struct~ data structure instead            |
| Exceptions           | use error codes, return values               |
| Function overloading | give each function a distinctive name        |
| References           | use pointers                                 |
| ~bool~ data type       | use ~int~                                      |
| namespace            | manage scope of functions, variables, types  |
|                      | (useful for larger projects w/multiple libs)x |

* Variables

- Types of variables / data types
  #+name: tab:types
  | ~int~    | Short for integer; stores whole numbers                                                       |
  | ~char~   | Short for character; stores a single letter, digit, or symbol                                 |
  | ~bool~   | Short for Boolean; stores true or false                                                       |
  | ~float~  | Short for floating point number; stores numbers with fractional parts                         |
  | ~double~ | Short for double precision floating point number; stores bigger numbers with bigger fractions |

- Declaring and initializing variables
  #+begin_src C++ :includes <iostream> :results silent :exports both
    using namespace std;

  #+end_src

* Constants

- Declaring a constant as a /literal/ (non-variable)
  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;

  #+end_src

- The good old =printf= works, too, of course:
  #+begin_src C++ :results output :exports both  :includes <iostream>

  #+end_src

* Assignments

- What do C and C++ do when we try to add an integer to a string?
  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;

  #+end_src

- And what happens in C?
  #+begin_src C :exports both :includes <stdio.h> :main yes    printf("%d\n", bar);

  #+end_src

* Output

- Output in C++ is done with the object ~cout~ ("console output"), which
  prints information to the screen.

- ~<<~ is the /insertion operator/

- ~endl~ (end line) is the equivalent of ~"\n"~

  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;


  #+end_src

- You can pipeline console output:

  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;

  #+end_src

  - You can still use ~\n~:
  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;

  #+end_src

- This makes formatting printout quite easy:
  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;

  #+end_src

* Input

- Generating an input file
  #+begin_src bash

  #+end_src

- To generate input, use the ~cin~ (pronounced 'see-in', "console
  input") object with the extraction operator ~>>~.

  #+begin_src C++ :includes <iostream> :results output :cmdline < ../data/input  :exports both
    using namespace std;

  #+end_src

- "Exception handling": Checking failed input with ~cin.fail~. This
  time, no input was provided.
  #+begin_src C++ :includes <iostream> :results output :exports both
    using namespace std;

  #+end_src

* Other differences:

There are slight differences in all areas we've covered:

| Area       | C                                                     | C++                                                      |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Arithmetic | Supports basic arithmetic operations. Arithmetic is   | Similar basic arithmetic capabilities but supports       |
|            | primarily procedural.                                 | operator overloading, allowing custom behavior for       |
|            |                                                       | arithmetic operations on user-defined types.             |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Comments   | Supports single-line (//) and multi-line (/* */)         | Same as C, no additional comment features distinct       |
|            | comments.                                             | from C.                                                  |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Selection  | Uses if, else if, else, and switch statements         | Uses the same if, else if, else, and switch constructs,  |
|            | for selection.                                        | but with C++17, if and switch can also include           |
|            |                                                       | initializer statements to declare variables within       |
|            |                                                       | the statement.                                           |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Strings    | Handles strings as arrays of chars, managed manually. | Supports both C-style strings and the std::string class, |
|            |                                                       | which offers many utilities for string manipulation.     |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Loops      | Supports for, while, and do-while loops.              | In addition to C-style loops, supports range-based       |
|            |                                                       | for loops (for(auto x : container)) for easier iteration |
|            |                                                       | over containers.                                         |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Arrays     | Primarily handles arrays as a contiguous block of     | Supports C-style arrays and also introduces std::array   |
|            | memory with manual sizing and indexing.               | and std::vector for safer and more flexible arrays       |
|            |                                                       | that can dynamically resize.                             |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Functions  | Supports procedural functions, including function     | Supports all features of C, plus member functions,       |
|            | pointers for dynamic invocation.                      | overloading, and templates for generic programming.      |
|------------+-------------------------------------------------------+----------------------------------------------------------|
| Pointers   | Core feature, used for dynamic memory management,     | Adds smart pointers (std::unique_ptr, std::shared_ptr)   |
|            | arrays, and more. No built-in protection against      | which manage memory automatically and provide            |
|            | misuse.                                               | more safety and convenience.                             |

* Footnotes

[fn:1] Stroustrup (2014) recommends ~std_lib_facilities.h~ instead. You
have to download this file from his site. The hello world program now
runs without having to specify where the ~cout~ function comes from. Yet
another variation declares ~std~ as a ~namespace~ which means we don't
have to explicitly declare it with every use of its functions.
