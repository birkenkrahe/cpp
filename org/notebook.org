#+TITLE: Notebook - Introduction to programming in C++
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:C :main yes :includes <stdio.h> :results output :noweb yes
#+property: header-args:R :results output :noweb yes :session *R* :exports both
* DONE Week 1 - Overview & first C program
#+attr_html: :width 400px
[[../img/cover.png]]

1. [X] *Review:* [[https://forms.gle/pAJgAXjgBzCAqcqY7][Entry Survey]] ([[https://docs.google.com/forms/d/1mXocjlwiBrzM9wQS819rQYttRWoSNIt5eN0OSDUMdJc/edit#settings][Google forms]])
2. [X] *Lecture:* Introduction to the course ([[file:0_overview.org][0_overview.org]])
3. [X] *Practice:* Your first C program.
4. [ ] *Lecture*: Introduction to C/C++ ([[file:1_introduction.org][1_introduction.org]])

TEST YOURSELF (Google Chat)

*Please check in with:*
1) one word related to this course
2) your major (if you already know)
3) your name (so that I can remember it)

** You're not the only one
#+ATTR_HTML: :WIDTH 400px:
#+CAPTION: Source: DALL-E 3
[[../img/no_idea_what_is_going_on.png]]

A student after the last class:
#+begin_quote
*"I think I was the only one who had no idea what was going on"*
#+end_quote

Yeah, right. In your dreams. I saw the blank stares of (almost)
everyone else. The truth: you weren't supposed to understand
anything - the learning doesn't happen when I'm talking but when
you're typing - when you're doing stuff either alongside me in class,
or (better) on your own.

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 400px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** Coming assignments and tests (by 25/26 January)

- Complete your first C program (in Emacs)
- Complete your first 'literate' program
- Complete the Emacs tutorial.
- Upload the Org-mode files.
- Bonus: GitHub Hello World exercise (upload screenshot).
- Test 1 (by Thu 25 Jan)

* DONE Week 2 - Introduction to C & first literate program
#+ATTR_HTML: :WIDTH 400px:
[[../img/first_test.png]]

1. [X] *Lecture*: Introduction to C/C++ ([[file:1_introduction.org][1_introduction.org]])
2. [X] *DYI content*: Installation issues / Emacs / GitHub ([[file:2_install.org][2_install.org]])
3. [X] *Practice*: Your first literate C program ([[file:1_introduction_practice.org][1_introduction_practice.org]])
4. [ ] *Assignment*: Emacs tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.md][tutorial.md]])
5. [ ] *Lecture*: C basics with "hello world" ([[file:3_hello.org][3_hello.org]])
6. [ ] *Practice*: C basics with "hello world" ([[file:3_hello_practice.org][3_hello_practice.org]])

** Sources

- Parts of the introduction are inspired by King, chapter 1 (pp. 1-8).
- Parts of the hello world basics are inspired by King, chapter 2 (9-18).

* DONE Week 3 - C fundamentals & Emacs tutorial
#+ATTR_HTML: :WIDTH 400px:
[[../img/adalovelace.png]]

Victorian lady ([[https://www.computerhistory.org/babbage/adalovelace/][Ada Lovelace]]) coding for [[https://www.computerhistory.org/babbage/charlesbabbage/][Charles Babbage's]] machine.

This week:
1. [X] *Practice*: Your first literate C program ([[file:1_introduction_practice.org][1_introduction_practice.org]])
   - Learn to read error messages.
   - Finish the exercise: tangle, weave, run on CLI, upload to GDrive.
   - Upload it if you haven't done so already.
2. [X] *Assignment*: Emacs tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.md][tutorial.md]])
   - Start Tutorial in class.
   - Finish it at home.
   - Upload result to Canvas.
3. [X] *Lecture*: C basics with "hello world" ([[file:3_hello.org][3_hello.org]]) & handout
4. [X] *Practice*: C basics with "hello world" ([[file:3_hello_practice.org][3_hello_practice.org]]) - solution video!
5. [X] *Handout*: Emacs cheat sheet (1p - 20 commands) ([[https://github.com/birkenkrahe/cc/blob/piHome/pdf/emacs.pdf][GitHub]])
6. [ ] *Programming assignment:* Rectangle ([[https://lyon.instructure.com/courses/2107/assignments/24410][Canvas]])
7. [X] *Handout*: next section "Variables in C" (GitHub).

IMPORTANT: FINISH THE EMACS TUTORIAL (by Sunday night)

ASK FOR MY HELP TO INSTALL EMACS + GCC ON YOUR PC

** First literate C program (continued)
#+ATTR_HTML: :WIDTH 400px:
[[../img/debugging.png]]

- Error 1: The input/output header file is =stdio.h=
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error.png]]

- Error 2: The header argument C is missing! Emacs Org-mode does not recognize the code
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error2.png]]

- Error 3: The statement delimiter (=;=) is missing.
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error3.png]]

- Error 4: You must tangle into a ~.c~ file.
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error4.png]]

- Error 5: Closing quotation marks missing - string is not recognized.
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error5.png]]

** Emacs tutorial
#+ATTR_HTML: :WIDTH 600px:
[[../img/emacs_learning_curve.jpg]]

- We're going to use Emacs to make our C programming life easier.

- But before it gets easier, it gets a little harder.

- This tutorial is meant to teach you Emacs as a text editor:
  [[http://tinyurl.com/EmacsTutorial][tinyurl.com/EmacsTutorial]]

- Open it in GitHub and then let's do it together.

- You will have to finish it on your own and submit the result.

- There are two videos by me covering the tutorial in 1 hour, and a
  bonus video with an advanced tutorial by Derek Banas ([[https://www.youtube.com/playlist?list=PLwgb17bzeNyiUAM_PFME-IiNGvNIOficR][YouTube]]).

** Emacs and gcc home installation
#+ATTR_HTML: :WIDTH 400px:
[[../img/emacs_gcc_installation.png]]

Some of you've got problems installing Emacs/gcc. Emacs should work
out of the box [[https://mirror.fcix.net/gnu/emacs/windows/emacs-27/emacs-27.2-x86_64-installer.exe][from this link]] - you only need to add the =bin/=
directory to the =PATH=, and for gcc, if MSYS2 is too complex for you,
just [[https://www.codeblocks.org/][download Code::Blocks]] - that's an IDE that comes with gcc and
then you have it in the =PATH=. If you cannot make time to meet during
office hours and are in despair, you can hop on a Zoom call with
me. Or you can ask one of those who seem to have succeeded: @Cristian
Del Gobbo @Austin Swaim @Karley Wilson all did this at home, I
believe. I promise: By the end of the week, you'll have forgotten the
nightmare and will be ready for more!

** Hello world - again and again and again
[[../img/helloworld.png]]

- Dissecting "hello world".

- See [[https://github.com/birkenkrahe/cpp/blob/main/org/3_hello.org][lecture]] and [[https://raw.githubusercontent.com/birkenkrahe/cpp/main/org/3_hello_practice.org][practice]] file (tinyurl.com/hello-practice)

- Upload practice file with Emacs:
  1) Open Emacs
  2) Download [[http://tinyurl.com/hello-practice][tinyurl.com/hello-practice]] with ~M-x eww~
  3) Save buffer to ~~/hello-practice.org~ with ~C-x C-w~
  4) Kill current buffer with ~C-x k~
  5) Find practice file with ~C-x C-f~
  6) Open/close all sections with ~SHIFT TAB~.

- Upload completed practice file to [[https://lyon.instructure.com/courses/2107/assignments/23359][Canvas]].

** C fundamentals: variables & planning a program

* DONE Week 4 - Variables & Data types & Format specifiers
#+ATTR_HTML: :WIDTH 400px:
[[../img/midnight_oil.png]]

/Image: burning the midnight oil trying to solve Dr. B's assignments./

- Lecture: [[https://github.com/birkenkrahe/cpp/blob/main/org/4_variables.org][GitHub]]
- Codealong: [[http://tinyurl.com/4-variables-codealong-org][tinyurl.com/4-variables-codealong-org]]
- Practice: [[http://tinyurl.com/4-variables-practice-org][tinyurl.com/4-practice-org]]

** Review: variables, assignment, print formatting, Emacs (chat)

Check your understanding before or after class. Here are 11 questions
on stuff of last week. Some of these may return in a test.

- [ ] What must each variable in C have to specify the data it can hold?
  #+begin_notes
  A type, e.g. =int= or =float= or =char=, so that the memory can be reserved.
  #+end_notes
- [ ] How can multiple variables of the same type be declared in C?
  #+begin_notes
  They can be declared together in one line separated by commas.
  #+end_notes
- [ ] What must happen to variable type declarations in relation to
  statements that use the variables?
  #+begin_notes
  The variable type declarations must precede statements that use the
  variables.
  #+end_notes
- [ ] What does the code block "int height; height = 8;" do?
  #+begin_notes
  Declares an integer variable named height and assigns it the value 8
  #+end_notes
- [ ] How is a floating point value indicated when assigned to a =float=
  variable in C?
  #+begin_notes
  By including a decimal point and the letter f, e.g. ~profit = 200.f;~
  #+end_notes
- [ ] What is unsafe about assigning a =float= to an =int= variable directly?
  #+begin_notes
  Because it can lead to loss of precision, and the compiler won't warn you.
  #+end_notes
- [ ] What is the purpose of the =%d= format specifier in C?
  #+begin_notes
  To print an integer value.
  #+end_notes
- [ ] What is the minimal =printf= statement to print the number ~1~ as an integer?
  #+begin_src C :results output :main yes :includes <stdio.h>
    printf("%d",1); // printing 1 as an integer with %d formatter
    printf("\n");
    printf("%s","1"); // printing "1" as a string with %s formatter
    printf("\n");
    puts("1"); // printing "1" as a string with the puts() function
  #+end_src
- [ ] What do three dots =...= at the end of a line in Emacs Org-mode
  usually mean?
  #+begin_notes
  If on a headline, bullet point or code block header, the section,
  bullet item, or code block will open and close with TAB (toggle).
  #+end_notes
- [ ] How can you run an Emacs Org-mode code block?
  #+begin_notes
  With ~C-c C-c~ (CTRL + c CTRL +c)
  #+end_notes
- [ ] How can you copy, cut and paste in Emacs?
  #+begin_notes
  You can either use the preset keybindings to copy (~M-w~), cut (~C-w~),
  and paste (~C-y~), or you can switch to CUA-mode with (~M-x cua-mode~)
  and use Windows keybindings to copy (~C-c~), cut (~C-x~), and paste
  (~C-v~). In either case, you have to mark a region to work on (~C-SPC~).
  #+end_notes

** Program 1: rectangle properties (Canvas)
#+ATTR_HTML: :WIDTH 600px:
[[../img/programming_is_planning.png]]

- [[https://lyon.instructure.com/courses/2107/assignments/24410][See Canvas for the complete assignment]].

- *When writing programs, the writing comes last.*

- *Planning* the program comes first. This includes:
  1. Plan: Understanding what exactly is required.
  2. Pseudocode: Designing an algorithm with input/output.
  3. Process: Making a process diagram to illustrate the flow.
  4. Program: Coding in one or more languages.

- To illustrate this process see [[https://github.com/birkenkrahe/cpp/blob/main/org/assignments/sample.org][this "Hello, World!" sample]].

- I'll show you quickly how to create BPMN, flow and sequence diagrams
  at bpmn.io and mermaid.live.

** Bonus challenge: Fahrenheit to Celsius conversion (Canvas)
#+ATTR_HTML: :WIDTH 600px:
[[../img/programming_challenge.png]]

- Compute the temperature in degrees Celsius for a given temperature
  in degrees Fahrenheit.

- A complete solution includes:
  1. Plan (5 pt)
  2. Pseudocode (5 pt)
  3. Process (5 pt)
  4. Program (5 pt)

- Submit an Emacs Org-mode file with some or all of these aspects. Use
  Hello World sample file as a template if you like (e.g. to include
  images).

- For this bonus exercise, independence and diligence of execution is
  required and rewarded.

- You'll get my sample solution when you submit your solution.

* DONE Week 5 - Constants
#+attr_html: :width 400px
[[../img/solution_video.png]]

*Pure hack*: For those who'd like to see exercise 4 solved online:
[[http://tinyurl.com/4-practice-org][tinyurl.com/4-practice-org]] - [[https://youtu.be/9YsWCAa9GaQ][the video (37 min) is here]] - I added it
to the playlist for this course. No sound, just hacking.

Plan:
- [X] Lecture: Constants, naming, layout - tinyurl.com/5-codealong-org
- [X] Practice: tinyurl.com/5-practice-org

** Housekeeping

- [X] All lecture materials are in GitHub - you also received a paper
  copy of the script.
- Submit completed codealong and practice files by 23rd February in
  Canvas.
- [X] I will also grade all outstanding submissions & submit early
  alerts!
- [X] I will create and post solution videos for practice 5 (constants)
  and for the programming exercises.
- [ ] I will post next week's programming assignment (regular and
  bonus) over the long weekend.

** Quick review of the week

| *Concept/Code*        | *Example/Comment*          |
|---------------------+--------------------------|
| ~#define~ constants   | #define PI 3.14f         |
| ~const~ constants     | const float PI=3.14f;    |
| math library ~math.h~ | #include <math.h>        |
| naming conventions  | +10_times super-man+       |
|                     | times10  super_man       |
| program layout      | whitespace doesn't count |
|                     | except after keywords &  |
|                     | strings across lines     |

* DONE Week 6 - Printing with printf
#+attr_html: :width 400px:
[[../img/week_6.png]]

- [X] Pop quiz! (ungraded & anonymous)
- [X] Review test stats (data visualization)
- [X] Review programming assignments (feedback)
- [X] Review in-class practice files (feedback)
- [X] Code along lecture & practice: =printf=
- [ ] Code along lecture & practice: =scanf=

** First month of course: stats

- Test 1: overview of computers and programming
  #+attr_html: :width 400px:
  [[../img/test_1.png]]
  #participants = 21

  - Test 2: introduction to C/C++ and first literate program
  #+attr_html: :width 400px:
  [[../img/test_2.png]]
  #participants = 21

  - Test 3: Emacs, literate programming, and variables
  #+attr_html: :width 400px:
  [[../img/test_3.png]]
  #participants = 20

- Summary as boxplot for each test (R code:
  [[http://tinyurl.com/cpp-tests-sp24][tinyurl.com/cpp-tests-sp24]]):
  #+attr_html: :width 400px:
  [[../img/test_1-3_box.png]]

- What do you need to improve your test performance?

- Missed a deadline for a test? Complete it for 50% of the points.

** Assignments feedback
#+attr_html: :width 400px:
[[../img/feedback.png]]

- Overall, I'm impressed with your submissions and performance.
- Please read and consider my comments for improvement.
- Let me know early on if you're worried about your progress.

I apply the following *evaluation criteria*:
- Correctness and completeness of the code and the output.
- Clarity and organization of code comments and documentation within
  the Org-mode file.

** =printf= Practice

- Lecture script [[https://github.com/birkenkrahe/cpp/blob/main/org/6_printf.org][on GitHub]]
- Practice file: [[http://tinyurl.com/6-printf-org][tinyurl.com/6-printf-org]]
- Practice solution for both =printf= and =scanf= ([[https://github.com/birkenkrahe/cpp/blob/main/pdf/6_printf_scanf_practice_solutions.pdf][PDF]])
- Practice solution video ([[https://youtu.be/BTfTfoaUqVQ?si=B8hEkLOcTqQ05wgh][YouTube]])
- If you are done early, start the [[https://lyon.instructure.com/courses/2107/assignments/25268][programming assignment]]!

* DONE Week 7 - Scanning with scanf
#+attr_html: :width 400px:
[[../img/week_7.webp]]

- [X] Deadline: Mastering =printf= is [[https://lyon.instructure.com/courses/2107/assignments/25268][due Wednesday]]!
- [X] Test 4 (=printf= and =scanf= coming end of this week)!
- [X] Code along lecture & practice: =scanf=
- [ ] Code along lecture & practice: C operators

** DONE Fast Fun Review: =printf=

1) What's the general format of the =printf= function?
   #+begin_example C
     printf ( {String} , {Variables} ) ; // String with format specifiers
   #+end_example

   #+begin_src C :main yes :includes <stdio.h> :results output :exports both :noweb yes
     int i = 3;
     //printf("I've got %d", i, "dogs\n");
     printf("I've got %d", i); printf(" dogs\n");
   #+end_src

   #+RESULTS:
   : I've got 3 dogs

2) What's the general format of the format specifier?
   #+begin_example C
     printf ( " %m.pX ", {Variable} );
   #+end_example

   #+begin_src C
     printf ("....|....|....|\n");
     printf ("%-10.5d.\n", 10 ); // integer, 10 fields left, precision 5
     printf (".%10.5f ", 10. ); // float, 10 fields right, precision 5
   #+end_src

   #+RESULTS:
   : ....|....|....|
   : 00010     .
   : .  10.00000

3) How can you display ~10,000~ in scientific format (E-notation)?
   #+begin_src C :main yes :includes <stdio.h> :results output :exports both :noweb yes
     printf("10,000 in E-notation: %e\n", 10000); // warning! 0 output
     printf("10,000 in E-notation: %e\n", 10000.f); // precision issue
     printf("10,000 in E-notation: %.e\n", 10000.f); // picture perfect!
   #+end_src

   #+RESULTS:
   : 10,000 in E-notation: 0.000000e+00
   : 10,000 in E-notation: 1.000000e+04
   : 10,000 in E-notation: 1e+04

4) What's the specialty of the =%g= format specifier?
   #+begin_quote
   - =%g= handles floating-point numbers
   - =%g= automatically selects =%d= or =%f=
   - the case affects the symbol used (=%G= leads to ~E)~
   #+end_quote

   #+begin_src C :main yes :includes <stdio.h> :results output :exports both :noweb yes
     printf("Integer: %g\n", 1000); // %g needs a floating-point number
     printf("Integer: %g\n", 1000.); // %g picks integer format
     printf("Integer: %g\n", 1000000.); // %g picks floating-point format
   #+end_src

   #+RESULTS:
   : Integer: 0
   : Integer: 1000
   : Integer: 1e+06

5) How many numbers can you print in one single =printf= statement?
   #+begin_quote
   As many as you like.
   #+end_quote

   #+begin_src C :main yes :includes <stdio.h> :results output :exports both :noweb yes
     printf("%d\n%f-%.3f\n%g\n%.2e\n%G\n(etc.)\n",
            100,10.,100.,1000.,1000.,1000000.);
   #+end_src

   #+RESULTS:
   : 100
   : 10.000000-100.000
   : 1000
   : 1.00e+03
   : 1E+06
   : (etc.)

** DONE Fast Fun Review: =scanf=

1) What is the general format of the =scanf= argument if the input is just numbers?
   #+begin_example C
     scanf( "{format specifiers}", {reference variables} );
   #+end_example
   #+begin_example
     scanf("%d%f", &i, &x);  // i is integer, x is floating-point variable
   #+end_example
2) What if the input has another form? E.g. a phone number: (870) 307-754
   #+begin_src bash
     echo "(870) 307-7254" > input   # create a file called `input`
     cat input  # checks content of file
   #+end_src

   #+RESULTS:
   : (870) 307-7254

   #+begin_src C :cmdline < input
     int i,j,k;  // declare variables
     scanf("(%d)%d-%d", &i, &j, &k);  // scan exactly in input format
     printf("%d/%d/%d\n", i, j, k);   // print in any format you like
   #+end_src

   #+RESULTS:
   : 870/307/7254
3) How can you get input into a code block?
   #+begin_quote
   With the header argument `cmdline` and the input file `input`:

   #+begin_src C :cmdline < input
   #+end_quote
4) How can you create an input file with numbers from a code block?
   #+begin_quote
   To insert numbers into a file ~input~, enter in a =bash= block:

   #+begin_src bash
     =echo= "1 2 3" > ~input~  # redirect intput into file `input`
   #+end_src
   #+end_quote
5) What do these commands mean: ~ls -l~ and ~cat~ and where do they
   come from?
   #+begin_quote
   They are Linux shell commands that manipulate the file system:
   - ~ls -l~ prints a long listing of all files in the current directory
   - ~echo~ prints anything that follows to the screen
   - ~echo [stuff] > file~ writes `[stuff]` to ~file~
   #+end_quote
6) How can you open a =bash= shell inside Emacs?
   #+begin_quote
   With ~M-x eshell~ - the Emacs shell simulates a Linux shell.
   #+end_quote
   Alternatively, create a `bash` code block:
   #+begin_src bash :results output
     ls -l
   #+end_src

   #+RESULTS:
   #+begin_example
   total 308
   -rw-rw-r-- 1 marcus marcus 16077 Feb  9 07:12 0_overview.org
   -rw-rw-r-- 1 marcus marcus  2775 Feb  9 07:12 0_overview_practice.org
   -rw-rw-r-- 1 marcus marcus 22333 Feb  9 07:12 1_introduction.org
   -rw-rw-r-- 1 marcus marcus  1306 Feb  9 07:12 1_introduction_practice_errors.org
   -rw-rw-r-- 1 marcus marcus  4111 Feb  9 07:12 1_introduction_practice.org
   -rw-rw-r-- 1 marcus marcus 24084 Feb  9 07:12 2_install.org
   -rw-rw-r-- 1 marcus marcus 12007 Feb  9 07:12 3_hello.org
   -rw-rw-r-- 1 marcus marcus  3901 Feb  9 07:12 3_hello_practice.org
   -rw-rw-r-- 1 marcus marcus  3050 Feb  9 07:12 4_variables.C
   -rw-rw-r-- 1 marcus marcus  5605 Feb  9 07:12 4_variables_codealong.org
   -rw-rw-r-- 1 marcus marcus 18194 Feb  9 07:12 4_variables.org
   -rw-rw-r-- 1 marcus marcus  5499 Feb  9 07:12 4_variables_practice.org
   -rw-rw-r-- 1 marcus marcus  6998 Feb 14 10:41 5_constants_codealong.org
   -rw-rw-r-- 1 marcus marcus 22309 Feb 13 22:44 5_constants.org
   -rw-rw-r-- 1 marcus marcus  6016 Feb 16 09:33 5_constants_practice.org
   -rw-rw-r-- 1 marcus marcus  4374 Feb 25 16:59 6_printf.org
   -rw-rw-r-- 1 marcus marcus  2314 Feb 25 11:11 6_printf_practice.org
   -rw-rw-r-- 1 marcus marcus  8180 Feb 26 13:07 7_scanf.org
   -rw-rw-r-- 1 marcus marcus  4525 Feb 28 08:17 7_scanf_practice.org
   drwxrwxr-x 2 marcus marcus  4096 Feb 22 22:52 assignments
   -rw-rw-r-- 1 marcus marcus     1 Feb 27 22:54 empty
   -rw-rw-r-- 1 marcus marcus  3689 Feb  9 07:12 helloEmacs.org
   -rw-rw-r-- 1 marcus marcus    15 Feb 28 09:04 input
   -rw-rw-r-- 1 marcus marcus    17 Feb 25 23:37 input2
   -rwxrwxr-x 1 marcus marcus 16056 Feb 26 13:04 io
   -rw-rw-r-- 1 marcus marcus   158 Feb 26 09:45 io.c
   -rw-rw-r-- 1 marcus marcus    18 Feb 25 23:23 io_scanf_input
   -rw-rw-r-- 1 marcus marcus 23393 Feb 28 09:08 notebook.org
   -rw-rw-r-- 1 marcus marcus   547 Feb  9 15:18 officehours.org
   -rwxrwxr-x 1 marcus marcus 16056 Feb 26 09:47 scanf
   -rw-rw-r-- 1 marcus marcus  8695 Feb  9 07:12 syllabus.org
   -rw-rw-r-- 1 marcus marcus  2847 Feb 20 21:42 tests.org
   #+end_example

** TODO How does =scanf= work?

1) If the format string for =scanf= is ="%d/%d"=, what input is expected?
   #+begin_quote
   - Two variable references, ~&i~ and ~&j~.
   - Input in the format ~i/j~.
   #+end_quote

2) If the format string for =scanf= is ="%d/%d"=, which of these two input
   versions works and why: ~•5•/•96~ and ~•5/•96~ ?
   #+begin_src bash :results silent
     echo " 5 / 96 " > input1   # put string into file input1
     echo " 5/ 96 "  > input2   # put string into file input2
   #+end_src

   #+begin_src C :cmdline <input1
     int i=10, j=20;                // declare

     scanf("%d/%d", &i, &j);        // scan - overwrite i, j

     printf("Input: %d/%d\n",i,j);  // print
   #+end_src

   #+RESULTS:
   : Input: 5/20

   #+begin_src C :cmdline <input2
     int i=10, j=20;                // declare

     scanf("%d/%d", &i, &j);        // scan - overwrite i, j

     printf("Input: %d/%d\n",i,j);  // print
   #+end_src

   #+RESULTS:
   : Input: 5/96

   #+begin_quote
   ~•5•/•96~ - =scanf= reads ~5~ and expects ~/~ immediately but it gets a
   white space instead. It aborts, and never overwrites ~j~.

   ~•5/•96~ - =scanf= reads ~5~ and ~/~ then ~96~ as expected (any number of
   whitespaces after the ~/~ are ignored, and finishes.
   #+end_quote

* DONE Week 8 - C operators
#+attr_html: :width 400px:
[[../img/week_8.webp]]

- [X] Test 4 available / assignments / grading
- [X] Review: =scanf= (bonus exercise in class)
- [X] Code along lecture: C operators

** Test 4 available (deadline Tuesday!)/assignments/grading

/[This was an announcement on [[https://lyon.instructure.com/courses/2107/discussion_topics/10013][Canvas]] and in the [[https://chat.google.com/room/AAAAIk8SqZE/WnkvTa3IkD0/WnkvTa3IkD0?cls=10][chat]]]/

- There's a new [[https://lyon.instructure.com/courses/2107/assignments/22433][test available]] for you to complete by Tuesday 5th
  March. You've got 45 minutes for 15 questions, which should be
  plenty: take your time with it! I'll open the correct answers after
  the deadline.
- I have extended the deadline for the [[https://lyon.instructure.com/courses/2107/assignments/25363][`Mastering scanf]]` programming
  assignment to Friday, 8th March. See my remarks on submission below.
- The upload of the in-class [[https://lyon.instructure.com/courses/2107/assignments/25543][scanf practice file]] is also due Friday
  8th March. There are new videos available in the course [[https://www.youtube.com/playlist?list=PLwgb17bzeNyg7P7LCIpKxBun95Eb_PK4O][playlist]] on
  YouTube.
- Your grade does currently not reflect the bonuses. To do this will
  require some Canvas adjustments behind the scenes. I will do that on
  Wednesday by 12 pm.
- Quite a few of you got messages from me (check them!) to submit
  corrected files for full or for half points. Do it!

Org-mode Submissions: I wasn't too impressed with what most of you
submitted for the `[[https://lyon.instructure.com/courses/2107/assignments/25268][Mastering printf]]` assignment. Please check out my
sample solution file to see how it should've looked like: you can look
at the GitHub [[https://github.com/birkenkrahe/cpp/blob/main/org/assignments/mastering_printf_solution.org][Markdown version]], the [[https://github.com/birkenkrahe/cpp/blob/main/pdf/Mastering%20printf%20in%20C%20-%20Sample%20Solution.pdf][PDF version]], or the [[https://raw.githubusercontent.com/birkenkrahe/cpp/main/org/assignments/mastering_printf_solution.org][Emacs Org-mode
version]] (with visible metadata). You can also look at any of the
practice files to see how it's done.

Here's the rub: coding as such is simple, these programs are almost
trivial. They're only a challenge to you (and to the AI) if you submit
yourself to the discipline of literate programming. This means taking
documentation, planning and reflection seriously and using Org-mode as
an interactive notebook. While in the world of Python and R everyone
does that, it's rare in the world of C and C++ (though this is where
it was born - the first literate program was an [[http://www.literateprogramming.com/adventure.pdf][adventure game]] written
in C).

** A little practical review of =scanf=

1) Open Emacs

2) Create a new file ~scanf_review.org~

3) Add metadata at the top of your file:
   #+begin_example
   #+PROPERTY: header-args:C :tangle scanf.c :main yes :includes <stdio.h>
   #+end_example

4) Refresh local setup: run ~#+PROPERTY~ line with ~C-c C-c~

5) Create C code block with ~<s~

6) In the block, write the following code:
   1. ask to input an integer with =puts=
   2. scan an integer value ~i~
   3. print the scanned value

7) Tangle the code block to a source code file ~scanf.c~ with ~C-c C-v t~

8) Open an Emacs shell with ~M-x eshell~

9) Compile ~scanf.c~ into an executable file ~scanf~

10) Run ~scanf~ with the input ~100~.

#+begin_quote
You can upload a screenshot of your ~scanf_review.org~ and ~*eshell*~
buffers including the compilation, the execution and the result to
Canvas for bonus points.

- The result should look [[http://tinyurl.com/scanf-review][like this]] (screenshot).
- [[https://youtu.be/hGwIz5symtg][Here is a (silent) video]] showing the whole exercise.
#+end_quote

** Review of test 4 - and an appeal to reason
#+attr_html: :width 700px:
[[../img/test_4.png]]

/Figure: Canvas report for test 4 (Mar 5, 11:30 pm)/

- You're still not using the available time: *45 min for 15* questions!
- Improve your mastery of C by *repeating* the tests until you have 100%.
- If your test scores could have been better, write the *final exam*.
- All final exam questions are *known* to you from the tests!

Let's go through the test questions!

Demo for one of the questions:
#+begin_src C
  printf("\"Hello there\" \n");
  printf("Hello there\    \n");
  printf("\\Hello there\\ \n");
  printf("Hello there    \n");
  printf("\"");
#+end_src

#+RESULTS:
: "Hello there"
: Hello there
: \Hello there\
: Hello there
: "

** Remedial logic
*** What is an argument?

Let's watch Monty Python's "[[https://youtu.be/KwsGuZg9EP4?si=uTfoSjsx-YO9E149][Argument Clinic]]" for an example of what's
an argument and what's not.

- So what's an argument?
  #+begin_quote
  An argument is a sequence of *statements* aimed at demonstrating the
  *truth* of an *assertion*.
  #+end_quote
- Example:
  #+begin_quote
  "IF the bell rings, OR the flag drops, THEN the race is over."
  #+end_quote
  #+begin_example
           P          OR         Q       =>        R
  #+end_example
  #+begin_src C
    int P = 0; // 1: bell has rung, 0: bell has not rung
    int Q = 0; // 0: flag has dropped, 0: flag has not dropped
    if (P || Q) {  // check condition P OR Q
      printf("The race is over! (R = %d)\n", P||Q);
     } else {
      printf("The race is not over! (R = %d)\n", P||Q);
     }
  #+end_src

  #+RESULTS:
  : The race is not over! (R = 0)

- Therefore:
  #+begin_quote
  "IF the race is NOT over, THEN the bell has NOT rung, and the flag has NOT dropped.
  #+end_quote
#+begin_example
              NOT R          =>         NOT P           AND           NOT Q
#+end_example
- Mathematical notation:
  $ P \vee Q \Rightarrow R$ and  $\not R \Rightarrow \not P \land \not Q $
- Another example
  #+attr_html: :width 400px:
  [[../img/argument2.png]]

*** What is a statement?
- Definition
  #+begin_quote
  A statement (or proposition) is a sentence that is true or false but
  not both.
  #+end_quote
- Examples: statement or not?
  #+begin_quote
  x + 2 = 4
  #+end_quote


#+begin_quote
2 + 2 = 4
#+end_quote
#+begin_quote
"I feel blue."
#+end_quote
#+begin_quote
"It is raining right now."
#+end_quote

*** Coming bonus assignments: prove De Morgan's Laws in C
#+attr_html: :width 300px:
[[../img/demorgan1.png]]
#+attr_html: :width 300px:
[[../img/demorgan2.png]]

** Review: C operators

1) "You're the man": heuristic or algorithm or neither?
   #+begin_quote
   Neither - statement that could be part of an algorithm but only
   after quantifying "the man".
   #+end_quote
2) "Type twice CTRL + c": heuristic or algorithm or neither?
   #+begin_quote
   Algorithm - input instruction that a machine could carry out.
   #+end_quote
3) "To print a number, use the =print= function"
   #+begin_quote
   Heuristic - instruction that requires additional information
   (e.g. which language?)
   #+end_quote
4) Useful tools when designing an algorithm?
   #+begin_quote
   - Pseudocode (algorithm without syntax, includes input and output)
   - Visual modeling with diagrams (UML, BPMN, flow chart diagram)
   #+end_quote
5) Can you name at least one operator in each category?
   1) Arithmetic
   2) Conditional (Relational/Equality)
   3) Logical
   4) Assignment
   5) Increment/decrement
   #+begin_quote
   1) Arithmetic: =1+1=
   2) Conditional: =a==b=
   3) Logical: =a && b=
   4) Assignment: =i = 1=
   5) Increment/decrement: =++i=
   #+end_quote

* DONE Week 9 - C Operators practice / pseudocode
#+attr_html: :width 400px:
[[../img/collaboration.png]]

** New bonus exercise: prove De Morgan's laws using C ([[https://lyon.instructure.com/courses/2107/assignments/26177][Canvas]])
** Test 4 (C operators) will be available soon - Tips
#+attr_html: :width 600px:
[[../img/test_1-4_box.png]]

/Figure: test results lately haven't been exactly stellar ([[https://github.com/birkenkrahe/cpp/blob/main/org/tests.org][R code]])./

- Use the review sessions in this file ([[https://github.com/birkenkrahe/cpp/blob/main/org/notebook.org][notebook.org]])
- Check out the [[https://github.com/birkenkrahe/cpp/tree/main/org][practice files]] (do you still understand them?)
- Everything is in [[https://github.com/birkenkrahe/cpp][GitHub]], rendered beautifully for you!
- If you test code, use the graphical Emacs rather than ~-nw~

** Housekeeping

Alas, most of you need to resubmit your last assignments!

*** What are Org-mode metadata?

Org-mode metadata like: =#AUTHOR:= at the top of the file, or
=#+BEGIN_SRC C= at the start of a code block, or =#+PROPERTY:= are
interpreted by Emacs. Therefore:

- ~#+HONOR:~ is not a thing - metadata aren't arbitrary:

- Do write ~(pledged)~ next to your name in the ~#+AUTHOR:~ line

*** What's a literate program?

It's an Org-mode file that reads like a notebook, with: metadata,
process documentation, code, output, references etc.

It's not an arbitrary, unnecessarily complicated file format for
(uncommented) C source files.

Literate programs tangle into (compilable) source code and (printable)
documentation because programs should be for humans not machines.

*No documentation* in a literate program is not a thing: if you use
advanced concepts like arrays[fn:1], decaying pointers[fn:2], or
pointer arithmetic[fn:3]. I need to be reassured that you know what
you're doing (and not just the AI). You can only use advanced concepts
like these if you can explain them to me (and in your submission)!

If you forgot (or never knew) what I mean by "documentation", check
out my video "Your first literate C program with Emacs and Org-mode":
screenshot from 17'33'':
#+attr_html: :width 600px:
[[../img/litprog.png]]

*** What is ~//~?

Documentation is not source code: ~//~ is for inline comments in C or
C++ source code, and has no meaning in normal text.

*** What should you submit?

Do append your solutions as a *new section* ~* Solution~ to the problem
file. If you don't have a problem file, create one and put a short
version of the problem in there - for your own reference!

*** Once you've got 0 points on an assignment, is all lost?

No! You can *resubmit* after fixing your errors for full points. I will
not *remind* you individually anymore - just resubmit! If you did not
even submit in the first place, you can resubmit for 50% of the points.

*** If you have no idea what to do - should you give up?

If you're clueless how to solve a problem, *ask for hints*! To begin
with: There are *examples* for all assignments in the practice files.

*** Can you work on assignments together?

Working on assignments together is fine but make sure that you can
solve these simple problems on your own, too. Example phone
conversion: you can arrive at one solution, but then run and test your
personal submission with different phone numbers.

*** How will you know what the correct solution is?

You'll get my sample solutions after all is done. In fact, for past
problems, the solutions for past problems are already in GitHub (as
PDF files, so you still have to get the literate programs right).

** Review C operators

1) What are the basic Boolean operators in C?
   #+begin_example
    NOT  AND  OR
    \not     \land    \lor   (math)
    !     &&   ||  (C)
   #+end_example
2) What's a postfix operator in C?
   #+begin_quote
   Example: =i--= stands for i = i - 1
   #+end_quote
3) What's the difference between =++k= and =k++= if k = 2?
   #+begin_src C
     int k = 2;
     printf("%d\n",++k); // k = k + 1 then print k
     k = 2;
     printf("%d\n",k++); // print k then k = k + 1
   #+end_src

   #+RESULTS:
   : 3
   : 2
4) In which order are =++k=, =k--= and =k+== executed?
   #+begin_src C
     int k = 2, l = 2, m = 2;
     printf("%d\n", ++k); // add 1 from left then print result
     printf("%d\n", l--); // evaluate from left (don't print result)
     printf("%d\n", m+=2); // add two from right: m = m + 2 then print
   #+end_src

   #+RESULTS:
   : 3
   : 2
   : 4
5) What is =!(!1)=?
   #+begin_src C
     if(!(!1)) {
       puts("!(!1) is TRUE");
      } else {
       puts("!(!1) is FALSE");
      }
   #+end_src

   #+RESULTS:
   : !(!1) is TRUE
6) How can you check if ~NOT i~ is equal to ~j~ for ~i=10~ and ~j=0~?
   #+begin_src C
     int i=10, j=0;
     printf("%d\n", !i == j); // Check if NOT i is equal to j

     // i = 10 = TRUE => !i = !10 = !TRUE = FALSE
     // j = 0 = FALSE => i == j <=> FALSE == FALSE => TRUE = 1
   #+end_src

   #+RESULTS:
   : 1

- Let's practice: [[http://tinyurl.com/8-operators-org][tinyurl.com/8-operators-org]]
- Finish at home and submit completed file to [[https://lyon.instructure.com/courses/2107/assignments/26094][Canvas]] (by 3/25)

** Monthly review:

- Printing and scanning in C [same in all high level languages]

- Using operators in C [ same in all high level languages]

- If you know another language (like Python): recreate an assignment!

- Assignments: foundational - arithmetic, printing, scanning, logic

- Tests: up, down, up, down, ...?
  #+attr_html: :width 400px:
  [[../img/test_1-3_box.png]]

  [Check out the code in R: [[http://tinyurl.com/cpp-tests-sp24][tinyurl.com/cpp-tests-sp24]]]

- Bonus content (Chat):
  + [[https://chat.google.com/room/AAAAIk8SqZE/jOmKaX-joqE/jOmKaX-joqE?cls=10][Emacs and literate programming (interactive computing)]]
  + [[https://chat.google.com/room/AAAAIk8SqZE/o1y4mRt3pzM/o1y4mRt3pzM?cls=10][Reasons to memorize rules and code when learning how to code]]
  + [[https://chat.google.com/room/AAAAIk8SqZE/B2JovZaYTic/B2JovZaYTic?cls=10][Advice from the creator of the Python language (written in C)]]
  + [[https://chat.google.com/room/AAAAIk8SqZE/qTNZ171uFqo/qTNZ171uFqo?cls=10][Opinion: can older people learn math? Can younger people?]]
  + [[https://chat.google.com/room/AAAAIk8SqZE/x9cfkOCBJpw/x9cfkOCBJpw?cls=10][Best screencast recorder "simplescreenrecorder" on Linux]]
  + [[https://www.youtube.com/playlist?list=PLwgb17bzeNygGtpZE_8gaWELZPbxfbUiO][Tutorial videos for all (in-class) practice assignments]]
  + [[https://chat.google.com/room/AAAAIk8SqZE/fp53pnK30xs/fp53pnK30xs?cls=10][How to get started with Linux on Windows (WSL)]]
  + [[https://chat.google.com/room/AAAAIk8SqZE/FgWGE4AC1MQ/FgWGE4AC1MQ?cls=10][How to solve it - heuristic problem solving with Pólya.]]

* DONE Week 10 - Process models / Selection statements (if/else)
#+attr_html: :width 400px:
[[../img/week_10.png]]

- Don't forget to upload missing files and bonus assignments.
- There is no class on Friday because of Easter.
- April 5-8 is probably also going to be a long weekend.
- I will record a couple of sessions for you to watch and code along.
- Test 5 is due next Sunday - topic: C operators.
- Home assignments and bonus assignments will be available.
- This week: BPMN process diagrams from pseudocode, =if= and =switch=

* DONE Week 11 - Conditional statements (if...else,switch)
#+attr_html: :width 400px:
#+caption: Easter picture with hackers
[[../img/he_is_risen.jpg]]

- [X] Many of you lost points for lacking documentation:
  1) For full points, resubmit your files with documentation
  2) Documentation not in the code blocks but outside of them

- [X] Made videos for the BPMN exercises (models from pseudocode)

- This week: =if=, =else=, =switch=, & starting with loops (=while=, =do=, =for=)

* DONE Week 12 - Loops - =do ... =while= and =for=
#+attr_html: :width 400px:
[[../img/booking.png]]

*Book appointments with me now!* Especially if you're thinking about
computer and/or data science! Link: [[http://tinyurl.com/booking-fall24][tinyurl.com/booking-fall24]]

*This week:* we finish loops and start with arrays, our first
"interesting" data structures (data without structure = mess)

** Test 6 available until Sunday, April 14

- *New test available* until April 14: Pseudocode, BPMN, selection:
  deadline Sunday April 14, 11:59 pm. 25 questions, 45 minutes:
  + models, pseudocode and BPMN
  + nested and stacked =if= selection statements
  + case selection with =switch=

** Teaching demonstration Wednesday 4 pm in Derby 016

- *Candidate talk:* Wednesday, 10 April at 4 pm in Derby 016
  #+attr_html: :width 200px:
  [[../img/wenhui.png]]

** Fall'24: Data Structures (CSC 240) - Spring'25: Algorithms (CSC 265)

- *Upcoming:* CSC 240 Data Structures with C++ (follow-up course). Adds
  object-orientation, linked lists, stacks, queues, trees, and
  graphs. In every other way like this course: interactive, inspiring,
  and occasionally irritating! Emacs & Org-mode & C++ & Python & Java.
  #+attr_html: :width 200px:
  [[../img/csc240-fall24.png]]

** Review: =while= summing a series of numbers

User enters a series of numbers and wants them summed up.

- Can you remember the pseudocode to solve this problem?
  #+begin_quote
  1. data
  2. input
  3. processing
  4. output
  #+end_quote
  #+begin_example
  // Algorithm: sum a series of integers
  Input: a sequence of integers ending with zero
  Output: the sum of the sequence of integers

  Begin:
     // declare and initialize variables `n` (integer) and `sum`

     // ask for and scan first integer

     // begin loop while scanned integer non-zero
        // add new integer to sum
        // scan integer
     // end loop

     // print result: the sum
  #+end_example

- Could you write the program?
  #+begin_quote
  1. tangle
  2. =stdio.h=
  3. =main=
  4. =int=
  5. =puts=
  6. =scanf=
  7. =while=
  8. ~!=~ ~+=~
  9. =printf=
  10. =return=
  #+end_quote
  #+begin_src C :tangle sum.c
    // declare and initialize variables `n` (integer) and `sum`
    long int n, sum = 0;

    // ask for and scan first integer
    puts("Enter integers separated by space, finish with 0:");
    scanf("%ld",&n);
    // begin loop while scanned integer non-zero
    while ( n != 0 ) {
      // add new integer to sum
      sum += n;
      // scan integer
      scanf("%ld",&n);
     }    // end loop

    // print result: the sum
    printf("\nSum = %ld\n",sum);
  #+end_src

- Recall:
  #+begin_quote
  1. =while= tests a condition to enter the loop body.
  2. If the condition is false (=0=), the body is never entered.
  3. You have to modify the outcome to leave the body (or =break= out)
  #+end_quote

** Review: counting with =while= and with =do= ... =while=

1) Open the practice file to the section "Limits and =top=".

2) Create a code block and (without peeking) write a =do= ... =while= loop
   for two variables ~i=10~ and ~count=0~: inside the loop, ~i~ should count
   down, and ~count~ should count up until ~i~ is zero. After the loop,
   print the final ~count~.

   Pseudocode:
   #+begin_example C
   // initialize i = 10 and count = 0
   do {
      decrease i by one
      increase count by one
      } check if i > 0
   // print count
   #+end_example

   Solution:
   #+begin_src C
     int i = 10, count = 0;
     do {
       i--;
       count++;
      } while (i > 0);
     printf("%d",count);
   #+end_src

   #+RESULTS:
   : 10

3) Now run the loop for the three initial values (~count = 0~):

   1. ~i = 2147483647~

   2. ~i = 2147483648~

   3. ~i = 2147483649~

   Solution:
   #+begin_src C
     long int i = 2147483649;
     long  int count = 0;
     do {
       i--;
       count++;
      } while (i > 0);
     printf("%ld",count);
   #+end_src

   #+RESULTS:
   : 2147483649

4) How can you fix this?
   #+begin_quote
   Answer: change =int= to =long int= and =%d= to =%ld.=
   #+end_quote

5) A solution with our next two structures, =for= loops and arrays:
   #+begin_src C
     long int limit[] = {2147483647,2147483648,2147483649}; // array of 3 elements
     long int count[] = {0};  // empty array

     for (int i = 0; i < 3; i++) {   // `for` loop over array elements
       do {
         limit[i]--;    // count down
         count[i]++;          // count up
       } while (limit[i] > 0);    // check if array element is non-zero
       printf("%ld ",count[i]);   // print final count
      }
   #+end_src

   #+RESULTS:
   : 2147483647 2147483648 2147483649

6) These loops take long enough that you can see how the CPUs are
   stressed with the =top= command (Linux only - in Windows, try
   =ctrl + shift + esc=).
   #+attr_html: :width 600px:
   [[../img/top.png]]

Over the weekend, I'll publish a couple of easy loop exercises.

** Lab: practicing loops with =while=, =do =... =while=, and =for=

Three exercises for class practice:
1) pick any of these to begin with and complete it in class
2) submit one or all of them later for bonus points in Canvas.
3) Use the pseudocode block to document your approach, and the
   "Lessons learnt" block below to record your observations or
   insights (if any).

Exercises as Org-mode file: [[https://tinyurl.com/cpp-loop-lab][tinyurl.com/cpp-loop-lab]]

* DONE Week 13 - Arrays
#+attr_html: :width 400px:
#+caption: What do you do if someone with power over you writes to you personally?
[[../img/week_13.png]]

** Power play
*How should you react if a professor asks you in an email to see him?*
*What if you're working and your boss sends you a text with a question?*

#+begin_quote
When dealing with anyone who has *power* over you:
1) If they send you a message, you must always, without fail, *respond*.
2) If the message contains an order or a suggestion, *obey*.
3) If it includes a Question, *answer*.

You only don't have to respond if the message says "FYI" (For Your
Information) or if the other person writes "You do not need to reply."
#+end_quote

** Loop lab: Understanding a problem before coding it
#+attr_html: :width 200px:
[[../img/factorial.png]]

Detailed breakdown of the factorial program (with =for=), which involves
overwriting the factorial with itself - link to the PDF [[https://chat.google.com/room/AAAAIk8SqZE/ASJbrCNyZ04/ASJbrCNyZ04?cls=10][in the chat]].

** Test preview/review: loops

1) Will these two =for= loops have different outputs?
   #+begin_example C
    for (int i = 0; i < 5; i++) ...
    for (int i = 0; i < 5; ++i) ...
   #+end_example

   #+begin_src C :main yes :includes <stdio.h> :results output :exports both :comments both :tangle yes :noweb yes
     #include <stdio.h>
     int main() {

       for (int i = 0; i < 5; i++) printf("%d ",i);
       puts("");
       for (int i = 0; i < 5; ++i) printf("%d ",i);

       return 0;
     }
   #+end_src

   #+RESULTS:
   : 0 1 2 3 4
   : 0 1 2 3 4

2) What about these two:
   #+begin_example C
   for (int i = 0; i++ < 5; ) printf("%d ",i);
   puts("");
   for (int i = 0; ++i < 5; ) printf("%d ",i);
   #+end_example

   #+begin_src C
     #include <stdio.h>
     int main() {

       for (int i = 0; i++ < 5; ) printf("%d ",i);
       puts("");
       for (int i = 0; ++i < 5; ) printf("%d ",i);

       return 0;
     }
   #+end_src

   #+RESULTS:
   : 1 2 3 4 5
   : 1 2 3 4

3) How does the =do=-=while= statement look like if the loop body is
   empty? Do I still need curly braces?
   #+begin_src C
     int i = 0;
     do {
       //nothing to see here
      } while (i != 0);
   #+end_src

   #+RESULTS:

4) What's wrong with this code:
   #+begin_src C
     for ( int i = 1; i < 100; i++);
     i++;
   #+end_src

   #+RESULTS:

   #+begin_quote
   The variable =i= in the =i++= statement is undeclared. The declaration
   of =i= in the =for= loop is local: it is voided when the loop is left.
   #+end_quote

5) What do all loops have in common?
   #+begin_quote
   An initialization, a testing condition, and a counter change;
   #+end_quote
   #+begin_src C
     int i=0;              // init
     while (i < 4) {       // test
       printf("%d ",i++);  // change
      }
     puts("");
     for (int i=0; i<4; i++)  // init; test; change
       printf("%d ",i);
     puts("");
     int j=0;              // init
     do {
       printf("%d ",j++);  // change
      } while (j < 4);      // test
   #+end_src

6) One of these statements is not like the others. Which one and why?
   #+begin_example
     while ( i < 10 ) { ... }

     for ( ; i < 10; ) { ... }

     do { ... } while ( i < 10 );
   #+end_example
   #+begin_quote
   In the last statement, whatever is between { ... } is executed at
   least once, after which the test i < 10 might fail. In the other
   two cases, it is only executed even once after the test passes.
   #+end_quote

7) How would you write an infinite loop with =while= and with =for=?
   #+begin_example C
   while(1) {
      // this will run forever: test is always TRUE
   }

   for (; ; ;) {
      // this will run forever: no test, no change
   #+end_example

8) How can you always leave an infinite loop?
   #+begin_src C
     while(1) {
       puts("I'll be here forever!");
       break;
      }
     puts("...Pheeew!!!...Saved!");
   #+end_src

   #+RESULTS:
   : I'll be here forever!
   : ...Pheeew!!!...Saved!

9) How would you count down from ~n-1~ to ~0~ using =for=?
   #+begin_src C
     int n = 10;  // upper limit
     for ( int i = n; i >=0; i--)
       printf("%d ",i);
   #+end_src

   #+RESULTS:
   : 10 9 8 7 6 5 4 3 2 1 0

10) What's missing here? I wanted to count up from 1 to 5. Instead the
    loop never finishes and does not print anything. How can you fix it?
    #+begin_example C
      int i = 1;

      while (i < 6)
         printf("%d ",i);
    #+end_example

    #+begin_src C
      int i = 1;

      while (i < 6)
        printf("%d ",i++);
    #+end_src

    #+RESULTS:
    : 1 2 3 4 5

** IN PROGRESS Arrays: declaration, subscripting, iterating

#+begin_quote
"One rather curious thing I have noticed about aesthetic satisfaction
is that our pleasure is significantly enhanced when we accomplish
something with limited tools." Don Knuth, Literate Programming (1992)
#+end_quote

** Review: Array declaration and length

1) What array dimension does a vector have? A number?
   #+begin_quote
   - A vector is a one-dimensional array, e.g. ~a[10]~
   - A number (or 'scalar') is a zero-dimensional array, e.g. ~10~.
   #+end_quote
2) What is the maximum length of an array?
   #+begin_quote
   There is none. The maximum length of anything in C is (usually)
   determined by the available memory on the system. If you exceed
   this memory you get errors like "stack overflow" or "segmentation
   faults".
   #+end_quote
3) What is the available memory on your system?
   #+begin_src bash :results output
     free --giga --human      # available memory on this computer
   #+end_src

   #+RESULTS:
   :                total        used        free      shared  buff/cache   available
   : Mem:            7.7G        2.7G        1.6G        491M        3.4G        4.2G
   : Swap:           2.0G          0B        2.0G

4) How can you initialize a one-dimensional array ~a[30]~ to 100 zero values?
   #+begin_src C
     int a[30]={0};
     for(int i=0;i<30;i++) printf("%d ",a[i]);
   #+end_src

   #+RESULTS:
   : 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

5) In a loop over ~i~, if ~int foo[10] = {1}~ what is the value of ~foo[10]~?
   #+begin_src C
     int foo[10] = {1};
     printf("foo[0] = %d, foo[10] = %d\n",foo[9], foo[10]);
   #+end_src

   #+RESULTS:
   : foo[0] = 0, foo[10] = 1789207040

** Review: Array

1) What's a macro (aka 'preprocessor directive')? Give an example?
   #+begin_src C
     #define PI 3.1452
     #define N  10
   #+end_src

2) How can you use a macro to declare an array?
   #+begin_src C
     #define N 4  // macro defintion
     int arr[N];  // array declaration arr[4]
   #+end_src

3) You want to print an array ~arr[N]~ for N=4. What's the error in the
   following code? Can you fix it?
   #+begin_src C
     #define N 4
     int arr[N];
     // print the elements of arr[N]
     for (int i=0;i<N;i++) printf("%d ",arr[N]);
   #+end_src

   #+RESULTS:
   : -1857983159 32765 100 0 

   #+begin_quote
   Answer: ~arr[N]~ becomes ~arr[4]~, which is printed (but not the other
   elements: ~arr[0]~, ~arr[1]~, ~arr[2]~, and ~arr[3]~. 
   #+end_quote

4) How can you initialize the array ~arr[N]~ to 0?
   #+begin_src C
     #define N 4
     int arr[N] = {0};   // initialize array to 0
     for (int i=0;i<N;i++) printf("%d ",arr[i]);
   #+end_src

   #+RESULTS:
   : 0 0 0 0 

5) Can you initialize ~arr[N]~ (for N=4) to 5 4 3 2 1 with a =for= loop?
   #+begin_src C
     #define N 4
     int arr[N];
     for (int i = 5; i > 0; i--) {
       arr[i] = i;
       printf("%d ",arr[i]);
      }
   #+end_src

   #+RESULTS:
   : 5 4 3 2 1 

6) What does this code do?
   #+begin_src C
     int f[10];   // declare array of 10 elements
     f[0] = 1;    // initialize first element
     f[1] = 1;    // initialize second element

     for (int i = 2; i < 10; i++) {
       f[i] = f[i-2] + f[i-1];
      }

     for (int i = 0; i < 10; i++) printf("%d ", f[i]);
   #+end_src

   #+RESULTS:
   : 1 1 2 3 5 8 13 21 34 55 
   
   #+begin_quote
   The code generates the first 10 Fibonacci numbers.
   #+end_quote

** Code along: reversing numbers

- Open Emacs

- Create a new practice file (=C-x C-f ~/practice.org=)

- At the top, enter the code:
  #+begin_example
  #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output
  #+STARTUP: outline hideblocks indent
  #+end_example

- Create a headline with
  #+begin_example org
  * Reversing numeric array
   #+end_example

- Create a new C code block with =<s TAB C=.

- Code along with me to solve the following problem:

  1) Declare an array with 4 integer elements

  2) Initialize the array with 4 numbers and print it.

  3) Reverse the numbers by looping over the array in reverse order.

  4) Generalize the solution from 4 -> N

* NEXT Week 14 - Multidimensional arrays & functions
#+attr_html: :width 400px: 
[[../img/functions.png]]

** DONE Shameless plug! Picking fall courses: Where to go from here

- Computer science: take *CSC 240 "Datastructures in C++"*. The course
  continues where this one ended, and leads to CSC 265 "Algorithms".

- Data science: take *DSC 105 "Introduction to data science"* in
  Python. This is a completely new course (used to be in R).

- Interested in psychology, art, exercise science, biology,
  etc. consider *DSC 302 "Data visualization"* (with R = easy).

- Everybody else: keep in mind what you learnt about "computational
  thinking" and the programming approach to problem solving.

** DONE [[https://lyon.instructure.com/courses/2107/assignments/27026][Bonus assignment: height in light-years reloaded]]
** DONE Program 8 (Fibonacci numbers) is live until next Sunday
** DONE Multidimensional arrays and the =sizeof= operator

- You already have the practice file. Complete it on your own and
  submit it for points (by May 8).

- In class continue with the ~arrays.org~ practice file that you created
  last week.

- If you don't have it anymore - here is a template for download:
  [[https://tinyurl.com/cpp-practice-org][tinyurl.com/cpp-practice-org]] - save it as ~arrays.org~ and code
  along!

** NEXT Test 8 (arrays) live from today until Friday

10 questions only - half of the questions are TRUE/FALSE

** TODO You can upload your in-class practice file to Canvas

- The background for this practice file is in the lecture on GitHub on
  arrays.
- To simplify things, you just code alongside me in class using a bare
  bones practice file.
- You can download a practice template file from
  tinyurl.com/cpp-practice-org
- Save the template as an Org-mode file (arrays.org) and complete it
  as seen in class.
- If you missed the class or if your file is incomplete, please watch
  the Zoom recording and code along then.
- Submit your practice file in Canvas for points.

** TODO Finally! Functions! Freedom from repetition!

- Use the template [[https://tinyurl.com/cpp-practice-org][tinyurl.com/cpp-practice-org]] and save it as a new
  practice file ~functions.org~
- Code along with me and upload your practice file to Canvas when we
  move on to pointers.
- There is also a practice file in GitHub for you
  [[https://tinyurl.com/cpp-functions-practice][tinyurl.com/cpp-functions-practice]] - you can submit this to me for
  bonus points at any time (via email).

** TODO Extended example: Finding the minimum in an array

- We'll solve a [[https://dmoj.ca/problem/lkp18c2p1][programming competition]] problem in three steps.

- First step: determine the minimum value of an array (from scratch)

- Second step: moving the code into a helper function

- Third step: iterating over the array with repeated function calls

* Week 15 - Pointers and pointer arrays
* Week 16 - From C to C++ - =enum= and =structx=

* Footnotes

[fn:1]An "array" is a C data structure that can hold more than one
number or character, e.g. ~int phone[9]~ can hole 10 integers. Example:
#+begin_src C
  int phone[3]={870,424,5678};
  printf("(%d) %d-%d\n",phone[0],phone[1],phone[2]);
#+end_src

#+RESULTS:
: (870) 424-5678

[fn:2]In C, an array "decays" to a pointer to its first element.
E.g. ~phone~ is equivalent to ~&phone[0]~: both represent the address of
the first element in the ~phone[]~ array:
#+begin_src C
  int phone[3]={870,424,5678};
  printf("%p references %d\n",&phone[0], *phone);
#+end_src

#+RESULTS:
: 0x7ffecb90ec4c references 870

[fn:3]When you perform "pointer arithmetic" you adjust the pointer by
that many elements of the type the pointer points to. Example: ~phone+2~
#+begin_src C
  int phone[3]={870,424,5678};

  // pointer values = addresses of phone[0] and phone[1]
  printf("%p %p\n", phone, phone + 1 );
  // dereferenced values of phone[0]1 and phone[1]
  printf("%d %d\n", *phone, *(phone + 1));
  // addresses = references to phone[0] and phone[1]
  printf("%p %p\n", &phone[0], &phone[1]);
#+end_src

#+RESULTS:
: 0x7ffe8741495c 0x7ffe87414960
: 870 424
: 0x7ffe8741495c 0x7ffe87414960
