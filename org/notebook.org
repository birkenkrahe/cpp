#+TITLE: Notebook - Introduction to programming in C++
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:C :main yes :includes <stdio.h> :results output :noweb yes
#+property: header-args:R :results output :noweb yes :session *R* :exports both
* DONE Week 1 - Overview & first C program
#+attr_html: :width 400px
[[../img/cover.png]]

1. [X] *Review:* [[https://forms.gle/pAJgAXjgBzCAqcqY7][Entry Survey]] ([[https://docs.google.com/forms/d/1mXocjlwiBrzM9wQS819rQYttRWoSNIt5eN0OSDUMdJc/edit#settings][Google forms]])
2. [X] *Lecture:* Introduction to the course ([[file:0_overview.org][0_overview.org]])
3. [X] *Practice:* Your first C program.
4. [ ] *Lecture*: Introduction to C/C++ ([[file:1_introduction.org][1_introduction.org]]) 

TEST YOURSELF (Google Chat)

*Please check in with:*
1) one word related to this course
2) your major (if you already know)
3) your name (so that I can remember it)
   
** You're not the only one
#+ATTR_HTML: :WIDTH 400px:
#+CAPTION: Source: DALL-E 3
[[../img/no_idea_what_is_going_on.png]]

A student after the last class:
#+begin_quote
*"I think I was the only one who had no idea what was going on"*
#+end_quote

Yeah, right. In your dreams. I saw the blank stares of (almost)
everyone else. The truth: you weren't supposed to understand
anything - the learning doesn't happen when I'm talking but when
you're typing - when you're doing stuff either alongside me in class,
or (better) on your own.

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 400px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** Coming assignments and tests (by 25/26 January)

- Complete your first C program (in Emacs)
- Complete your first 'literate' program
- Complete the Emacs tutorial.
- Upload the Org-mode files.
- Bonus: GitHub Hello World exercise (upload screenshot).
- Test 1 (by Thu 25 Jan) 
  
* DONE Week 2 - Introduction to C & first literate program 
#+ATTR_HTML: :WIDTH 400px:
[[../img/first_test.png]]

1. [X] *Lecture*: Introduction to C/C++ ([[file:1_introduction.org][1_introduction.org]]) 
2. [X] *DYI content*: Installation issues / Emacs / GitHub ([[file:2_install.org][2_install.org]])
3. [X] *Practice*: Your first literate C program ([[file:1_introduction_practice.org][1_introduction_practice.org]])
4. [ ] *Assignment*: Emacs tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.md][tutorial.md]])
5. [ ] *Lecture*: C basics with "hello world" ([[file:3_hello.org][3_hello.org]])
6. [ ] *Practice*: C basics with "hello world" ([[file:3_hello_practice.org][3_hello_practice.org]])

** Sources

- Parts of the introduction are inspired by King, chapter 1 (pp. 1-8).
- Parts of the hello world basics are inspired by King, chapter 2 (9-18).

* DONE Week 3 - C fundamentals & Emacs tutorial
#+ATTR_HTML: :WIDTH 400px: 
[[../img/adalovelace.png]]

Victorian lady ([[https://www.computerhistory.org/babbage/adalovelace/][Ada Lovelace]]) coding for [[https://www.computerhistory.org/babbage/charlesbabbage/][Charles Babbage's]] machine.

This week:
1. [X] *Practice*: Your first literate C program ([[file:1_introduction_practice.org][1_introduction_practice.org]])
   - Learn to read error messages.
   - Finish the exercise: tangle, weave, run on CLI, upload to GDrive.
   - Upload it if you haven't done so already.
2. [X] *Assignment*: Emacs tutorial ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutorial.md][tutorial.md]])
   - Start Tutorial in class.
   - Finish it at home.
   - Upload result to Canvas.
3. [X] *Lecture*: C basics with "hello world" ([[file:3_hello.org][3_hello.org]]) & handout
4. [X] *Practice*: C basics with "hello world" ([[file:3_hello_practice.org][3_hello_practice.org]]) - solution video!
5. [X] *Handout*: Emacs cheat sheet (1p - 20 commands) ([[https://github.com/birkenkrahe/cc/blob/piHome/pdf/emacs.pdf][GitHub]])
6. [ ] *Programming assignment:* Rectangle ([[https://lyon.instructure.com/courses/2107/assignments/24410][Canvas]])
7. [X] *Handout*: next section "Variables in C" (GitHub).

IMPORTANT: FINISH THE EMACS TUTORIAL (by Sunday night)

ASK FOR MY HELP TO INSTALL EMACS + GCC ON YOUR PC

** First literate C program (continued)
#+ATTR_HTML: :WIDTH 400px: 
[[../img/debugging.png]]

- Error 1: The input/output header file is =stdio.h= 
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error.png]]
  
- Error 2: The header argument C is missing! Emacs Org-mode does not recognize the code
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error2.png]]

- Error 3: The statement delimiter (=;=) is missing.
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error3.png]]

- Error 4: You must tangle into a ~.c~ file.
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error4.png]]
  
- Error 5: Closing quotation marks missing - string is not recognized.
  #+ATTR_HTML: :WIDTH 700px:
  [[../img/1_introduction_practice_error5.png]]

** Emacs tutorial
#+ATTR_HTML: :WIDTH 600px:
[[../img/emacs_learning_curve.jpg]]

- We're going to use Emacs to make our C programming life easier.

- But before it gets easier, it gets a little harder.

- This tutorial is meant to teach you Emacs as a text editor:
  [[http://tinyurl.com/EmacsTutorial][tinyurl.com/EmacsTutorial]]

- Open it in GitHub and then let's do it together.

- You will have to finish it on your own and submit the result.

- There are two videos by me covering the tutorial in 1 hour, and a
  bonus video with an advanced tutorial by Derek Banas ([[https://www.youtube.com/playlist?list=PLwgb17bzeNyiUAM_PFME-IiNGvNIOficR][YouTube]]).

** Emacs and gcc home installation
#+ATTR_HTML: :WIDTH 400px:
[[../img/emacs_gcc_installation.png]]

Some of you've got problems installing Emacs/gcc. Emacs should work
out of the box [[https://mirror.fcix.net/gnu/emacs/windows/emacs-27/emacs-27.2-x86_64-installer.exe][from this link]] - you only need to add the =bin/=
directory to the =PATH=, and for gcc, if MSYS2 is too complex for you,
just [[https://www.codeblocks.org/][download Code::Blocks]] - that's an IDE that comes with gcc and
then you have it in the =PATH=. If you cannot make time to meet during
office hours and are in despair, you can hop on a Zoom call with
me. Or you can ask one of those who seem to have succeeded: @Cristian
Del Gobbo @Austin Swaim @Karley Wilson all did this at home, I
believe. I promise: By the end of the week, you'll have forgotten the
nightmare and will be ready for more!

** Hello world - again and again and again
[[../img/helloworld.png]]

- Dissecting "hello world".

- See [[https://github.com/birkenkrahe/cpp/blob/main/org/3_hello.org][lecture]] and [[https://raw.githubusercontent.com/birkenkrahe/cpp/main/org/3_hello_practice.org][practice]] file (tinyurl.com/hello-practice)

- Upload practice file with Emacs:
  1) Open Emacs
  2) Download [[http://tinyurl.com/hello-practice][tinyurl.com/hello-practice]] with ~M-x eww~
  3) Save buffer to ~~/hello-practice.org~ with ~C-x C-w~
  4) Kill current buffer with ~C-x k~
  5) Find practice file with ~C-x C-f~
  6) Open/close all sections with ~SHIFT TAB~.

- Upload completed practice file to [[https://lyon.instructure.com/courses/2107/assignments/23359][Canvas]].

** C fundamentals: variables & planning a program

* Week 4 - Variables & Constants
#+ATTR_HTML: :WIDTH 400px:
[[../img/midnight_oil.png]]

/Image: burning the midnight oil./

** TODO Review: variables, assignment, print formatting

- [ ] What must each variable in C have to specify the data it can hold?
  #+begin_notes
  A type, e.g. =int= or =float= or =char=, so that the memory can be reserved.
  #+end_notes
- [ ] How can multiple variables of the same type be declared in C?
  #+begin_notes
  They can be declared together in one line separated by commas.
  #+end_notes
- [ ] What must happen to variable type declarations in relation to
  statements that use the variables?
  #+begin_notes
  The variable type declarations must precede statements that use the
  variables.
  #+end_notes
- [ ] What does the code block "int height; height = 8;" do?
  #+begin_notes
  Declares an integer variable named height and assigns it the value 8
  #+end_notes
- [ ] How is a floating point value indicated when assigned to a =float=
  variable in C?
  #+begin_notes
  By including a decimal point and the letter f, e.g. ~profit = 200.f;~
  #+end_notes
- [ ] What is unsafe about assigning a =float= to an =int= variable directly?
  #+begin_notes
  Because it can lead to loss of precision, and the compiler won't warn you.
  #+end_notes
- [ ] What is the purpose of the =%d= format specifier in C?
  #+begin_notes
  To print an integer value.
  #+end_notes
- [ ] What is the minimal =printf= statement to print the number ~1~ as an integer?
  #+begin_src C :results output :main yes :includes <stdio.h>
    printf("%d",1); // printing 1 as an integer with %d formatter
    printf("\n");
    printf("%s","1"); // printing "1" as a string with %s formatter
    printf("\n");
    puts("1"); // printing "1" as a string with the puts() function
  #+end_src
- [ ] What do three dots =...= at the end of a line in Emacs Org-mode
  usually mean?
  #+begin_notes
  If on a headline, bullet point or code block header, the section,
  bullet item, or code block will open and close with TAB (toggle).
  #+end_notes
- [ ] How can you run an Emacs Org-mode code block?
  #+begin_notes
  With ~C-c C-c~ (CTRL + c CTRL +c)
  #+end_notes

** TODO Program 1: rectangle properties
#+ATTR_HTML: :WIDTH 600px:
[[../img/programming_is_planning.png]]

- [[https://lyon.instructure.com/courses/2107/assignments/24410][See Canvas for the complete assignment]].

- *When writing programs, the writing comes last.*

- *Planning* the program comes first. This includes:
  1. Plan: Understanding what exactly is required.
  2. Pseudocode: Designing an algorithm with input/output.
  3. Process: Making a process diagram to illustrate the flow.
  4. Program: Coding in one or more languages.

- To illustrate this process see [[https://github.com/birkenkrahe/cpp/blob/main/org/assignments/sample.org][this "Hello, World!" sample]].

- I'll show you quickly how to create BPMN, flow and sequence diagrams
  at bpmn.io and mermaid.live.

** TODO Bonus challenge: Fahrenheit to Celsius conversion (Canvas)
#+ATTR_HTML: :WIDTH 600px:
[[../img/programming_challenge.png]]

- Compute the temperature in degrees Celsius for a given temperature
  in degrees Fahrenheit.

- A complete solution includes:
  1. Plan (10 pt)
  2. Pseudocode (10 pt)
  3. Process (10 pt)
  4. Program (10 pt)

- Submit an Emacs Org-mode file with some or all of these aspects. Use
  Hello World sample file as a template if you like (e.g. to include
  images).

- For this bonus exercise, independence and diligence of execution is
  required and rewarded.

- You'll get my sample solution when you submit your solution.


* Week 5 - Selection
* Week 6 - Loops
* Week 7 - Basic types
* Week 8 - Arrays
* Week 9 - Functions
* Week 10 - Pointers
* Week 11 - Pointers and arrays
* Week 12 - Strings
* Week 13 - The preprocessor
* Week 14 - Structs, Unions and Enum
* Week 15 - Advanced Pointers
* Week 16 - From C to C++
