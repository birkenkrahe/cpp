#+TITLE:C FUNDAMENTALS - CONSTANTS/INPUT/NAMES/LAYOUT
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ Spring 2024
#+DATE: Time-stamp: <2024-02-13 18:40:43 birkenkrahe>
#+STARTUP: overview hideblocks indent inlineimages
#+OPTIONS: toc:1 ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output
* README

- This script summarizes and adds to the treatment by King (2008),
  chapter 2, C Fundamentals - see also [[https://docs.google.com/presentation/d/14qvh00aVb_R09_hrQY0EDEK_JLAkgZ0S/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][slides (GDrive)]].

- To *code along during the lecture* using Emacs and Org-mode,
  1. download *the raw file* [[http://tinyurl.com/5-codealong-org][from GitHub]]: [[http://tinyurl.com/5-codealong-org][tinyurl.com/5-codealong-org]]
  2. save it as ~5-codealong.org~ and open it to code alongside me.

- There is a separate Org-mode file available for *practice after the
  lecture, at [[http://tinyurl.com/5-practice-org][tinyurl.com/5-practice-org]].
  
* Constants
#+attr_latex: :width 400px
[[../img/5_rock.jpg]]

- Constants are values that do not change (ever?)
- In C, you can define them with: macros, libraries, or as ~const~ type
- They have different degrees of permanency

* Macro definition with ~#define~

- If you don't want a value to change, you can define a
  ~constant~. There are different ways of doing that.

- The code below shows a declarative constant definition for the
  pre-processor that blindly substitutes the value everywhere in the
  program. This is also called a *macro definition*[fn:1].
  #+begin_src C
    #define PI 3.141593
    printf("PI is %f\n",PI);
  #+end_src

- Can you see what mistake I made in the next code block?[fn:2]
  #+begin_example C
    #define PI = 3.141593
    printf("PI is %f\n", PI);
  #+end_example

- Can you see what went wrong in the next code block? If you don't
  see it at once, check the compiler error output!
  #+begin_example C
    #define PI 3.141593;
    printf("PI is %f\n", PI);
  #+end_example

- It's easy to make mistakes with user-defined constants. For one
  thing, "constants" declared with ~#define~ can be redefined (so they
  aren't really constant at all).

- The next program demonstrates how a constant declared with ~#define~
  can be redefined later with a second ~#define~ declaration.
  #+begin_src C :exports both :results output
    #define WERT 1.0
    printf("Constant is %.2f\n", WERT);

    #define WERT 2.0
    printf("Constant is %.2f\n", WERT);
  #+end_src

- However, ~gcc~ is warning us about it!

* Library definitions with ~#include~

- Since mathematical constants are so important in scientific
  computing, there is a library that contains them, ~math.h~.

- Below, it is included at the start to give us the value of Pi as the
  constant ~M_PI~ with much greater precision than before[fn:3]:
  #+begin_src C
    #include <stdio.h>
    #include <math.h>
    int main(void) {
      printf("PI is %f\n", M_PI);
      printf("PI is %.16f\n", M_PI);
      return 0;
    }
  #+end_src

- Do you remember what happens if your precision ~p~ is greater than the
  precision delivered by the computer?[fn:4]

- You can redefine the value of any constant using ~#define~:  
  #+begin_src C
    #include <stdio.h>
    #include <math.h>
    #define ... M_PI   // from now on, M_PI is called ...
    int main(void) {
      printf("PI is %f\n", ...);
      printf("PI is %.16f\n", ...);
      return 0;
    }
  #+end_src

- Inside Emacs with Org-mode, you can include the math header file
  ~math.h~ as a code block header argument (then you don't have to
  include it explicitly in your code block):
  #+begin_src C :includes <stdio.h> <math.h>
    printf("PI is %f\n",M_PI);
    printf("PI is %.16f\n",M_PI);
  #+end_src

- Here is more information on [[https://www.w3schools.in/c-tutorial/c-header-files/][C header files]] and on how ~#include~
  works. This online tutorial isn't half bad by the way, if you can
  ignore the flood of ads.

- In Linux, ~math.h~ and the other header files sit in
  ~/usr/include/~. The screenshot shows the math constant section of
  ~math.h~.
  #+attr_latex: :width 500px
  #+caption: Mathematical constants in /usr/include/math.h
  [[../img/5_math.png]]

- Where is ~math.h~ in Windows[fn:5]? Where in MacOS? Find the
  file, open and look at it in Emacs (the file is read-only).

- In the file, look for ~M_PI~ (using the incremental search ~C-s~). You
  also find the definition of the Euler number e there[fn:22].

- Use it in a ~#define~ statement to define ~e~ and print ~e~ with 16-digit
  precision, including 15 decimal places:
  #+begin_src C
    #include <math.h>
    #define e M_E
    printf("%.15f\n", e);
  #+end_src

- It may be that you can do better than that on your computer (mine
  begins to make numbers up after that even though the constant is
  defined to a higher accuracy)[fn:23].

* Type definition with ~const~

- Modern C has the ~const~ identifier to protect constants. In the code,
  ~double~ is a higher precision floating point number type.
  #+begin_src C
    const double TAXRATE_CONST = 0.175f;
    double revenue = 200.0f;
    double tax;

    tax = revenue * TAXRATE_CONST;

    printf("Tax on revenue %.2f is %.2f", revenue, tax);
  #+end_src

- What happens if you try to redefine the constant ~TAXRATE_CONST~ after
  the type declaration?

- Modify the previous code block by adding ~TAXRATE_CONST = 0.2f~ before
  the ~tax~ is computed, and run it:
  #+begin_src C :results silent
    const double TAXRATE_CONST = 0.175f;
    double revenue = 200.0f;
    double tax;

    TAXRATE_CONST = 0.2f;
    tax = revenue * TAXRATE_CONST;

    printf("Tax on revenue %.2f is %.2f", revenue, tax);
  #+end_src

* Reading input

- Before you can print output with ~printf~, you need to tell the
  computer, which format it should prepare for.

- Just like ~printf~, the input function ~scanf~ needs to know what
  format the input data will come in, otherwise it will print
  nonsense (or rather, memory fragments from God knows where).

- The following statement reads an ~int~ value and stores it in the
  variable ~i~. The input comes from the file ~./data/input~ [fn:6].
  #+begin_src C :tangle iscan.c :cmdline < input
    int i;
    puts("Enter an integer!");
    scanf("%d", &i);  // note the strange symbol &i
    printf("You entered %d\n", i);
  #+end_src

- To input a floating-point (~float~) variable, you need to specify
  the format with ~%f~ *both* in the ~scanf~ *and* in the ~printf~
  statement. We'll learn more about format specifiers soon.

- To see how input works on the command line, *tangle* the code above as
  ~scanf.c~ (add ~:tangle scan.c~ in the code block header), and run the
  file on the command line: ~C-u C-c C-v t~
  #+begin_example sh
  gcc scan.c -o iscan   ## compiles source code to executable
  iscan < input  ## feed input to the executable
  #+end_example

* Naming conventions

- Use upper case letters for CONSTANTS
  #+begin_src C :results silent
    const double TAXRATE;
  #+end_src

- Use lower case letters for variables
  #+begin_src C :results silent
    int tax;
  #+end_src

- Use lower case letters for function names
  #+begin_example C
    hello();
  #+end_example

- If names consist of more than one word, separate with ~_~ or
  insert capital letters:
  #+begin_example C
    hello_world();
    helloWorld();  // this is C++ style "camelCase"
  #+end_example

- Name according to function! In the next code block, both functions
  are identical from the point of view of the compiler, but one can be
  understood, the other one cannot.
  #+begin_src C :results silent
    const int SERVICE_CHARGE;
    int v;

    int myfunc(int z) {
      int t;
      t = z + v;
      return t;
    }

    int calculate_grand_total(int subtotal) {
      int grand_total;
      grand_total = subtotal + SERVICE_CHARGE;
      return grand_total;
    }
  #+end_src

* Naming rules

- What about rules? The compiler will tell you if one of your names
  is a mistake! However, why waste the time, and the rules are
  interesting, too, at least syntactically, to a nerd.

- Names are sensitive towards spelling and capitalization:
  ~helloWorld~ is different from ~HELLOWORLD~ or
  ~Helloworld~. Confusingly, you could use all three in the same
  program, and the compiler would distinguish them.

- Names cannot begin with a number, and they may not contain
  dashes/minus signs. These are all illegal:
  #+begin_example C
    10times  get-net-char
  #+end_example
  These are good:
  #+begin_example C
    times10    get_next_char
  #+end_example

- There is no limit to the length of an identifier, so this name,
  presumably by a German programmer, is okay:
  #+begin_example C
  Voreingenommenheit_bedeutet_bias_auf_Deutsch  // allowed crazy German identifier
  #+end_example

- The keywords in the table have special significance to the
  compiler and cannot be used as identifiers:
  #+name: tab:keywords
  | auto       | enum    | restrict | unsigned | break  | extern   |
  | return     | void    | case     | float    | short  | volatile |
  | char       | for     | signed   | while    | const  | goto     |
  | sizeof     | _Bool   | continue | if       | static | _Complex |
  | _Imaginary | default | union    | struct   | do     | int      |
  | switch     | double  | long     | typedef  | else   | register |

- Your turn: name some illegal identifiers and see what the compiler
  says!
  #+begin_src C :results silent
    int void = 1;
    float float = 3.14;
  #+end_src

- If Windows complains about the app, close the screen dialog to see the debugger:
  #+attr_latex: :width 400px
  #+caption: Windows screen dialog
  [[../img/5_windows.png]]
  #+attr_latex: :width 400px
  #+caption: Org-babel error output buffer
  [[../img/5_debug.png]]

* Program Layout

- You can think of a program statement as a series of tokens[fn:7]:
  #+begin_example
   printf ( "Height: %d\n"   ,   height )  ;
     1    2        3         2     5    6  7
  #+end_example
  #+name: tab:tokens
  |   | TOKEN          | MEANING                              |
  |---+----------------+--------------------------------------|
  | 1 | identifier     | protected C keyword  (function)      |
  | 2 | punctuation    | function call begins                 |
  | 3 | string literal | text + formatting + escape character |
  | 4 | punctuation    | separator                            |
  | 5 | identifier     | integer variable                     |
  | 6 | punctuation    | function call ends                   |
  | 7 | punctuation    | statement closure                    |

- You can have any amount of white (empty) space between program
  tokens (this is not so for all programming languages[fn:8]).

- As an example, here is a version of ~dweight.c~ that works just as
  well, on one line, with almost all whitespace deleted. Only in one
  place, the space is needed. Can you see where?
  #+begin_src C
    int height,length,width,volume,weight;height=8;length=12;width=10;volume=height*length*width;weight=(volume+165)/166;printf("Dimensions: %dx%dx%d\n",length,width,height);printf("Volume (cubic inches): %d\n",volume);printf("Dimensional weight (pounds): %d\n",weight);
  #+end_src

- Another exception are the preprocessor directives (beginning with
  ~#~): they need to be on a line of their own[fn:9].
  #+begin_src C :results silent
    #include <stdio.h>
    #define  CONSTANT 5
  #+end_src

- You can divide statements over any number of lines as long as you
  don't divide keywords or tokens. This works:
  #+begin_src C
    int
    height
    = 5
      ;
    printf
    (
     "height %d\n" ,
     height)
    ;
  #+end_src
- But this does not:
  #+begin_example C
    int
    hei ght
    = 5
      ;
    print f
    (
     "height
     %d\n" ,
     height)
      ;
  #+end_example
  1) The variable ~height~ is not declared
  2) The ~printf~ function is not recognized
  3) The string literal is not complete

- Good practice:
  + Space between tokens makes identification easier
  + Indentation makes nesting easier to spot
  + Blank lines can divide a program into logical units

- Practice: improve the layout of this program then run it:
  #+begin_src C :tangle src/layout.c :results output
    int var1=1;int var2;var2=
                          var1
                          ,*100;
    printf (      "Variable1=%d,variable2=%d\n",
                  var1,

                  var2
                  );
  #+end_src

* Let's practice!

Download the raw Org-mode practice file, complete the second batch
of exercises, then upload the completed file to Canvas:

1) Defining constants
2) Standard math library
3) Reading input with ~scanf~
4) Naming identifiers
5) Program layout

#+attr_latex: :width 300px
[[../img/3_practice1.gif]]

* Summary

- C programs must be compiled and linked
- Programs consist of directives, functions, and statements
- C directives begin with a hash mark (~#~)
- C statements end with a semicolon (~;~)
- C functions begin and end with parentheses ~{~ and ~}~
- C programs should be readable
- Input and output has to be formatted correctly

* Code summary

| CODE                        | EXPLANATION                         |
|-----------------------------+-------------------------------------|
| ~#include~                    | directive to include other programs |
| ~stdio.h~                     | standard input/output header file   |
| ~main(int argc, char **argv)~ | main function with two arguments    |
| ~return~                      | statement (successful completion)   |
| ~void~                        | empty argument - no value           |
| ~printf~                      | printing function                   |
| ~\n~                          | escape character (new-line)         |
| ~/* ... */~  ~//...~            | comments                            |
| ~scanf~                       | input pattern function              |
| ~main(void)~                  | main function without argument      |

* Glossary

| CONCEPT          | EXPLANATION                                               |
|------------------+-----------------------------------------------------------|
| Compiler         | translates source code to object code                     |
| Linker           | translates object code to machine code                    |
| Syntax           | language rules                                            |
| Debugger         | checks syntax                                             |
| Directive        | starts with ~#~, one line only, no delimiter                |
| Preprocessor     | processes directives                                      |
| Statement        | command to be executed, e.g. ~return~                       |
| Delimiter        | ends a statement (in C: semicolon - ;)                    |
| Function         | a rule to compute something with arguments                |
| String           | Sequence of /character/ values like ~hello~                   |
| String literal   | Unchangeable, like the numbe ~8~ or the string ~hello~        |
| Constant         | Set value that is not changed                             |
| Variable         | A named memory placeholder for a value, e.g. ~int i~        |
| Data type        | A memory storage instruction like ~int~ for integer         |
| Comment          | Region of code that is not executed                       |
| Format specifier | Formatting symbol like ~%d%~ or ~%f%~                         |
| Data type        | Tells the computer to reserve memory,                     |
|                  | e.g. ~int~ for integer numbers                              |
| Type declaration | Combination of type and variable name - e.g. ~int height;~  |
| ~int~              | C type for integer numbers, e.g. 2                        |
| ~float~            | C type for floating point numbers, e.g. 3.14              |
| ~char~             | C type for characters, like "joey"                        |
| Formatting       | Tells the computer how to print, e.g. ~%d~ for ~int~ types    |
| ~%d~               | Format for integers                                       |
| ~%f~ and ~%.pf~      | Format for floating point numbers                         |
|                  | (with ~p~ digits after the point)                           |
| ~#define~          | Define a constant with the preprocessor,                  |
|                  | e.g. ~#define PI 3.14~                                      |
| ~math.h~           | Math library, contains mathematical constants & functions |
| ~stdio.h~          | Input/Output library, enables ~printf~ and ~scanf~            |
| ~const~            | Constant identifier, e.g. ~const double PI = 3.14;~         |

* References

- Collingbourne (2019). The Little Book of C (Rev. 1.2). Dark Neon.

- King (2008). C Programming. Norton. [[http://knking.com/books/c2/index.html][URL: knking.com]].

* Footnotes

[fn:23]This is due to inherent limitations of floating-point
representation (IEEE 754 standard): double precision numbes use 64
bits of storage, with 52 bits for the fraction (mantissa), 11 bits for
the exponent, and 1 bit for the sign - this allows for 15 to 17 bits
of precision.

[fn:22] Want to know more about this peculiar number ~e~ that occurs in
  beautiful formulas like "Euler's identity" ($e^i\pi + 1 = 0$? See
  [[https://youtu.be/m2MIpDrF7Es?si=P6Jffc_ImUo7RKQE][3Blue1Brown]] (2017). I added it to our [[https://www.youtube.com/playlist?list=PLwgb17bzeNyg7P7LCIpKxBun95Eb_PK4O][class YouTube channel]].

[fn:1]As an aside, "Emacs" was originally named EMACS as an akronym
for "Editor MACroS" because of its extensibility through macros - the
word comes from the Greek meaning "large" or "prominent", as in
"macroscopic" or "macro economy".

[fn:2]Answer: Instead of "~3.141593~", the expression "~= 3.141593~" is
substituted for ~PI~ everywhere - the program will not compile.

[fn:3]In the tangled ~.C~ file, you can see that this ~#include~
statement is inside the ~main~ bracketed area!

[fn:4]If the formatting precision that you ask for is greater than
the precision of the stored constant, the computer will simply make
digits up (which is not good).

[fn:5]If you installed the MinGW compiler (GCC for Windows), look for
it in the MinGW directory - there's an ~/include~ subdirectory that
contains many header/library files ~.h~. If you have Cygwin, you'll find
it in ~c:/Cygwin/usr/include/~. If you have MSYS2, look in
~C:\msys64\usr\include~.

[fn:6]Alas, you cannot enter input in an Org-mode file
interactively. You either have to tangle the code and compile/run it
on the command line, or redirect the input using the ~:cmdline < file~
header argument, where ~file~ contains the input.

[fn:7]The tokenization is an important sub-process of natural language
processing, a data science discipline that is responsible for language
assistants like Siri, robotic calls, auto-coding and machine
translation (like Google translate), and bots like ChatGPT.

[fn:8]Python e.g. is white-space sensitive: the indentation level is
significant, it denotes code blocks, and needs to be consistent. The
same goes for Org-mode markdown and code blocks.

[fn:9]The ~<..>~ brackets indicate that the file in between the
brackets can be found in the system ~PATH~. If a local file is included,
use double apostrophes ~".."~.

[fn:10]165/166 is 0.9939759, so we've just messed with the actual
volume.

[fn:11]
#+begin_quote
"Cargo space has physical limits based on the volume of the cargo and
the weight. The reason why both volume & weight are evaluated can be
better understood if you consider the cost of shipping a large object
with less weight.

For example, a large box containing styrofoam cups weighs very less,
i.e., the dimensional (volume) weight of that box will likely be more
than its actual weight. It is for this reason that most airlines and
other transport providers evaluate both dimensional weight & actual
weight, and then use the greater of the two weights to bill you for
the transportation costs. The greater of the two weights is also
commonly referred to as ‘chargeable weight’." (UniRelo 2020)
#+end_quote

[fn:12][[https://www.geeksforgeeks.org/puts-vs-printf-for-printing-a-string/][See here]] for a comparison of ~printf()~ vs. ~puts()~.

[fn:13] Answer: (1) memory allocation for four integer variables; (2)
assignments for four variables; (3) multiplication of three integers.

[fn:14]The declaration must precede the use of the variable.

[fn:15]Assignment is variable use. Variable types must be declared
before they can be used.

[fn:16]In the C99 standard, declarations don't have to come before
statements.

[fn:17]If you always want to have line numbers and highlight the line
under the cursor, put these lines in your ~.emacs~ file: and restart
Emacs:
#+begin_example emacs-lisp
  ;; always display line numbers
  (global-display-line-numbers-mode)
  ;; enable global highlighting
  (global-hl-line-mode 1)
#+end_example

[fn:18]You can find different [[https://emacsthemes.com/][themes for GNU Emacs]] here, and install
them using ~M-x package-list-packages~. To see the differences, enter
~M-x custom-themes~ and pick another theme now. You can save it
automatically for future sessions.

[fn:19][[https://replit.com][replit.com]] is an online Read-Eval-Print-Loop (REPL) that looks
like a Linux installation (in fact, it is a so-called Docker
container, an emulated, customized Linux installation). When
registering (for free) you can use many different programming
languages - here is a [[https://replit.com/@birkenkrahe/DiscreteDearObjectdatabase#main.c][link to my container]].

[fn:20]Executables are the result of compilation for a specific
computer architecture and OS. The ~.exe~ program was compiled for
Windows, the ~.out~ program was compiled for Linux. They will only run
on these OS.

[fn:21] In our case, instead of weaving TeX files (~.tex~) to print, we
weave Markdown files (~.md~), or WORD (~*.odt~) files, or we dispense with
the weaving altogether because Org-mode files (equivalent of the ~*.w~
or "web" files) look fine on GitHub.  GitHub.
