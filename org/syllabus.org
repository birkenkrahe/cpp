#+TITLE:CSC 100.01 - Introduction to Programming, Spring 2024 Syllabus
#+AUTHOR: Marcus Birkenkrahe
#+options: toc:nil
#+startup: overview indent
* General Course Information

- Meeting Times: Monday/Wednesday/Friday, 9:00-9:50 AM
- Meeting place: Lyon Building Room 104 (computer lab)
- Professor: Marcus Birkenkrahe
- Office: Derby Science Building 210
- Phone: (870) 307-7254 (office) / (501) 422-4725 (private)
- Office hours: MonWedFri 10-10:50 am & 3-3.50 pm, Tue-Thu 4.15-4.45
  pm & by appointment
- Textbook: Malik DS, C++ Programming: Program Design including Data
  Structures (8e), [[https://www.cengage.com/c/c-programming-8e-malik/9781337117562/][Cengage 2018]] ([[https://www.amazon.com/Programming-Program-Design-Including-Structures/dp/1337117560][Amazon]]: New from $83.87 - Dec 2023).
  This is also the textbook for [[https://catalog.lyon.edu/computer-science/csc-240][CSC 240 Data Structures with C++]] (Fall
  2024).
- See also other books used for this course:
  1) Oualline S, Practical C++ (2e), [[https://www.oreilly.com/library/view/practical-c-programming/0596004192/][O'Reilly 2002]],
  2) Stroustrup B, Programming - Principles and Practice Using C++,
     Addison Wesley 2014. See also [[https://www.stroustrup.com/programming.html][Author's website]].
  3) Haephrasti M and R, Learning C++, [[https://www.manning.com/books/learning-c-plus-plus][Manning 2024]].
  
* Standard and course policies

*Standard Lyon College Policies* are incorporated into this syllabus
and can be found at: [[http://www.lyon.edu/standard-course-policies][lyon.edu/standard-course-policies]].

The *Assignments and Honor Code* and the *Attendance Policy* are
incorporated into this syllabus also and can be found at:
[[https://tinyurl.com/LyonPolicy][tinyurl.com/LyonPolicy]].

* Objectives

This course introduces you to programming using C++20. You also learn
about: compilers, working on the command line, text editors Emacs,
using C for Internet of Things (IoT) devices, cybersecurity, using
pseudocode and process modeling. You get a foundation in critical
thinking in concert with one of the three currently most popular
languages (the other two, according to the TIOBE index at the time of
writing in October 2023, are Python and C, a subset of C++). You’ll
learn some great tools: we use the “hacker’s editor” Emacs, the
world’s foremost software engineering platform, GitHub, and BPMN for
process modeling and pseudo code generation.

* Student Learning Outcomes

Students who complete CSC 100.01 "Introduction to programming in C++",
will be able to:

- Master basic sequential programming skills (conditional
  statements, loops, functions, input/output, use of data types)
- Explain the basic components of a procedural programming language
- Apply the basics of programming to solve a variety of quantitative
  problems
- Master computing infrastructure (compiler, editor, shell)
- Research and present a project as a team
- Know how to effectively present assignment results
- Be ready for "Data stuctures with C++" (CSC 240)
- Get ready for "Algorithms" (CSC 265)
- Improve their data literacy skills

* Course requirements / prerequisites

- MTH 110 College algebra or permission from the instructor
- No prior programming or computing knowledge required
- Experience with computers is useful but not critical
- Curiosity is essential, and willingness to try new things!

* Grading system

You should be able to see your current grade at any time using the
Canvas gradebook for the course.

| WHEN    | DESCRIPTION             | IMPACT |
|---------+-------------------------+--------|
| Weekly  | Programming assignments |    25% |
| Weekly  | Multiple choice tests   |    25% |
| Weekly  | Participation (class)   |    25% |
| TBD     | Final exam (optional)   |    25% |

Notes:
- To pass: 60% of all available points.
- Participation in class: most of the class will be code-alongs. You
  have to submit your Emacs Org-mode notebook at the end of the week.
- Tests: weekly online quizzes, which are previewed and reviewed in
  class.
- Final exam: selection of the most challenging weekly quiz questions.
- You only have to write the final exam if you want to improve your
  grade at the end of the course. If the final exam result is below
  your final grade average up to this point, it will be ignored.

* Grading table

This table is used to convert completion rates into letter grades. for
the midterm results, letter grades still carry signs, while for the
term results, only straight letters are given (by rounding up). This
table is also used in Canvas to compute your grades. Transitions
between letter grades are rounded (e.g. 89.5% to 90%).

|------------------+------------------|
| Percentage       | LETTER GRADE*    |
|------------------+------------------|
| 100% to 89.5%    | A (very good)    |
|------------------+------------------|
| < 89.5% to 79.5% | B (good)         |
|------------------+------------------|
| < 79.5% to 69.5% | C (satisfactory) |
|------------------+------------------|
| < 69.5% to 59.5% | D (passed)       |
|------------------+------------------|
| < 59.5% to 0%    | F (FAILED)       |
|------------------+------------------|

* Schedule and session content

For *important dates*, see the 2023-2024 Academic Calendar at:
[[https://catalog.lyon.edu/202324-academic-calendar][catalog.lyon.edu/202324-academic-calendar]].

No class on: Monday 19 Feb (Mental-Health Monday) - Monday 18,
Wednesday 20, Friday 22 March (Spring break) - Friday 29 March (Easter
break).

| Week | Topic                                       | Activities                                                                                                |
|------+---------------------------------------------+-----------------------------------------------------------------------------------------------------------|
|    1 | Overview of Computers & Programming         | Discuss history of computers, hardware & software basics, language of computer, programming methodologies |
|    2 | Basic Elements of C++                       | Explore C++ program structure, data types, expressions, and input/output statements                       |
|    3 | Input/Output & Basic Control Structures     | Learn about I/O streams, formatting output, selection structures in C++                                   |
|    4 | Control Structures I (Selection)            | Deep dive into if, if...else structures, logical operators, and switch structures                         |
|    5 | Control Structures II (Repetition)          | Study while, for, and do...while loops, break and continue statements                                     |
|    6 | User-Defined Functions                      | Learn about predefined and user-defined functions, value-returning functions, and void functions          |
|    7 | User-Defined Simple Data Types & Namespaces | Explore enumeration types, namespaces, and string type in C++                                             |
|    8 | Arrays and Strings                          | Study arrays, accessing array components, processing one-dimensional arrays, and C-Strings                |
|    9 | Arrays and Strings (Continued)              | Delve into two- and multi-dimensional arrays, arrays of strings, and the string type                      |
|   10 | Records (Structs)                           | Learn about structs, accessing struct members, arrays in structs, and structs within structs              |
|   11 | Classes and Data Abstraction                | Introduction to classes, accessing class members, member functions, and constructors                      |
|   12 | Classes and Data Abstraction (Continued)    | Study destructors, data abstraction, inline functions, and static members of a class                      |
|   13 | Comprehensive Review and Advanced Topics    | Comprehensive review of previous chapters and introduction to advanced topics                             |
|   14 | Special Topics in C++                       | Cover special topics and advanced features in C++                                                         |
|   15 | Advanced Programming Concepts               | Delve deeper into advanced programming concepts and techniques in C++                                     |
|   16 | Final Review and Exam Preparation           | Final review of course material, exam preparation, and practice tests                                     |

*Workload:* approx. 4-5 hours per week.
1. Class time = 16 * 3 * 50/60 = 40 hours
2. Tests (home) = 15 * .5 = 7.5 hours
3. Programming assignments: 15 * 1 = 15 hrs (approx)
4. Reading assignments (not graded): 15 * 1 = 15 hrs (approx)

