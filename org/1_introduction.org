#+TITLE: Introduction to C and C++
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ Spring 2024
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY:header-args:C :results output
#+PROPERTY:header-args:C++ :results output
#+OPTIONS: toc:1
#+OPTIONS:hideblocks
* What will you learn?

- What is C?
- What is its origin?
- What is its importance?
- What's the difference to C++?
- Why are we not just learning C++?
- What are C's strengths and weaknesses?
- First 'literate' C program and Emacs + Org-mode

Source:
- Textbook King (2008) ch.1[fn:1]
- See also [[https://docs.google.com/presentation/d/16jVt1LYw_an7na_Ex0bz8l2uySJtydBK/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][slides (GDrive)]]

* What is C?

- C is a programming language created in the early 1970s.
- It grew out of the development of the UNIX operating system
- In turn, UNIX grew out of a space travel game (Brock, 2019).

#+caption: Thompson & Ritchie & DEC PDP-11, 1970. (Brock, 2019)
#+attr_latex: :width 400px
[[../img/1_unix.png]]

* How popular is C?

- C consistently ranks among the top 3 programming languages.
- TIOBE Language of the year 2008, 2017, 2019
- Highest position since 2001: #1 in Sep 2021
- Lowest position since 2001: #2 in Jan 2024
#+caption: TIOBE Index for C, 2002-2023 (Source: TIOBE)
#+attr_latex: :width 400px
[[../img/1_tiobe.png]]

- Popularity contest: cp. [[https://www.tiobe.com/tiobe-index/][TIOBE Index]][fn:2]

#+caption: TIOBE Index ranking 1-10 (tiobe.com), January 2024
#+attr_latex: :width 400px
_[[../img/1_tiobe2.png]]

- Of the top 10 languages, only SQL (databases), and Assembly
  (machine) language are not C-type languages!

#+caption: IEEE index - by (Source: Cass, 2023)
#+attr_latex: :width 400px
[[../img/1_ieee1.png]]

#+begin_quote
"Python alone does not make a career. In our “Jobs” ranking, it is SQL
that shines at No. 1. Ironically though, you’re very unlikely to get
a job as a pure SQL programmer. Instead, employers love, love, love,
seeing SQL skills in tandem with some other language such as Java or
C++." (Cass, 2023)
#+end_quote

* How important is C?

#+caption: Real world applications of C (Source: DataFlair)
#+attr_latex: :width 400px
[[../img/1_usage1.png]]

Some well-known programs written in C:
- The Linux kernel (and therefore, Android - 40%)
- UNIX operating system (core of MacOS and iOS - 25%)
- Windows operating system (core of most PCs - 30%)
- Doom (early video game) and Wolfenstein 3D
- Git version control system
- C compilers (Clang, GCC/MinGW)
- Interpreted languages like Python
- Any software that crosses platforms easily (portable)
- Software for the Curiosity Mars rover and most space apps

See also:
1) "Why C programming is awesome" ([[https://youtu.be/smGalmxPVYc][Hawkes, 2016]]).
   #+begin_notes
   Video summary:
   1. Basis of most modern programming languages like Java, C#, C++, Python etc.
   2. Use in high performance embedded systems like the Curiosity Rover on Mars.
   3. Language for kernel development (manager for the operating system).
   4. Writing code in C requires you managing your own memory.
   5. In the process you find out how a computer really works.
   6. C is in high demand for jobs
   7. C is portable (runs everywhere) and efficient (runs fast)
   #+end_notes

* What is a programming language?

#+begin_quote
"A programming language is a /formal language/ comprising of a set of
/strings/ that produce various kinds of /machine code/ output. Programming
languages are one kind of computer language, and are used in computer
programming to implement algorithms." (Source: [[https://en.wikipedia.org/wiki/Programming_language][Wikipedia]])
#+end_quote

- *Formal* language?
- Set of *strings*?
- *Machine* code?
- *Algorithm*?

Fortunately, computer (and data) science isn't really a science at all!

(It's more of a craft like mining, knitting, or pottering.)

#+caption: [Scientific] fields arranged by "purity" (xkcd)
#+attr_latex: :width 400px
[[../img/1_purity.png]]

In the xkcd cartoon, computer (and data) science do not even figure,
because they're so interdisciplinary (the opposite of "pure"). Still,
there is a lot of "pure" mathematics, physics and even biology that
plays a role in computer science (and programming).

* Where does C come from?

#+caption: "K&R" (Kernighan/Ritchie, 1978)
#+attr_latex: :width 200px
[[../img/1_kr.png]]

- By-product of the UNIX operating system 1969 [fn:3]
- Developed on DEC PDP-7 (computer with 8K words of main memory[fn:4])
- Written originally in assembly language
- UNIX rewritten in C by 1973 for [[https://en.wikipedia.org/wiki/PDP-11][DEC PDP-11]]
- Standardization of C, 1973-2018

See also "C Programming Language (Brian Kernighan)" ([[https://youtu.be/G1-wse8nsxY?si=Dx_csT2ms64wqF3A][Lex Fridman,
2020]])
#+begin_notes
1. Why did C survive, and why did it have such a long-lasting impact?
   - Expressiveness (natural to use), efficiency (fast, small),
     environment (Unix)
2. What did it take to write the definitive book on C? (Popular and standardizing)
   - In 1977 there were many Unix systems and no authoritative document
   - Book included a crystal-clear reference manual
   - Find examples that might hang together
3. What do you find powerful about examples?
   - It'll tell you how to do something
   - It'll help you do something similar but perhaps more ambitious
   - Many examples were picked for Unix' text processing problems: "read input, write output"
   - Find things that are representative of what people want to do (in core form)
#+end_notes

* Standardization

#+caption: How standards proliferate (Source: xkcd)
#+attr_latex: :width 400px
[[../img/1_standards.png]]

Details: see [[https://blog.ansi.org/2018/11/c-language-standard-iso-iec-9899-2018-c18/#gref][ANSI]] (American National Standards Institute)

#+begin_notes
Sometimes, standardization goes awry. For example, Python 3 was not
"backwards compatible" with Python 2.7, R seems split in a "Tidyverse"
and a "base R" community.
#+end_notes

* How computers work (hardware)
#+caption: Computer architecture (simplified)
#+attr_latex: :width 400px
[[../img/1_infrastructure.png]]

(a) CPU + RAM + Non-Volatile Memory (NVM)

- Central Processing Unit: very, very fast. General purpose (like
  Intel Core, AMD Ryzen or Apple M-series); embedded CPUs (on
  microcontrollers); server CPUs (Intel XEON, AMD's EPYC).

- GPUs are workhorses for parallel computing that usually run
  alongside a CPU (e.g. for fast scientific or graphics
  calculations). An example for AI is Google's TPU (Tensor Processing
  Unit) designed specifically for neural network machine learning.

- Secondary storage (non-volatile memory, NVM): very, very slow. Much
  too slow for the CPU. NVM can be a hard disk, or a Solid State Drive
  (SSD) - it doesn't disappear when the power goes off (by way of
  permanent magnetic fields).
  
b) Main memory (Random Access Memory): fast enough for the
  CPU. Organized as a "stack" of memory addresses. All programs must
  be loaded into memory before they can be executed. In C, you can
  access memory cells directly through the "pointer" data structure.

* How programs are created and processed (software)
** Simplified process

1) *WRITE* source code in an editor (NVM = harddisk)
2) *COMPILE* source code to machine code (RAM = memory)
3) *RUN* program (CPU = Central Processing Unit)
4) *DISPLAY* results (RAM = Memory)
5) *SAVE* result (NVM = harddisk)

** Complete process

Specifically for C and our compiler GCC, this process looks
technically like this:

#+caption: GCC compilation process (Source: Hock-Chuan, 2018).
#+attr_latex: :width 400px
[[../img/1_gcc.png]]

* Strengths and weaknesses of C

| STRENGTH              | WEAKNESS                     |
|-----------------------+------------------------------|
| Efficiency            | Permissiveness (Error-prone) |
| Portability           | Terseness and Understanding  |
| Power                 | Large program maintenance    |
| Flexibility           |                              |
| Standard library      |                              |
| Integration with UNIX |                              |

- Efficiency: do a lot with little effort (small programs)
- Portability: it works everywhere, on anything
- "Power": you can do brain surgery with a pencil
- Flexbility: you can do the same thing in many different ways
- "Standard library": pre-defined functions/tasks; "stdio.h", a
  standard library for "I/O" (Input/output)
- Integration with UNIX (because UNIX is the motherlobe)

* What is the difference between C and C++?

C++ is a superset of C.

#+caption: C/C++ logos
#+attr_latex: :width 400px
[[../img/1_ccpp.png]]

| WHAT | C                      | C++                |
|------+------------------------+--------------------|
| TIME | Thompson/Ritchie 1970s | Stroustrup 1980s   |
| TYPE | Imperative procedural  | Object-oriented    |
| GOOD | System programming     | Games and graphics |
| USED | Internet of Things     | Flight Software    |

Source: Lemonaki, 2021.

* Why are we not just learning C++?

- Object-orientation is a difficult paradigm (C++).
- System programming is pure power (C).
- C is simpler, smaller, and faster.
- C has 35 keywords, C++ has 95.

* Practice: 'Hello world' program in C++

To round this section off, let's repeat our last practice exercise
with C++ instead of C, using =notepad= and the =g++= compiler:

1. Implement the following program (replace "your name" by your name:
   #+begin_src C++ :results output :tangle c:/Users/birkenkrahe/hello1.cpp
     // Hello world program in C++
     // By [your name] (pledged)
     #include <iostream>

     /* print hello world message
        a first C++ program */
     int main()
     {
       std::cout << "Hello, world!" << std::endl;
       return 0;
     }
   #+end_src

2. Save the program with the file extention ~.cpp~

3. Run the program on the command line using the =g++= compiler and the
   =-o= flag to rename the executable file to ~hello++~.

4. Upload your file directly to Canvas.

What's different about this code compared to ~hello.c~?

*** Solution:
Process:
1. Open the Windows command line
2. Enter ~notepad hello.cpp~
3. Enter the program text as shown
4. Save the program in the editor
5. On the command line, enter ~g++ hello.cpp -o hello++~
6. On the command line, enter ~hello++~ (may not work for g++ 13.2)
8. Open Canvas and upload the C++ file.

* Practice: first "literate" C program!
#+attr_latex: :width 400px
#+caption: Books aren't the only way to be "literate" in programming!
[[../img/0_books.png]]

Here is a [[https://github.com/birkenkrahe/cpp/blob/main/pdf/helloEmacs.pdf][PDF of this exercise]] and a [[https://youtu.be/Oq83ZCu8FUI][YouTube video (30 min)]].

Let's set Emacs up, write and run a first "literate" C program! it is
very important that you enter everything *exactly as shown*. if you get
something wrong just go back one step. Contact me if you need me after
checking with your neighbor if he or she can help.

1) Open the command line terminal with ~cmd~ in the search field

2) At the prompt, type: ~gcc --version~

3) At the prompt, type: ~emacs --version~

4) If Emacs is available, enter: ~emacs -q~

5) Enter: ~ALT + x eww~ to open a browser inside Emacs.

6) At the prompt, enter: ~tinyurl.com/EmacsLyon~

7) Save the downloaded file with ~CTRL + x CTRL + w~ as ~~/.emacs~

8) Kill the current ~*EWW*~ buffer with ~C-x k~

9) Shut Emacs down with ~C-x C-w~.

10) Restart Emacs. The file you just created, ~.emacs~, is now loaded.

11) Create a new file: ~C-x C-f~ - at the prompt, enter ~firstLit.org~.

12) Enter the following text (replace ~yourname~ with your own name):
    #+attr_latex: :width 400px
    [[../img/0_first.png]]

13) 'Run' the program by putting the cursor anywhere on the code block
    and typing ~CTRL-c CTRL-c~. You should see the result on the screen.

14) This is your first C program! Save the file with ~CTRL + x CTRL + s~
    (in the minibuffer, you will see ~C-x C-s~).

15) 'Tangle' the code with ~CTRL + c CTRL + v t~ (or, alternatively,
    with ~ALT + x org-babel-tangle RET~): Emacs reports ="Tangled 1 code
    block from first.org"= in the minibuffer.

16) 'Weave' the document from the literate file with ~C-c C-e~ followed
    by ~h~ ~o~ to open the document as HTML in a browser.

    #+attr_latex: :width 400px
    #+caption: What happens when you tangle or weave a literate program
    [[../img/0_litprog1.png]]

17) Open a shell inside Emacs by entering: ~ALT-x eshell~

18) At the =$= prompt, enter ~ls -l first*~ - you should see ~first.c~ listed

19) Display ~first.c~ by entering ~cat first.c~

20) Enter ~gcc first.c -o hello~ to compile the C program into an executable

21) Enter ~hello~ to run the executable. You should see the output.

22) Exit and close Emacs with ~CTRL-x CTRL-c~

23) Exit and close the shell by entering ~exit~ after the prompt

24) Save your file to a directory on your GDrive (you can do this from
    GDrive in a browser, with File Explorer, or directly in Emacs with
    the following commands (you don't have to worry about spaces
    etc. because you can auto-complete using the <TAB> key):
    #+begin_example elisp
    C-x C-w                   ;; write file
    w:/My Drive/              ;; target directory
    C-x d w:/My Drive/        ;; open target directory
    s                         ;; sort to see recent files at top
    #+end_example
    You can also do it in the Emacs eshell that you used earlier to
    compile and run the file on the shell (auto-complete with <TAB>):
    #+begin_example bash
    cp first.org w:/My\ Drive/      # copy file to target directory
    cat w:/My\ Drive/first.org      # view copy of file at target location
    #+end_example

25) Upload ~first.org~ as your first 'literate' in-class assignment:
    1. Open a browser to GDrive and upload the file
    2. Open the [[https://lyon.instructure.com/courses/2107/assignments/22790][assignment in Canvas]] at lyon.instructure.com
    3. Upload the file from GDrive (click on "~More~")
    4. When you see it attached, click on ~Submit Assignment~.

* What did you just learn?

You learnt:
1) How to open and close the GNU Emacs editor.
2) How to create, save, and write an Emacs Org-mode file.
3) How to create, compile, and run a C program inside Emacs.
4) How to tangle a literate program into source code.
5) How to save a file on your GDrive in three ways.
6) How to submit a completed assignment to Canvas.

It would be worth repeating these steps on your own without peeking in
your notes to make sure that you understood what you did and that you
can do it again - we'll do this hundreds of times in class!

You can watch me complete this exercise [[https://youtu.be/zRgIaJzrbnY?si=NwOl0u9Nr06FkkoU][in this video]] (30').

* Summary

1) The C programming language was created 50 years ago
2) C is small, simple, very fast, and close to the computer
3) Linux (and Android) are largely written in C
4) The object-oriented programming (OOP) language C++ contains C
5) System programming is a powerful skill set

* Glossary

| CONCEPT/TOPIC           | DEFINITION                                          |
|-------------------------+-----------------------------------------------------|
| DEC PDP-11              | 1970s mainframe computer                            |
| UNIX                    | Operating system (ca. 1969)                         |
| ANSI                    | American National Standard Institute                |
| String                  | A data type representing text                       |
| Assembler               | Machine code (hard to write/read)                   |
| Algorithm               | Fixed process or set of rules                       |
| Linux                   | Operating system (ca. 1991)                         |
| C                       | Imperative, procedural programming language         |
| compiler                | Software to translate source into machine code      |
| C++                     | Object-oriented (OO) superset of C                  |
| Clang                   | C/C++ compiler                                      |
| gcc                     | GNU compiler bundle (incl. C/C++)                   |
| Java,C#                 | OO programming language                             |
| Perl                    | Scripting language                                  |
| Git                     | Software version control system                     |
| GitHub                  | Developer's platform (owned by Microsoft)           |
| Library                 | Bundle of useful functions and routines             |
| Portability             | Ability of software to run on different hardwares   |
| Efficiency              | Software speed of execution and memory requirements |
| Permissiveness          | Degree to which a language tolerates ambiguities    |
| Object-orientation      | Ability to define abstractions                      |
| System programming      | Programming close to the machine                    |
| Application programming | Programming close to the user                       |

* References

- Big Think (Jun 13, 2011). Bjarne Stroustrup: Why the Programming
  Language C Is Obsolete | Big Think
  [video]. [[https://youtu.be/KlPC3O1DVcg][URL:youtu.be/KlPC3O1DVcg]].
- Brock (October 17, 2019). The Earliest Unix Code: An Anniversary
  Source Code Release [Blog]. URL: [[https://computerhistory.org/blog/the-earliest-unix-code-an-anniversary-source-code-release/][computerhistory.org]].
- Cass (29 August 2023). The Top Programming Languages 2019 > Python
  remains the big kahuna, but specialist languages hold their
  own. IEEE Spectrum. [[https://spectrum.ieee.org/the-top-programming-languages-2019][URL: spectrum.ieee.org]].
- Chatley R., Donaldson A., Mycroft A. (2019) The Next 7000
  Programming Languages. In: Steffen B., Woeginger G. (eds) Computing
  and Software Science. Lecture Notes in Computer Science,
  vol 10000. Springer,
  Cham. https://doi.org/10.1007/978-3-319-91908-9_15
- Data Flair (n.d.). Applications of C Programming That Will Make You
  Fall In Love With C [Tutorial]. URL: d[[https://data-flair.training/blogs/applications-of-c/][ata-flair.training.]]
- DESY (Oct 25, 1995). The C++ Virtual Library. URL: [[https://www.desy.de/user/projects/C++.html][desy.de]]
- Gustedt (2019). Modern C. Manning.
- Hock-Chuan (2018). GCC and Make: Compiling, Linking and Building
  C/C++ Applications [website]. [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html][URL: ntu.edu.sg]].
- Kernighan/Ritchie (1978). The C Programming Language. Prentice
  Hall. [[https://en.wikipedia.org/wiki/The_C_Programming_Language][Online: wikipedia.org]].
- King (2008). C Programming - A Modern Approach. Norton. [[http://knking.com/books/c2/index.html][Online:knking.com]].
- Kirsh (September 13, 2021). Rust vs C++ and Is It Good for
  Enterprise? [blog]. [[https://www.incredibuild.com/blog/rust-vs-c-and-is-it-good-for-enterprise][URL: www.incredibuild.com]].
- Lemonaki, Dionysia (November 4, 2021). C vs. C++ - What's The
  Difference [blog]. URL: [[https://www.freecodecamp.org/news/c-vs-cpp-whats-the-difference/][freecodecamp.org.]]
- Neilsen (Aug 14, 2020). Quora. URL: [[https://qr.ae/pGzZ9z][qr.ae/pGzZ9z]].
- Steinhart (2019). The Secret Life of Programs. NoStarch
  Press. [[https://nostarch.com/foundationsofcomp][URL:nostarch.com.]]
- TIOBE (Jan 2022). TIOBE Index for January 2022
  [website]. [[https://www.tiobe.com/tiobe-index/][URL:tiobe.com]].
- Torvalds (6 Sep 2007). Linus Torvalds on C++
  [blog]. [[http://harmful.cat-v.org/software/c++/linus][URL:harmful.cat-v.org]].
- xkcd(n.d.) Purity [cartoon]. [[https://xkcd.com/435/][URL: xkcd.com/]].

* Footnotes

[fn:1]All sources are referenced at the end of the script, followed by
the footnotes, which do unfortunately not render as links [[https://github.com/birkenkrahe/cc100/tree/main/history_of_c][on
GitHub]]. The book by King (2008) does not cover a few recent updates to
the ANSI standard for C, like C11, and the current standard C17. The
next major C standard revision (C23) is expected for 2023. Gustedt
(2019) is a good (but quite difficult) book on "modern C".

[fn:2]Since 2000, C is one of the top two languages in the TIOBE index
(based on searches), and one of the top three of the (more relevant)
IEEE ranking.

[fn:3]The motivation to create Unix, according to [[https://en.wikipedia.org/wiki/Space_Travel_(video_game)][Wikipedia]], was to
port Thompson's space travel video game to the PDP-7 mainframe
computer. So in a way we owe modern computing to gaming.

[fn:4]How many bits can be stored in memory of 8K words depends on the
bit length of a word (or byte). One byte holds 8 = 2^3 bits (binary
digits, or memory locations capable of storing 2 states). For example,
the binary "1111111" represents the decimal number 255 = 2^8 - 1. 8K
byte correspond to 8 * 2^10 = 8 * 1,024 = 8,192 bits. By comparison,
the main memory of my laptop has 16GB = 16 * 2^30 = 3.2E+31 bits. It
follows from these memory restrictions that UNIX (and C) had to be
designed to be very small, or space effective.

[fn:5]Answer: no. By 1966, there were already ca. 700 programming
languages (Chatley et al, 2019), today there are almost 9,000. C
descends from ALGOL60, other important languages are Lisp (functional
language), SIMULA (first OOP language), and PROLOG (logic language).

[fn:6]This is a joke based on someone mixing up c (speed of light
constant) and C (the programming language).

[fn:7]However, he is biased, since he is the creator of C++. The title
of the video is misleading: Stroustrup believes that every C program
should rather be a proper C++ program. However, he also concedes that
C++ is still too complex for many ("We have to clean it up").

[fn:8]Torvalds (who wrote the Linux kernel in C) argues here in favor
of writing his hugely successful version control program ~git~ in C
instead of C++. He highlights some of the strengths of C: efficient,
system-level, portable code.

[fn:9]My first real programming language was FORTRAN (specialized on
scientific computing), then C++. Recently, I picked up R (for data
science). In between I've sampled (not mastered) many others,
including: Python, Lisp, PROLOG, C, PHP, SQL, SQLite etc.
