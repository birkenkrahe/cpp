#+TITLE:Functions
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC 100 / Introduction to programming in C/C++
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:1 ^:nil num:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output 
* README

- This script introduces C functions.

- The PDF version of this file is available in GitHub and you'll get a
  paper copy.

- This section, including some sample code, is based on chapter 9 in
  King (2008).

- To get the most of it, download the practice template file
  [[https://tinyurl.com/cpp-practice-org][tinyurl.com/cpp-practice-org]], save it as a new practice file
  ~functions.org~, and code along.
  
* Overview

- C functions do not always resemble math functions ~f(x)~

- C functions don't need to have arguments, e.g. ~main(void)~ or ~main()~

- C functions need not compute a value, e.g. ~void hello(void)~ or ~void hello()~

- Each function is a small program with its own declarations and
  statements. The ~main~ function is the only mandatory function.

- Functions allow us to
  1. *reuse* functions in other programs
  2. *recall* functions instead of duplicating code
  3. *modularize*, and easier understand and modify programs

- Once upon a time, programs didn't use to have functions!
  #+attr_latex: :width 500px
  #+caption: BASIC program snippet (Source: Collingbourne, 2022).
  _[[../img/15_basic.png]]

* Example: ~hello_world~ function: mostly ~void~

- Can you guess what the output of this code block will be?
  #+name: pgm:hello_world
  #+begin_src C :tangle ../src/hello_world.c
    
  #+end_src
  
- function is doubly ~void~: no =return= value, no argument parameter

- function code can be reused elsewhere

- function can be recalled at will

- Remember that the C compiler really sees this source file:
  1) ~#include~ header file for Input/output
  2) ~main~ function definition {...}
  3) ~hello_world~ function definition {...}
  4) three ~hello_world~ function calls
  #+attr_latex: :width 400px
  [[../../img/15_helloc.png]]

* Functions are everywhere in C!

- How many functions do you see in the following code block and what
  do you think will be its output (guess before running it)?

  #+begin_src C :libs -lm

  #+end_src

  Answer:
  #+begin_quote
  | FUNCTION | DEFINITION           | INPUT       | OUTPUT    |
  |----------+----------------------+-------------+-----------|
  | ~main()~   | main function        | None (~void~) | ~return 0~  |
  | ~printf()~ | printing function    | Arithmetic  | Formatted |
  | ~log()~    | logarithmic function | Constant    | Log of e  |
  #+end_quote

* Example: computing averages
** Function definition

- We want to compute the average of two ~double~ values, we can define a
  function to do it. When ready, run it to check the syntax.

  #+name: average
  #+begin_src C :results silent
    // function definition

       // return value
    
  #+end_src

- Here, ~double~ is /return type/ and /argument data type/.

- ~a~ and ~b~ are /function parameters/ or /arguments/ - their values are
  supplied when the function is called

- The /function body/ is the executable part, enclosed in ~{...}~

- What's being executed by the body of the function ~average~?
  #+begin_quote Answer
  1) computing the average of two ~double~ numbers
  2) returning the result as a ~double~ number
  #+end_quote

** Function calls
*** Overview

- To call a function, write the /function name/ followed by a list of
  /function arguments/.

- The arguments are assigned to the function parameters.

- The argument can be any /expression/.
  
*** Simple call with numbers

- Functions can be called with numbers as arguments:
#+name: simpleCall
#+begin_src C 
  
#+end_src

- What's happening in this code block exactly?
  #+begin_quote
  1. The ~average~ function is defined.
  2. ~average~ is called with arguments ~a=5.1~ and ~b=8.9~
  3. The returned average is assigned to ~avg~
  4. The two arguments and ~avg~ are printed.
  #+end_quote

*** Call with expressions

- Functions can have expressions as arguments.

  #+name: exprCall
  #+begin_src C

  #+end_src

- What's happening here exactly?
  #+begin_quote
  1. The ~average~ function is defined.
  2. Numbers are assigned to ~x~ and ~y~, and ~avg2~ is declared.
  3. The ~average~ function is called with the arguments ~x~ and ~y~
  4. The returned result is assigned to ~avg2~
  5. All three variables are printed.
   #+end_quote
  
*** Call by other functions

- Functions can be called by other functions.

  #+name: nestedCall
  #+begin_src C :noweb yes

  #+end_src

- What's happening in the last line (=printf=) exactly? Describe it!
  #+begin_quote
  1. The ~average~ function is called with ~a=x~ and ~b=y~ as arguments.
  2. ~average~ executes its ~return~ statement, returning ~(x+y)/2~.
  3. ~printf~ prints the value that ~average~ returns.
  4. The ~return~ value of ~average~ becomes an argument of ~printf~.
  #+end_quote
  
*** What happens to function results?

- The value of ~average~ is not saved anywhere. It is printed and
  then discarded.

- If we had needed to keep the value, we'd have to capture it in a
  variable (like ~avg~ in [[simpleCall]], and ~avg2~ in [[exprCall]]).

* Using a function in a program

- The following program reads three numbers and computes their
  averages, one pair at a time.

  Sample input: ~3.5~, ~9.6~, ~10.2~

  Sample output:
  #+begin_example org
  : Average of 3.5 and 9.6: 6.55
  : Average of 9.6 and 10.2: 9.9
  : Average of 3.5 and 10.2: 6.85
  #+end_example

  Code:
  #+begin_src C :cmdline < ./src/input

  #+end_src

- Important: the definition of ~average~ needs to be put *before* ~main~ -
  otherwise the function needs to be declared.

* Practice

- With what you've learnt, you can complete the practice file
  tinyurl.com/cpp-functions-practice (download as .org file)

* References

- Kernighan/Ritchie (1978). The C Programming Language
  (1st). Prentice Hall.
- King (2008). C Programming - A modern approach (2e). W A Norton.
- Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
  orgmode.org]]
