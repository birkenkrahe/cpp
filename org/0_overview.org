#+TITLE:COURSE OVERVIEW
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 100 - Introduction to programming - Spring 2024
#+STARTUP: overview hideblocks indent
#+attr_latex: :width 400px
#+caption: Poster for this course created by DALL-E 3
[[../img/cover.png]]

* What was my first programming language?
#+attr_latex: :width 400px
#+caption: Texas Instruments TI-99/4 16-bit microcomputer, 1979
[[../img/0_ti99.jpg]]

- My first programming languages:
  * [[https://upload.wikimedia.org/wikipedia/commons/7/7b/AtariBASIC.png][BASIC]] - Beginner's All-purpose Symbolic Instruction Code (1979)
  * FORTRAN - FORMula TRANslator (1985)
  * C++ - C with classes (1993)

- My last programming languages:
  * R - statistical programming language (2019)
  * Python - all-purpose programming language (2022)
  * Lisp - the first AI programming language (2024)

- Languages in between:
  * HTML/CSS - web layout (1991)
  * Shell - operating system control (1992)
  * SQL/SQLite - relational databases (2005)
  * Snap! - visual block-based coding (2020)

- Languages that I still want to learn:
  * Assembly - machine language
  * Haskell - functional language
  * Verilog - parallel computing
  * Prolog - logical)

* Which careers do our graduates have?
#+attr_latex: :width 400px
[[../img/careers.png]]

*Where our CS and DS graduates went to work in the last 2 years:*
+ Full stack developer @OneBrief (military planning software)
+ Computer Aided Design at Bad Boy Mowers (comp sci/math/engineering)
+ IT project specialist at Bad Boy Mowers (data science/math/comp sci)
+ Data analyst at Future Fuel Chemical (data science/comp sci)
+ Database specialist at the Department of Homeland Security
+ Software engineer at Riot Games (League of Legends/game company)
+ Cybersecurity engineer at Sierra Nevada (aircraft engineering)
+ Head of data analysis at Enterprise Inc. (rental cars)
+ Programmer at Outlaw Snax Chips (snack foods)
+ Manager Enterprise Applications at Lyon College IT Services

* What will you do in this course?
#+attr_latex: :width 300px
#+caption: Syllabus, Canvas (lyon.instructure.com) or GitHub (github.com/birkenkrahe/cpp)
[[../img/0_schedule.png]]

- We have a *textbook* - King, C Programming - A modern approach (2008)
- We have an *operating system* - Linux (if you're lucky), Windows/MacOS
- We have (more than) an *editor* - Emacs + Org-mode
- We have a *compiler* - GCC ([[https://raw.githubusercontent.com/birkenkrahe/cc/piHome/img/0_gcc_mac.png][also on a Mac]])

* GCC installation on MacOS (ChatGPT)
#+attr_latex: :width 400px
#+caption: GCC installation on MacOS (DALL-E3)
[[../img/0_macos.png]]

How can I install the GNU gcc compiler on MacOS?

To install the GNU =gcc= compiler on MacOS, you can use the =Homebrew=
package manager. Follow these steps:

1. Open a Terminal window.

2. Install Homebrew by entering the following command and following
   the on-screen instructions:
#+begin_example
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
#+end_example
3. Once Homebrew is installed, you can install gcc by entering the
   following command:
#+begin_example
brew install gcc
#+end_example
This will install the latest version of gcc available through Homebrew.

4. After the installation is complete, you can verify that gcc is
   installed by running the following command:
#+begin_example
gcc --version
#+end_example
This command should display the version of gcc that you have installed.

That's it! You should now have the GNU gcc compiler installed on your
MacOS system.

* GCC installation on Windows
#+attr_latex: :width 400px
#+caption: GCC installation on Windows OS (DALL-E 3)
[[../img/0_win.png]]

Step-by-step instructions for installing MinGW via MSYS2:

Step 1: Download MSYS2 installer
- Go to the MSYS2 website: https://www.msys2.org/
- Download the installer

Step 2: Run the installer
- Double-click on the downloaded installer to run it.
- Choose the installation directory (the default is usually fine).
- Click "Next" and then "Install" to start the installation.
- The installer will download and install the necessary files. This
  may take some time, so be patient.

Step 3: Update MSYS2
- After the installation is complete, you'll see an MSYS2
  terminal. Type the following command after the `$` prompt, and press
  Enter:
  #+begin_example
     pacman -Syu
  #+end_example
- This will update the MSYS2 installation with the latest
  packages. Follow the prompts and press Enter when asked.
- For updates (using the same command), add the MYSYS2 terminal to
  your taskbar and run the update regularly.

Step 4: Install MinGW
- Once the update is finished, you can install MinGW by typing the
  following command and pressing Enter:
  #+begin_example
  pacman -S gcc
  #+end_example
- Follow the prompts and press Enter when asked.
- This step can take a few minutes, be patient.

Step 5: Test the installation
- To test if MinGW is installed correctly, open a new MSYS2 terminal.
- Type the following command and press Enter:
  #+begin_example
  gcc --version
  #+end_example
- You should see the version of GCC (the GNU Compiler Collection)
  installed with MinGW.
- If you see the version number, congratulations! MinGW is installed
  and ready to use.

Step 6: Put MSYS2 in the ~PATH~ of your PC
- Type ~PATH~ in your Windows search field and open "Edit the system
  environment variables".
- Click on the "Environment Variables..." button.
- In the "System variables" menu, find the line for "Path" with your
  cursor, and click "Edit".
- In the menu, click "New" and enter ~C:\msys64\mingw64\bin~.
- Click "OK" for all three menus.
- You can now execute ~gcc~ from anywhere on your computer (e.g. from
  inside Emacs, or from the Windows CMD line).

That's it! You have successfully installed MinGW via MSYS2. You can
now use MinGW to compile and run C/C++ programs on your system.

* How will you be evaluated?
#+attr_latex: :width 300px
#+caption: Source: syllabus, Canvas (lyon.instructure.com) or GitHub (github.com/birkenkrahe/ml)
[[../img/0_grades.png]]

- All course requirements have firm deadlines. However:
- If you have to miss a deadline, come talk to me first.
- Unexcused late submissions will be penalized (50%).
- Final exam is optional and will be sourced by term test questions.
- Programming assignments are home assignments.
- In-class practices are "literate programming" exercises.
- All assignments require submission of Emacs Org-mode files.

* Which tools are you going to use?
#+attr_latex: :width 400px
#+caption: How the AI imagines our toolshop (DALL-E 3)
[[../img/0_tools.png]]

- [[https://lyon.instructure.com/courses/2107][Canvas]] (learning management system) - get the mobile app.

- [[https://github.com/birkenkrahe/cpp][GitHub repository]] (all course materials except tests/announcements).

- [[https://www.gnu.org/software/emacs/download.html][GNU Emacs]] (literate programming environment) - [[https://github.com/birkenkrahe/org/blob/master/FAQ.org][see also: FAQ]].

- [[https://en.wikipedia.org/wiki/Command-line_interface][Command line interface]] (shell / REPL) see also: [[https://replit.com/@birkenkrahe/DisfiguredMiniSystemintegrator#main.c][replit.com]].

- [[https://drive.google.com/drive/folders/1zZ_1y6fh3wzZcRJ7-LNpvTjw4MVwAr52?usp=sharing][Google Drive]] for whiteboard screenshots.

* Learning Management System: Canvas
#+attr_latex: :width 400px
#+caption: Canvas (Student view - Syllabus page)
[[../img/0_canvas.png]]

- Announcements (you'll get them also via Email)
- Assignments (Programming assignments and in-class practice)
- Zoom links (cloud recording - will be deleted after a few weeks)
- Course links (GitHub, Whiteboard, Emacs/GCC download)
- Gradebook (up to date grades) & Attendance record

* Software development platform: GitHub
#+attr_latex: :width 400px
#+caption: My GitHub dashboard - close to 4,000 commits in 2022 (100,000 lines of code?)
[[../img/0_github.png]]

- GitHub is the most popular software development platform but not
  just for programmers (cp. [[https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.14108][Braga et al., 2023]])

- It's now owned by Microsoft (which is becoming a problem)

- Here for you: all course materials, and the course FAQ

- To get some bonus points, watch "How GitHub works", complete the
  "Hello world exercise" on the GitHub platform and [[https://lyon.instructure.com/courses/2107/assignments/23317][submit the result]].

* The (feared) Emacs editor & Literate Programming
#+attr_latex: :width 400px
#+caption: My GitHub dashboard
[[../img/0_litprog.png]]

"Story + code = source code + documentation"
- Humans can't read machine code - they require stories.
- Literate programming delivers human-readable programs.
- Emacs + Org-mode is our platform to do this.

* What are we going to do besides programming? 
#+attr_latex: :width 400px
#+caption: Layers between you and a document on your computer (DALL-E3)
[[../img/0_infrastructure.png]]

- There are many layers between your input and the CPU.
- Most of the software enabling you to do stuff is written in C.
- The primary software to connect to the OS is the shell program.

Does anybody know what a "shebang" in computing is?[fn:1]

* Practice: first "literate" C program! (30 min)
#+attr_latex: :width 400px
#+caption: Books aren't the only way to be "literate" in programming!
[[../img/0_books.png]]

(You can find a [[https://github.com/birkenkrahe/cpp/blob/main/pdf/first_org_print.pdf][PDF of this exercise]] on GitHub.)

Let's set emacs up, write and run a first "literate" c program! it is
very important that you enter everything *exactly as shown*. if you get
something wrong just go back one step. Contact me if you need me after
checking with your neighbor if he or she can help.

1) Open the command line terminal with ~cmd~ in the search field

2) At the prompt, type ~gcc --version~

3) Open https://github.com/birkenkrahe/org/ in a browser

4) Navigate to the repository ~emacs~ in GitHub

5) Click on the file name ~.emacs~ to open it

6) Open the ~Raw~ version of this file (there's a button)

7) Right click to ~Save as~ and save file as ~emacs.txt~ in ~/Downloads~

8) Open a terminal by entering ~CMD~ in the Windows search bar

9) Pin the terminal to your taskbar to open it quickly next time!

10) At the prompt, enter ~DIR emacs.txt~ - you should see the file

11) At the prompt, enter ~emacs --version~

12) Enter ~emacs -nw -l emacs.txt~

13) Inside Emacs, enter ~CTRL + x CTRL + f~ to enter a new file.

14) At the prompt at the bottom of the screen, enter ~first.org~

15) Enter the following text (replace ~yourname~ with your own name):
    #+attr_latex: :width 400px
    [[../img/0_first.png]]

16) 'Run' the program by putting the cursor anywhere on the code block
    and typing ~CTRL-c CTRL-c~. You should see the result on the screen.

17) Save the file with ~CTRL + x CTRL + s~

18) 'Tangle' the code with ~CTRL + c CTRL + v t~ (or ~M-x
    org-babel-tangle~): Emacs reports ="Tangled 1 code block from first.org"=.
    #+attr_latex: :width 400px
    #+caption: What happens when you tangle or weave a literate program
    [[../img/0_litprog1.png]]

19) Open a shell inside Emacs by entering ~ALT-x eshell~

20) At the =$= prompt, enter ~ls -l first*~ - you should see ~first.c~ listed

21) Display ~first.c~ by entering ~cat first.c~

22) Enter ~gcc first.c -o hello~ to compile the C program into an executable

23) Enter ~hello~ to run the executable. You should see the output.

24) Exit and close Emacs with ~CTRL-x CTRL-c~

25) Exit and close the shell by entering ~exit~ after the prompt

26) Save your file to a directory on your GDrive (you can do this with
    File Explorer, or directly in Emacs with the following commands
    (you don't have to worry about spaces etc. because you can
    auto-complete using the <TAB> key):
    #+begin_example elisp
    C-x C-w                   ;; write file
    w:/My Drive/              ;; target directory
    C-x d w:/My Drive/        ;; open target directory
    s                         ;; sort to see recent files at top
    #+end_example
    You can also do it in the Emacs eshell that you used earlier to
    compile and run the file on the shell (auto-complete with <TAB>):
    #+begin_example bash
    cp first.org w:/My\ Drive/      # copy file to target directory
    cat w:/My\ Drive/first.org      # view copy of file at target location
    #+end_example

27) Upload ~first.org~ as your first in-class assignment:
    1. Open a browser to GDrive and upload the file
    2. Open the [[https://lyon.instructure.com/courses/2107/assignments/22790][assignment in Canvas]] at lyon.instructure.com
    3. Upload the file from GDrive (click on "~More~")
    4. When you see it attached, click on ~Submit Assignment~.

* What did you just learn?

You learnt:
1) How to open and close a command line (aka shell) on Windows.
2) How to check the version of the C compiler =gcc=.
3) How to find a file on the GitHub platform and download it.
4) How to list, display, and move files from the command line.
5) How to open and close the GNU Emacs editor.
6) How to create, save, and write an Emacs Org-mode file.
7) How to create, compile, and run a C program.
8) How to tangle a literate program into source code.
9) How to save a file on your GDrive in three ways.
10) How to submit a completed assignment to Canvas.

It would be worth repeating these steps on your own without peeking in
your notes to make sure that you understood what you did and that you
can do it again - we'll do this hundreds of times in class!

You can watch me complete this exercise [[https://youtu.be/zRgIaJzrbnY?si=NwOl0u9Nr06FkkoU][in this video]] (30').

* When is the first assignment due?
#+attr_latex: :width 400px
#+caption: Four monks by Claudio Rinaldi (1852-1909)
[[../img/0_monks.png]]

- The first in-class assignment (~first.org~, [[https://lyon.instructure.com/courses/2107/assignments/22790][see Canvas]]) is due no
  later than Friday, January 26. For late submissions, you lose 50% of
  your points. You just did this, all you have to do is submit it!

- The second home assignment (~Emacs tutorial~, see Canvas) is due on
  Friday, January 26, too. For late submissions, you lose 50% of your
  points. We'll start this assignment together in the next session.

- The first multiple-choice test is due on Monday, 22 January,
  including all of the material that was covered until then.

For grading details, see [[https://lyon.instructure.com/courses/2107/assignments/syllabus][syllabus]].

* Glossary

| TERM                  | MEANING                                       |
|-----------------------+-----------------------------------------------|
| Meta data             | Data about data (e.g. layout instructions)    |
| Infrastructure        | Computing roadworks: hardware and software    |
| Editor                | Program to write programs in                  |
| Compiler              | Program to turn source into machine code      |
| ~gcc~                   | The GNU C compiler                            |
| Source code           | Code for humans to read and edit (~.c~)         |
| Machine code          | Code for machines to execute (~.exe~)           |
| [[https://en.wikipedia.org/wiki/Git][Git]]                   | Software version control system (2005)        |
| [[https://www.gnu.org/software/emacs/][Emacs]]                 | Extensible editor written in Lisp (1985)      |
| FOSS                  | Free and Open Source Software                 |
| [[https://en.wikipedia.org/wiki/Linux][Linux]]                 | FOSS operating system (1991)                  |
| Windows, MacOS        | Commercial OS (Microsoft, Apple)              |
| Android               | Linux for smartphones (Google)                |
| iOS                   | MacOS for Apple smartphones                   |
| Command line          | Terminal, shell program to talk to the OS     |
| Prompt                | Location on your computer, e.g. ~C:\User\~      |
| Raw file              | No control characters for syntax highlighting |
| Syntax highlighting   | Making programming language visible           |
| ~DIR~                   | Windows command to list files                 |
| ~cd~                    | Command to change directory                   |
| Literate pgm          | Doc + code + output for humans and machines   |
| Org-mode              | Plugin for Emacs to edit Org files (~.org~)     |
| Dunning-Kruger effect | Illustrating ignorance of your own ignorance  |

* References

- Braga, P. H. P., Hébert, K., Hudgins, E. J., Scott, E. R., Edwards,
  B. P. M., Sánchez Reyes, L. L., Grainger, M. J., Foroughirad, V.,
  Hillemann, F., Binley, A. D., Brookson, C. B., Gaynor, K. M.,
  Shafiei Sabet, S., Güncan, A., Weierbach, H., Gomes, D. G. E., &
  Crystal-Ornelas, R. (2023). Not just for programmers: How GitHub can
  accelerate collaborative and reproducible research in ecology and
  evolution. Methods in Ecology and Evolution, 14,
  1364–1380. https://doi.org/10.1111/2041-210X.14108
- King K N (2008). C Programming - A Modern Approach. Norton.

* Footnotes

[fn:1]A shebang is the command sequence ~#!~ at the beginning of a shell
script. It is followed by the ~PATH~ to an executable program,
e.g. ~bash~.

