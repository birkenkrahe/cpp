#+TITLE:C pointers practice
#+AUTHOR: yourName [pledged]
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:1 num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
* README

- Practice workbook for pointers in C

* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file by
  your name and save the file (~C-x C-s~).

* TODO Indirection operator ~*~

- Write code showing how the value of a variable ~i~ can be changed from
  its initial value ~1~ to a new value ~1~ using a pointer ~*p~ to the
  variable.
- Add the flag ~-Wall~ to the code block header and try to break the
  code.

Pseudocode:
#+begin_example C
/* Change value of integer variable using pointer to variable
   Input: initialized integer variable, initialied NULL pointer
   Output: print original value of variable and pointer to variable
   before and after the change of value  */

 // include standard input/output library header file

 // declare integer variable

 // declare and initialize NULL pointer

 // store address-to variable in pointer

 // assign 1 to variable

 // print values of variable and of pointer to variable

 // change value of variable to 2 using pointer to variable

 // print values of variable and of pointer to variable

 #+end_example

Code:
#+begin_src C

#+end_src

* TODO Initializing pointers

- A few things went wrong in the code block below.
- Fix the problems, and then print the value that ~ptr~ points to, the
  address that ~ptr~ references, and the value of ~var.~

  #+begin_src C
    // declare double precision variable
    double var = 3.14159;
    // declare pointer to double precision variable
    int ptr;

    // initialize pointer
    ptr = var;      // ptr is assigned the address of var
    ptr = 2.71828; // value of var is indirectly changed to the Euler number

    // print pointer, address and value of i

  #+end_src

* TODO Fix the program

- The following function supposedly computes the sum and average of
  the numbers in the array ~a~, which has length ~n~. The variables ~avg~
  and ~sum~ /point/ to variables that the function should modify.

  Unfortunately, the function contains several errors: find and
  correct them so that the code compiles.

  The pseudocode:
  #+begin_example C
  /* Compute sum and average of elements of an array
     Input: array of length n
     Output: average and sum of array elements */

     // void function definition: accept array and size of array,
     // return pointers to avg and sum as parameters

        // initialize sum

        // loop over array

           // sum array elements

        // compute arithmetic average

  #+end_example

  Unfortunately, the function contains several errors: find and
  correct them so that the code compiles and runs.

  #+name: sum1
  #+begin_src C :results silent
    /* Compute sum and average of elements of an array
       Input: array of length n
       Output: average and sum of array elements */

    // void function definition: accept array and size of array,
    // return pointers to avg and sum as parameters
    void avg_sum (double a[], int n, double *avg, double *sum) {
      // initialize sum
      sum = 0.;
      // loop over array
      for (int i = 0 ; i < n; i++)
        {
          // sum array elements
          sum += &a[i];
        }
      // compute arithmetic average
      avg = sum / n;
    } // end of function
  #+end_src

* TODO Swap numbers as pointers

Write the following function:
#+begin_example
void swap(int *p, int *q);
#+end_example
When passed the addresses of two variables, ~swap~ should exchange the
values of the variables. Function call:
#+begin_example C
swap(&i, &j); // exchanges values of i and j
#+end_example

Sample input:
#+begin_example
0 1
#+end_example
Sample output:
#+begin_example
1 0
#+end_example

Pseudocode:
#+begin_example C
   /* Exchange values of two integer variables i and j
    * using a function with pointer-to i and pointer-to j as arguments
    *  Input: address-of i (&i) and address-of j (&j)
    *  Output: print i,j before and after
    */

    // ...
#+end_example

Code:
#+begin_src C
  /* Exchange values of two integer variables i and j
   ,*  using a function with pointer-to i and pointer-to j as arguments
   ,*  Input: address-of i (&i) and address-of j (&j)
   ,*  Output: print i,j before and after
   ,*/

#+end_src
