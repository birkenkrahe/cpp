#+TITLE:C pointers practice
#+AUTHOR: yourName [pledged]
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:1 num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
* README

 - Practice workbook for pointers in C

* TODO Identify yourself

- replace the placeholder ~[yourName]~ in the header of this file by
  your name and save the file (~C-x C-s~).

* TODO Indirection operator ~*~

Put the code [[https://github.com/birkenkrahe/cc/blob/piHome/img/16_indirection.png][from this diagram]] into the code block below and run it
to confirm the claims.
- Make sure you declare your variables!
- Comment your code to indicate you know what you're doing.
- Try to break the code and use the compiler flag ~-Wall~ to report
  all warnings.

#+begin_src C
  /* demonstrate pointer arithmetic */

#+end_src

* TODO Initializing pointers

- The initialization of the pointer ~iPtr~ in the following code
  block went wrong:
- Fix the initialization so that the pointer is assigned an
  address, not a value
- Print the pointer variable ~ptr~, the address and value of ~x~

  #+begin_src C
    double x = 3.14159;
    double *ptr;

    // initialize pointer
    ptr = x;      // ptr is assigned the address of x
    ptr = 2.71828; // value of x is indirectly changed to e

    // print pointer, address and value of i
    ...
  #+end_src

* TODO Fix the program

- The following function supposedly computes the sum and average of
  the numbers in the array ~a~, which has length ~n~. The variables ~avg~
  and ~sum~ /point/ to variables that the function should modify.

  Unfortunately, the function contains several errors:
  - find and correct them so that the code compiles

  #+name: sum1
  #+begin_src C :results silent
    void avg_sum (double a[], int n, double *avg, double *sum)
      {
        int i;
        sum = 0.0;
        for (i = 0; i < n; i++)
          {
          sum += a[i];
          }
        avg = sum / n;
      } // end of function
  #+end_src

* TODO Swap numbers as pointers

Write the following function:
#+begin_example
void swap(int *p, int *q);
#+end_example
When passed the addresses of two variables, ~swap~ should exchange the
values of the variables. Function call:
#+begin_example C
swap(&i, &j); // exchanges values of i and j
#+end_example

Sample input:
#+begin_example
0 1
#+end_example
Sample output:
#+begin_example
1 0
#+end_example

Pseudocode:
#+begin_example C
   /* Exchange values of two integer variables i and j
    * using a function with pointer-to i and pointer-to j as arguments
    *  Input: address-of i (&i) and address-of j (&j)
    *  Output: print i,j before and after 
    */

    Begin
       // ...

       // ...
    End 
#+end_example

Code:
#+begin_src C
   /* Exchange values of two integer variables i and j
    *  using a function with pointer-to i and pointer-to j as arguments
    *  Input: address-of i (&i) and address-of j (&j)
    *  Output: print i,j before and after 
    */

#+end_src

