(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(custom-enabled-themes '(manoj-dark org-beautify))
 '(custom-safe-themes
   '("071f18fb366412734b6215fa97918f465cedad058285f426504f3bf84aae7a3b" default))
 '(org-structure-template-alist
   '(("a" . "export ascii")
     ("c" . "center")
     ("C" . "comment")
     ("e" . "example")
     ("E" . "export")
     ("g" . "src R :session :results output graphics file :file")
     ("r" . "src R :session :results output")
     ("q" . "quote")
     ("s" . "src")
     ("v" . "verse")))
 '(package-selected-packages
   '(ada-mode auto-package-update async auctex bind-key dash helm helm-core htmlize ivy map oauth2 org hide-mode-line org-tree-slide-pauses org-bullets org-pomodoro poly-ansible poly-erb poly-markdown poly-noweb poly-org polymode poly-R with-editor forge gited literate-calc-mode ess ess-R-data-view ess-smart-equals ess-smart-underscore ess-view python sql-indent ob-ipython epresent org-edit-latex el-autoyas ob-hy python-mode openwith org-cliplink org-download org-onenote org-present org-ref org-tree-slide ox-html5slide ox-ioslide secretaria auto-complete python-info hyperbole org-reveal org-sidebar org-beautify-theme org-dashboard org-doing org-timeline gnuplot rust-mode))
 '(python-shell-interpreter "python3")
 '(save-place-mode t)
 '(scroll-bar-mode nil)
 '(send-mail-function 'mailclient-send-it)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil)
 '(tool-bar-position 'top)
 '(tooltip-mode nil))
 
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'dired-find-alternate-file 'disabled nil)
(put 'upcase-region 'disabled nil)

;; find .el files
(add-to-list 'load-path "~/.emacs.d/lisp/")

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; org-tree-slide: https://github.com/takaxp/org-tree-slide
;; to activate: M-x org-tree-slide-mode
(require 'org-tree-slide)
(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f8>") 'org-tree-slide-move-previous-tree) ;; move forwards
  (define-key org-tree-slide-mode-map (kbd "S-<f8>") 'org-tree-slide-move-next-tree)  ;; move backwards
  )
(setq org-image-actual-width nil)
(setq org-tree-slide-skip-outline-level 0)
(setq org-tree-slide-slide-effect t)
(org-tree-slide-simple-profile) ;; no headers

;; suggestions from Udemy Emacs course
;; https://www.udemy.com/course/learning-to-work-with-emacs/learn/lecture/13551146#overview
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages") t)
(add-to-list 'package-archives
             '("gnu" . "https://elpa.gnu.org/packages") t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)

;; remove startup screen - get it back with M-x about-emacs
(setq inhibit-startup-screen t)

;; remove menu bar - to bring it back: M-x menu-bar-mode (toggles)
(menu-bar-mode -1)

;; re-indenting of whole buffer according to mode
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max))
  )

;; Find and open TODO and agenda
(find-file "~/Documents/GitHub/admin/todo.org")
(global-set-key (kbd "C-c a") 'org-agenda)
(org-agenda nil "a")
;; set agenda files
(setq org-agenda-files (list "~/Documents/GitHub/admin/todo.org"
;;                              "~/Documents/GitHub/"
;;                              "~/OneDrive/org/it.org"
;;                              "~/OneDrive/org/courses.org"
;;                              "~/OneDrive/org/books.org"
;;                              "~/OneDrive/org/admin.org"
;;                              "~/OneDrive/org/java115.org"
;;                              "~/OneDrive/org/ai482.org"
;;                              "~/OneDrive/org/mod482.org"
;;                              "~/OneDrive/org/cpp100.org"
;;                              "~/OneDrive/org/db330.org"
;;                              "~/OneDrive/org/alg265.org"
;;                              "~/OneDrive/org/int.org"
;;                              "~/OneDrive/org/int.org"
;;                              "~/OneDrive/org/dsc101.org"
;;                              "~/OneDrive/org/dsc201.org"
;;                              "~/OneDrive/org/fall21.org"
                              ))


;; require org-tempo so that <s <TAB> self-insert works
(require 'org-tempo)

;; require ob-sqlite and ob-sql (for compilation in org src blocks) & tangle
(require 'ob-sqlite)
(require 'ob-sql)
(require 'ob-tangle)
(require 'ob-calc)
(require 'ob-octave)

;; Syntax highlight code in your SRC blocks The last variable removes
;; the annoying “Do you want to execute” your code when you type:
;; C-c C-c
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t)

;; enables Babel to process source blocks
(org-babel-do-load-languages
 'org-babel-load-languages '((python . t)
                             (ruby . t)
                             (C . t)
                             (js . t)
                             (perl . t)
                             (emacs-lisp . t)
                             (shell . t)
                             (css . t)
                             (R . t)
                             (sql . t)
                             ))

;; babel R skeleton code
;; source: https://orgmode.org/worg/org-contrib/babel/how-to-use-Org-Babel-for-R.html
;; BABEL header settings:
;; session *R* - all R code in the same session (access blocks from other code blocks)
;; cache yes - avoid reevaluating unchanged code blocks
;; results output graphics / exports both - R code, text and graphics output in one document
;; tangle: yes - pure code can be extracted with C-c C-v t
;; "-------" generates a horizontal line in HTML
;; invoke skeleton quickly with C-S-f4
(define-skeleton org-skeleton
  "Header info for a emacs-org file."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR:" str " \n"
  "#+SUBTITLE:" str " \n"
  "#+STARTUP:overview\n"
  "#+OPTIONS:hideblocks\n"
                                        ;  "#+AUTHOR: Your Name\n"
                                        ;  "#+email: your-email@server.com\n"
                                        ;  "#+INFOJS_OPT: \n"
                                        ;  "#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes \n"
                                        ;  "-----"
  )
(global-set-key [C-S-f4] 'org-skeleton)

;; frame size 100 x 60 - position top right.
(add-to-list 'default-frame-alist '(height . 58))
(add-to-list 'default-frame-alist '(width . 116))
(add-to-list 'default-frame-alist '(user-position . t))

;; unfill region
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

;; Handy key definition
(define-key global-map "\C-\M-Q" 'unfill-region)

;; inditate sequential work progress states see orgguide 9.3 sect. 5.2 p.11
(setq org-todo-keywords
      '((sequence "NEXT" "TODO" "IN PROGRESS" "READ" "WAITING" "SOMEDAY" "PROJECT" "FEEDBACK" "VERIFY" "|" "DONE" "CANCELLED")))

;; set faces for org-mode keywords
(setq org-todo-keyword-faces
      '(("TODO" . "red")
        ("DONE" . "green")
        ("UPDATE" . "orange")
        ("CANCELED" . (:foreground "blue" :weight bold))))

;; set default target for notes orgguide 9.3 sec.9
(setq org-default-notes-file (concat org-directory "/OneDrive/org/notes.org"))
(put 'downcase-region 'disabled nil)

;; display inline images by default
(setq org-display-inline-images t)
(setq org-redisplay-inline-images t)
;;(setq org-startup-with-inline-images "inlineimages")

;; set font
;; Set default font
(set-face-attribute 'default nil
                    :family "Courier New"
;;                  :family "Source Code Pro"
                    :height 140
                    :weight 'normal
                    :width 'normal)

;; Reveal.js + Org mode
;; (add-to-list 'load-path "~/.emacs.d/org-reveal/")
;; (require 'ox-reveal)
;; (setq Org-Reveal-root "file:///Users/birkenkrahe/Documents/reveal.js/js/reveal.js")
;; (setq Org-Reveal-title-slide nil)



